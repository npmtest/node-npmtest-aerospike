{"/home/travis/build/npmtest/node-npmtest-aerospike/test.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/test.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":1,"12":1,"13":1,"14":1,"15":2,"16":2,"17":2,"18":2,"19":1,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":2,"40":2,"41":1,"42":2,"43":2,"44":1,"45":2,"46":2,"47":1,"48":2,"49":2,"50":1,"51":1,"52":1,"53":1,"54":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1,1],"11":[1,1],"12":[1,1],"13":[1,1],"14":[1,1],"15":[1,1],"16":[1,1],"17":[1,1]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":1,"7":1,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}},"4":{"name":"(anonymous_4)","line":61,"loc":{"start":{"line":61,"column":5},"end":{"line":61,"column":17}}},"5":{"name":"(anonymous_5)","line":82,"loc":{"start":{"line":82,"column":5},"end":{"line":82,"column":17}}},"6":{"name":"(anonymous_6)","line":91,"loc":{"start":{"line":91,"column":77},"end":{"line":94,"column":10}}},"7":{"name":"(anonymous_7)","line":112,"loc":{"start":{"line":112,"column":83},"end":{"line":115,"column":10}},"skip":true},"8":{"name":"(anonymous_8)","line":123,"loc":{"start":{"line":123,"column":77},"end":{"line":126,"column":10}},"skip":true},"9":{"name":"(anonymous_9)","line":139,"loc":{"start":{"line":139,"column":12},"end":{"line":139,"column":40}},"skip":true},"10":{"name":"(anonymous_10)","line":147,"loc":{"start":{"line":147,"column":77},"end":{"line":150,"column":10}},"skip":true},"11":{"name":"(anonymous_11)","line":158,"loc":{"start":{"line":158,"column":83},"end":{"line":161,"column":10}},"skip":true},"12":{"name":"(anonymous_12)","line":169,"loc":{"start":{"line":169,"column":79},"end":{"line":172,"column":10}},"skip":true},"13":{"name":"(anonymous_13)","line":180,"loc":{"start":{"line":180,"column":75},"end":{"line":183,"column":10}},"skip":true}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":195,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":56,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":40,"column":8},"end":{"line":53,"column":9}},"11":{"start":{"line":43,"column":12},"end":{"line":46,"column":14}},"12":{"start":{"line":47,"column":12},"end":{"line":47,"column":18}},"13":{"start":{"line":50,"column":12},"end":{"line":51,"column":33}},"14":{"start":{"line":52,"column":12},"end":{"line":52,"column":18}},"15":{"start":{"line":55,"column":8},"end":{"line":55,"column":35}},"16":{"start":{"line":61,"column":4},"end":{"line":63,"column":9}},"17":{"start":{"line":62,"column":8},"end":{"line":62,"column":15}},"18":{"start":{"line":64,"column":4},"end":{"line":77,"column":5}},"19":{"start":{"line":70,"column":8},"end":{"line":70,"column":14}},"20":{"start":{"line":76,"column":8},"end":{"line":76,"column":14}},"21":{"start":{"line":82,"column":4},"end":{"line":84,"column":9}},"22":{"start":{"line":83,"column":8},"end":{"line":83,"column":15}},"23":{"start":{"line":85,"column":4},"end":{"line":194,"column":5}},"24":{"start":{"line":91,"column":8},"end":{"line":99,"column":10}},"25":{"start":{"line":98,"column":12},"end":{"line":98,"column":35}},"26":{"start":{"line":102,"column":8},"end":{"line":104,"column":63}},"27":{"start":{"line":105,"column":8},"end":{"line":105,"column":14}},"28":{"start":{"line":112,"column":8},"end":{"line":121,"column":10},"skip":true},"29":{"start":{"line":119,"column":12},"end":{"line":119,"column":55},"skip":true},"30":{"start":{"line":120,"column":12},"end":{"line":120,"column":48},"skip":true},"31":{"start":{"line":123,"column":8},"end":{"line":136,"column":10},"skip":true},"32":{"start":{"line":130,"column":12},"end":{"line":130,"column":76},"skip":true},"33":{"start":{"line":131,"column":12},"end":{"line":131,"column":73},"skip":true},"34":{"start":{"line":132,"column":12},"end":{"line":132,"column":74},"skip":true},"35":{"start":{"line":133,"column":12},"end":{"line":133,"column":79},"skip":true},"36":{"start":{"line":134,"column":12},"end":{"line":134,"column":25},"skip":true},"37":{"start":{"line":135,"column":12},"end":{"line":135,"column":45},"skip":true},"38":{"start":{"line":138,"column":8},"end":{"line":145,"column":14},"skip":true},"39":{"start":{"line":143,"column":16},"end":{"line":143,"column":29},"skip":true},"40":{"start":{"line":144,"column":16},"end":{"line":144,"column":55},"skip":true},"41":{"start":{"line":147,"column":8},"end":{"line":156,"column":10},"skip":true},"42":{"start":{"line":154,"column":12},"end":{"line":154,"column":25},"skip":true},"43":{"start":{"line":155,"column":12},"end":{"line":155,"column":45},"skip":true},"44":{"start":{"line":158,"column":8},"end":{"line":167,"column":10},"skip":true},"45":{"start":{"line":165,"column":12},"end":{"line":165,"column":25},"skip":true},"46":{"start":{"line":166,"column":12},"end":{"line":166,"column":48},"skip":true},"47":{"start":{"line":169,"column":8},"end":{"line":178,"column":10},"skip":true},"48":{"start":{"line":176,"column":12},"end":{"line":176,"column":25},"skip":true},"49":{"start":{"line":177,"column":12},"end":{"line":177,"column":46},"skip":true},"50":{"start":{"line":180,"column":8},"end":{"line":189,"column":10},"skip":true},"51":{"start":{"line":187,"column":12},"end":{"line":187,"column":94},"skip":true},"52":{"start":{"line":188,"column":12},"end":{"line":188,"column":48},"skip":true},"53":{"start":{"line":192,"column":8},"end":{"line":192,"column":35},"skip":true},"54":{"start":{"line":193,"column":8},"end":{"line":193,"column":14},"skip":true}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":40,"type":"switch","locations":[{"start":{"line":42,"column":8},"end":{"line":47,"column":18}},{"start":{"line":49,"column":8},"end":{"line":52,"column":18}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":16},"end":{"line":44,"column":44}},{"start":{"line":44,"column":48},"end":{"line":44,"column":66}}]},"6":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":21},"end":{"line":50,"column":49}},{"start":{"line":50,"column":53},"end":{"line":50,"column":72}}]},"7":{"line":64,"type":"switch","locations":[{"start":{"line":69,"column":4},"end":{"line":70,"column":14}},{"start":{"line":75,"column":4},"end":{"line":76,"column":14}}]},"8":{"line":85,"type":"switch","locations":[{"start":{"line":90,"column":4},"end":{"line":105,"column":14}},{"start":{"line":111,"column":4},"end":{"line":193,"column":14},"skip":true}]},"9":{"line":91,"type":"binary-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":73}},{"start":{"line":91,"column":77},"end":{"line":99,"column":9}}]},"10":{"line":102,"type":"binary-expr","locations":[{"start":{"line":102,"column":18},"end":{"line":102,"column":32}},{"start":{"line":103,"column":12},"end":{"line":103,"column":53}},{"start":{"line":104,"column":12},"end":{"line":104,"column":61}}]},"11":{"line":112,"type":"binary-expr","locations":[{"start":{"line":112,"column":45},"end":{"line":112,"column":79},"skip":true},{"start":{"line":112,"column":83},"end":{"line":121,"column":9},"skip":true}]},"12":{"line":123,"type":"binary-expr","locations":[{"start":{"line":123,"column":42},"end":{"line":123,"column":73},"skip":true},{"start":{"line":123,"column":77},"end":{"line":136,"column":9},"skip":true}]},"13":{"line":138,"type":"binary-expr","locations":[{"start":{"line":138,"column":48},"end":{"line":138,"column":85},"skip":true},{"start":{"line":139,"column":12},"end":{"line":145,"column":13},"skip":true}]},"14":{"line":147,"type":"binary-expr","locations":[{"start":{"line":147,"column":42},"end":{"line":147,"column":73},"skip":true},{"start":{"line":147,"column":77},"end":{"line":156,"column":9},"skip":true}]},"15":{"line":158,"type":"binary-expr","locations":[{"start":{"line":158,"column":45},"end":{"line":158,"column":79},"skip":true},{"start":{"line":158,"column":83},"end":{"line":167,"column":9},"skip":true}]},"16":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":43},"end":{"line":169,"column":75},"skip":true},{"start":{"line":169,"column":79},"end":{"line":178,"column":9},"skip":true}]},"17":{"line":180,"type":"binary-expr","locations":[{"start":{"line":180,"column":41},"end":{"line":180,"column":71},"skip":true},{"start":{"line":180,"column":75},"end":{"line":189,"column":9},"skip":true}]}},"code":["/* istanbul instrument in package npmtest_aerospike */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        switch (local.modeJs) {","        // re-init local from window.local","        case 'browser':","            local = local.global.utility2.objectSetDefault(","                local.global.utility2_rollup || local.global.local,","                local.global.utility2","            );","            break;","        // re-init local from example.js","        case 'node':","            local = (local.global.utility2_rollup || require('utility2'))","                .requireReadme();","            break;","        }","        // export local","        local.global.local = local;","    }());","","","","    // run shared js-env code - function","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - function","    case 'browser':","        break;","","","","    // run node js-env code - function","    case 'node':","        break;","    }","","","","    // run shared js-env code - post-init","    (function () {","        return;","    }());","    switch (local.modeJs) {","","","","    // run browser js-env code - post-init","    case 'browser':","        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (","            options,","            onError","        ) {","        /*","         * this function will test browsers's null-case handling-behavior-behavior","         */","            onError(null, options);","        };","","        // run tests","        local.nop(local.modeTest &&","            document.querySelector('#testRunButton1') &&","            document.querySelector('#testRunButton1').click());","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApidoc's default handling-behavior-behavior","         */","            options = { modulePathList: module.paths };","            local.buildApidoc(options, onError);","        };","","        local.testCase_buildApp_default = local.testCase_buildApp_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildApp's default handling-behavior-behavior","         */","            local.testCase_buildReadme_default(options, local.onErrorThrow);","            local.testCase_buildLib_default(options, local.onErrorThrow);","            local.testCase_buildTest_default(options, local.onErrorThrow);","            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);","            options = [];","            local.buildApp(options, onError);","        };","","        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||","            function (options, onError) {","            /*","             * this function will test buildCustomOrg's default handling-behavior","             */","                options = {};","                local.buildCustomOrg(options, onError);","            };","","        local.testCase_buildLib_default = local.testCase_buildLib_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildLib's default handling-behavior","         */","            options = {};","            local.buildLib(options, onError);","        };","","        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildReadme's default handling-behavior-behavior","         */","            options = {};","            local.buildReadme(options, onError);","        };","","        local.testCase_buildTest_default = local.testCase_buildTest_default || function (","            options,","            onError","        ) {","        /*","         * this function will test buildTest's default handling-behavior","         */","            options = {};","            local.buildTest(options, onError);","        };","","        local.testCase_webpage_default = local.testCase_webpage_default || function (","            options,","            onError","        ) {","        /*","         * this function will test webpage's default handling-behavior","         */","            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };","            local.browserTest(options, onError);","        };","","        // run test-server","        local.testRunServer(local);","        break;","    }","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"40":2,"43":1,"47":1,"50":1,"52":1,"55":2,"61":2,"62":2,"64":2,"70":1,"76":1,"82":2,"83":2,"85":2,"91":1,"98":1,"102":1,"105":1,"112":1,"119":1,"120":1,"123":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"138":1,"143":2,"144":2,"147":1,"154":2,"155":2,"158":1,"165":2,"166":2,"169":1,"176":2,"177":2,"180":1,"187":1,"188":1,"192":1,"193":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/lib.npmtest_aerospike.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/lib.npmtest_aerospike.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":1,"15":1,"16":1},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1]},"f":{"1":2,"2":2,"3":2},"fnMap":{"1":{"name":"(anonymous_1)","line":12,"loc":{"start":{"line":12,"column":1},"end":{"line":12,"column":13}}},"2":{"name":"(anonymous_2)","line":19,"loc":{"start":{"line":19,"column":5},"end":{"line":19,"column":17}}},"3":{"name":"(anonymous_3)","line":23,"loc":{"start":{"line":23,"column":24},"end":{"line":23,"column":36}}}},"statementMap":{"1":{"start":{"line":12,"column":0},"end":{"line":53,"column":5}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":14}},"3":{"start":{"line":19,"column":4},"end":{"line":52,"column":9}},"4":{"start":{"line":21,"column":8},"end":{"line":21,"column":19}},"5":{"start":{"line":23,"column":8},"end":{"line":35,"column":13}},"6":{"start":{"line":24,"column":12},"end":{"line":34,"column":13}},"7":{"start":{"line":25,"column":16},"end":{"line":28,"column":30}},"8":{"start":{"line":30,"column":16},"end":{"line":33,"column":27}},"9":{"start":{"line":37,"column":8},"end":{"line":39,"column":21}},"10":{"start":{"line":41,"column":8},"end":{"line":41,"column":54}},"11":{"start":{"line":43,"column":8},"end":{"line":43,"column":54}},"12":{"start":{"line":45,"column":8},"end":{"line":51,"column":9}},"13":{"start":{"line":46,"column":12},"end":{"line":46,"column":60}},"14":{"start":{"line":48,"column":12},"end":{"line":48,"column":35}},"15":{"start":{"line":49,"column":12},"end":{"line":49,"column":49}},"16":{"start":{"line":50,"column":12},"end":{"line":50,"column":43}}},"branchMap":{"1":{"line":25,"type":"binary-expr","locations":[{"start":{"line":25,"column":23},"end":{"line":25,"column":62}},{"start":{"line":26,"column":20},"end":{"line":26,"column":70}},{"start":{"line":27,"column":20},"end":{"line":27,"column":71}},{"start":{"line":28,"column":20},"end":{"line":28,"column":29}}]},"2":{"line":30,"type":"binary-expr","locations":[{"start":{"line":30,"column":23},"end":{"line":30,"column":37}},{"start":{"line":31,"column":20},"end":{"line":31,"column":61}},{"start":{"line":32,"column":20},"end":{"line":32,"column":70}},{"start":{"line":33,"column":20},"end":{"line":33,"column":26}}]},"3":{"line":37,"type":"cond-expr","locations":[{"start":{"line":38,"column":14},"end":{"line":38,"column":20}},{"start":{"line":39,"column":14},"end":{"line":39,"column":20}}]},"4":{"line":41,"type":"binary-expr","locations":[{"start":{"line":41,"column":16},"end":{"line":41,"column":44}},{"start":{"line":41,"column":48},"end":{"line":41,"column":53}}]},"5":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":8},"end":{"line":45,"column":8}},{"start":{"line":45,"column":8},"end":{"line":45,"column":8}}]}},"code":["/* istanbul instrument in package npmtest_aerospike */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || local;","        // init lib","        local.local = local.npmtest_aerospike = local;","        // init exports","        if (local.modeJs === 'browser') {","            local.global.utility2_npmtest_aerospike = local;","        } else {","            module.exports = local;","            module.exports.__dirname = __dirname;","            module.exports.module = module;","        }","    }());","}());",""],"l":{"12":2,"14":2,"19":2,"21":2,"23":2,"24":2,"25":2,"30":1,"37":2,"41":2,"43":2,"45":2,"46":1,"48":1,"49":1,"50":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/example.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/example.js","s":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":1,"9":2,"10":2,"11":2,"12":2,"13":1,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":0,"27":0,"28":1,"29":1,"30":2,"31":0,"32":0,"33":0,"34":1,"35":2,"36":2,"37":3,"38":3,"39":3,"40":3,"41":0,"42":3,"43":3,"44":3,"45":1,"46":3,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":0,"58":1,"59":6,"60":6,"61":1,"62":2,"63":0,"64":2,"65":1,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0},"b":{"1":[2,1,1,1],"2":[1,1,1,1],"3":[1,1],"4":[2,2],"5":[1,1],"6":[1,1],"7":[2,0],"8":[2,1,1,1,1,1],"9":[0,2,0],"10":[1,1],"11":[2,1,1],"12":[1,0],"13":[0,2],"14":[2,0,0,0,0,0,0],"15":[0,3],"16":[3,0],"17":[1,1],"18":[0,1],"19":[1,2,0,2],"20":[1,0],"21":[1,1],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0]},"f":{"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":3,"8":3,"9":3,"10":1,"11":6,"12":0},"fnMap":{"1":{"name":"(anonymous_1)","line":26,"loc":{"start":{"line":26,"column":1},"end":{"line":26,"column":13}}},"2":{"name":"(anonymous_2)","line":33,"loc":{"start":{"line":33,"column":5},"end":{"line":33,"column":17}}},"3":{"name":"(anonymous_3)","line":37,"loc":{"start":{"line":37,"column":24},"end":{"line":37,"column":36}}},"4":{"name":"(anonymous_4)","line":69,"loc":{"start":{"line":69,"column":31},"end":{"line":69,"column":48}},"skip":true},"5":{"name":"(anonymous_5)","line":78,"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":45}},"skip":true},"6":{"name":"(anonymous_6)","line":123,"loc":{"start":{"line":123,"column":33},"end":{"line":123,"column":48}},"skip":true},"7":{"name":"(anonymous_7)","line":125,"loc":{"start":{"line":125,"column":27},"end":{"line":125,"column":39}},"skip":true},"8":{"name":"(anonymous_8)","line":133,"loc":{"start":{"line":133,"column":59},"end":{"line":133,"column":74}},"skip":true},"9":{"name":"(anonymous_9)","line":143,"loc":{"start":{"line":143,"column":45},"end":{"line":143,"column":62}},"skip":true},"10":{"name":"(anonymous_10)","line":144,"loc":{"start":{"line":144,"column":73},"end":{"line":144,"column":92}},"skip":true},"11":{"name":"(anonymous_11)","line":272,"loc":{"start":{"line":272,"column":51},"end":{"line":272,"column":77}},"skip":true},"12":{"name":"(anonymous_12)","line":315,"loc":{"start":{"line":315,"column":32},"end":{"line":315,"column":61}},"skip":true}},"statementMap":{"1":{"start":{"line":26,"column":0},"end":{"line":326,"column":5}},"2":{"start":{"line":28,"column":4},"end":{"line":28,"column":14}},"3":{"start":{"line":33,"column":4},"end":{"line":60,"column":9}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":19}},"5":{"start":{"line":37,"column":8},"end":{"line":49,"column":13}},"6":{"start":{"line":38,"column":12},"end":{"line":48,"column":13}},"7":{"start":{"line":39,"column":16},"end":{"line":42,"column":30}},"8":{"start":{"line":44,"column":16},"end":{"line":47,"column":27}},"9":{"start":{"line":51,"column":8},"end":{"line":53,"column":21}},"10":{"start":{"line":55,"column":8},"end":{"line":57,"column":45}},"11":{"start":{"line":59,"column":8},"end":{"line":59,"column":35}},"12":{"start":{"line":61,"column":4},"end":{"line":325,"column":5}},"13":{"start":{"line":69,"column":8},"end":{"line":121,"column":10},"skip":true},"14":{"start":{"line":70,"column":12},"end":{"line":88,"column":13},"skip":true},"15":{"start":{"line":76,"column":16},"end":{"line":87,"column":19},"skip":true},"16":{"start":{"line":79,"column":20},"end":{"line":86,"column":21},"skip":true},"17":{"start":{"line":82,"column":24},"end":{"line":82,"column":43},"skip":true},"18":{"start":{"line":83,"column":24},"end":{"line":83,"column":30},"skip":true},"19":{"start":{"line":85,"column":24},"end":{"line":85,"column":49},"skip":true},"20":{"start":{"line":89,"column":12},"end":{"line":107,"column":13},"skip":true},"21":{"start":{"line":92,"column":16},"end":{"line":102,"column":17},"skip":true},"22":{"start":{"line":93,"column":20},"end":{"line":93,"column":86},"skip":true},"23":{"start":{"line":94,"column":20},"end":{"line":95,"column":45},"skip":true},"24":{"start":{"line":96,"column":20},"end":{"line":96,"column":42},"skip":true},"25":{"start":{"line":97,"column":20},"end":{"line":97,"column":48},"skip":true},"26":{"start":{"line":100,"column":20},"end":{"line":100,"column":85},"skip":true},"27":{"start":{"line":101,"column":20},"end":{"line":101,"column":96},"skip":true},"28":{"start":{"line":103,"column":16},"end":{"line":103,"column":22},"skip":true},"29":{"start":{"line":106,"column":16},"end":{"line":106,"column":22},"skip":true},"30":{"start":{"line":108,"column":12},"end":{"line":120,"column":13},"skip":true},"31":{"start":{"line":114,"column":16},"end":{"line":119,"column":17},"skip":true},"32":{"start":{"line":116,"column":20},"end":{"line":116,"column":78},"skip":true},"33":{"start":{"line":118,"column":20},"end":{"line":118,"column":47},"skip":true},"34":{"start":{"line":123,"column":8},"end":{"line":141,"column":11},"skip":true},"35":{"start":{"line":124,"column":12},"end":{"line":124,"column":54},"skip":true},"36":{"start":{"line":125,"column":12},"end":{"line":140,"column":14},"skip":true},"37":{"start":{"line":126,"column":16},"end":{"line":126,"column":28},"skip":true},"38":{"start":{"line":127,"column":16},"end":{"line":127,"column":69},"skip":true},"39":{"start":{"line":128,"column":16},"end":{"line":128,"column":75},"skip":true},"40":{"start":{"line":129,"column":16},"end":{"line":131,"column":17},"skip":true},"41":{"start":{"line":130,"column":20},"end":{"line":130,"column":27},"skip":true},"42":{"start":{"line":133,"column":16},"end":{"line":137,"column":36},"skip":true},"43":{"start":{"line":134,"column":20},"end":{"line":136,"column":55},"skip":true},"44":{"start":{"line":139,"column":16},"end":{"line":139,"column":57},"skip":true},"45":{"start":{"line":143,"column":8},"end":{"line":147,"column":11},"skip":true},"46":{"start":{"line":144,"column":12},"end":{"line":146,"column":15},"skip":true},"47":{"start":{"line":145,"column":16},"end":{"line":145,"column":70},"skip":true},"48":{"start":{"line":149,"column":8},"end":{"line":149,"column":31},"skip":true},"49":{"start":{"line":150,"column":8},"end":{"line":150,"column":14},"skip":true},"50":{"start":{"line":158,"column":8},"end":{"line":158,"column":31},"skip":true},"51":{"start":{"line":160,"column":8},"end":{"line":160,"column":33},"skip":true},"52":{"start":{"line":161,"column":8},"end":{"line":161,"column":37},"skip":true},"53":{"start":{"line":162,"column":8},"end":{"line":162,"column":35},"skip":true},"54":{"start":{"line":164,"column":8},"end":{"line":164,"column":50},"skip":true},"55":{"start":{"line":166,"column":8},"end":{"line":256,"column":2},"skip":true},"56":{"start":{"line":258,"column":8},"end":{"line":286,"column":9},"skip":true},"57":{"start":{"line":259,"column":12},"end":{"line":269,"column":14},"skip":true},"58":{"start":{"line":271,"column":12},"end":{"line":285,"column":19},"skip":true},"59":{"start":{"line":274,"column":20},"end":{"line":274,"column":35},"skip":true},"60":{"start":{"line":275,"column":20},"end":{"line":284,"column":21},"skip":true},"61":{"start":{"line":277,"column":24},"end":{"line":277,"column":64},"skip":true},"62":{"start":{"line":279,"column":24},"end":{"line":279,"column":40},"skip":true},"63":{"start":{"line":281,"column":24},"end":{"line":281,"column":40},"skip":true},"64":{"start":{"line":283,"column":24},"end":{"line":283,"column":39},"skip":true},"65":{"start":{"line":288,"column":8},"end":{"line":290,"column":9},"skip":true},"66":{"start":{"line":289,"column":12},"end":{"line":289,"column":18},"skip":true},"67":{"start":{"line":291,"column":8},"end":{"line":293,"column":54},"skip":true},"68":{"start":{"line":296,"column":8},"end":{"line":301,"column":37},"skip":true},"69":{"start":{"line":303,"column":8},"end":{"line":303,"column":82},"skip":true},"70":{"start":{"line":306,"column":8},"end":{"line":308,"column":9},"skip":true},"71":{"start":{"line":307,"column":12},"end":{"line":307,"column":82},"skip":true},"72":{"start":{"line":310,"column":8},"end":{"line":312,"column":9},"skip":true},"73":{"start":{"line":311,"column":12},"end":{"line":311,"column":18},"skip":true},"74":{"start":{"line":313,"column":8},"end":{"line":313,"column":54},"skip":true},"75":{"start":{"line":314,"column":8},"end":{"line":314,"column":69},"skip":true},"76":{"start":{"line":315,"column":8},"end":{"line":323,"column":36},"skip":true},"77":{"start":{"line":316,"column":12},"end":{"line":316,"column":61},"skip":true},"78":{"start":{"line":317,"column":12},"end":{"line":320,"column":13},"skip":true},"79":{"start":{"line":318,"column":16},"end":{"line":318,"column":75},"skip":true},"80":{"start":{"line":319,"column":16},"end":{"line":319,"column":23},"skip":true},"81":{"start":{"line":321,"column":12},"end":{"line":321,"column":38},"skip":true},"82":{"start":{"line":322,"column":12},"end":{"line":322,"column":27},"skip":true},"83":{"start":{"line":324,"column":8},"end":{"line":324,"column":14},"skip":true}},"branchMap":{"1":{"line":39,"type":"binary-expr","locations":[{"start":{"line":39,"column":23},"end":{"line":39,"column":62}},{"start":{"line":40,"column":20},"end":{"line":40,"column":70}},{"start":{"line":41,"column":20},"end":{"line":41,"column":71}},{"start":{"line":42,"column":20},"end":{"line":42,"column":29}}]},"2":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":23},"end":{"line":44,"column":37}},{"start":{"line":45,"column":20},"end":{"line":45,"column":61}},{"start":{"line":46,"column":20},"end":{"line":46,"column":70}},{"start":{"line":47,"column":20},"end":{"line":47,"column":26}}]},"3":{"line":51,"type":"cond-expr","locations":[{"start":{"line":52,"column":14},"end":{"line":52,"column":20}},{"start":{"line":53,"column":14},"end":{"line":53,"column":20}}]},"4":{"line":55,"type":"binary-expr","locations":[{"start":{"line":55,"column":16},"end":{"line":55,"column":44}},{"start":{"line":55,"column":49},"end":{"line":57,"column":43}}]},"5":{"line":55,"type":"cond-expr","locations":[{"start":{"line":56,"column":14},"end":{"line":56,"column":53}},{"start":{"line":57,"column":14},"end":{"line":57,"column":43}}]},"6":{"line":61,"type":"switch","locations":[{"start":{"line":68,"column":4},"end":{"line":150,"column":14},"skip":true},{"start":{"line":156,"column":4},"end":{"line":324,"column":14},"skip":true}]},"7":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true},{"start":{"line":70,"column":12},"end":{"line":70,"column":12},"skip":true}]},"8":{"line":70,"type":"binary-expr","locations":[{"start":{"line":70,"column":16},"end":{"line":70,"column":22},"skip":true},{"start":{"line":70,"column":27},"end":{"line":70,"column":32},"skip":true},{"start":{"line":71,"column":20},"end":{"line":71,"column":39},"skip":true},{"start":{"line":72,"column":20},"end":{"line":72,"column":49},"skip":true},{"start":{"line":73,"column":20},"end":{"line":73,"column":58},"skip":true},{"start":{"line":74,"column":20},"end":{"line":74,"column":69},"skip":true}]},"9":{"line":79,"type":"switch","locations":[{"start":{"line":80,"column":20},"end":{"line":80,"column":33},"skip":true},{"start":{"line":81,"column":20},"end":{"line":83,"column":30},"skip":true},{"start":{"line":84,"column":20},"end":{"line":85,"column":49},"skip":true}]},"10":{"line":89,"type":"switch","locations":[{"start":{"line":90,"column":12},"end":{"line":103,"column":22},"skip":true},{"start":{"line":105,"column":12},"end":{"line":106,"column":22},"skip":true}]},"11":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":20},"end":{"line":89,"column":25},"skip":true},{"start":{"line":89,"column":29},"end":{"line":89,"column":48},"skip":true},{"start":{"line":89,"column":52},"end":{"line":89,"column":74},"skip":true}]},"12":{"line":92,"type":"if","locations":[{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true},{"start":{"line":92,"column":16},"end":{"line":92,"column":16},"skip":true}]},"13":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true},{"start":{"line":108,"column":12},"end":{"line":108,"column":12},"skip":true}]},"14":{"line":108,"type":"binary-expr","locations":[{"start":{"line":108,"column":16},"end":{"line":108,"column":61},"skip":true},{"start":{"line":108,"column":66},"end":{"line":108,"column":72},"skip":true},{"start":{"line":108,"column":77},"end":{"line":108,"column":82},"skip":true},{"start":{"line":109,"column":20},"end":{"line":109,"column":39},"skip":true},{"start":{"line":110,"column":20},"end":{"line":110,"column":49},"skip":true},{"start":{"line":111,"column":20},"end":{"line":111,"column":58},"skip":true},{"start":{"line":112,"column":20},"end":{"line":112,"column":68},"skip":true}]},"15":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true},{"start":{"line":129,"column":16},"end":{"line":129,"column":16},"skip":true}]},"16":{"line":134,"type":"cond-expr","locations":[{"start":{"line":135,"column":26},"end":{"line":135,"column":29},"skip":true},{"start":{"line":136,"column":26},"end":{"line":136,"column":54},"skip":true}]},"17":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":27},"end":{"line":164,"column":43},"skip":true},{"start":{"line":164,"column":47},"end":{"line":164,"column":49},"skip":true}]},"18":{"line":258,"type":"if","locations":[{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true},{"start":{"line":258,"column":8},"end":{"line":258,"column":8},"skip":true}]},"19":{"line":275,"type":"switch","locations":[{"start":{"line":276,"column":20},"end":{"line":277,"column":64},"skip":true},{"start":{"line":278,"column":20},"end":{"line":279,"column":40},"skip":true},{"start":{"line":280,"column":20},"end":{"line":281,"column":40},"skip":true},{"start":{"line":282,"column":20},"end":{"line":283,"column":39},"skip":true}]},"20":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true},{"start":{"line":288,"column":8},"end":{"line":288,"column":8},"skip":true}]},"21":{"line":288,"type":"binary-expr","locations":[{"start":{"line":288,"column":12},"end":{"line":288,"column":40},"skip":true},{"start":{"line":288,"column":44},"end":{"line":288,"column":67},"skip":true}]},"22":{"line":292,"type":"binary-expr","locations":[{"start":{"line":292,"column":12},"end":{"line":292,"column":50},"skip":true},{"start":{"line":293,"column":12},"end":{"line":293,"column":53},"skip":true}]},"23":{"line":297,"type":"binary-expr","locations":[{"start":{"line":297,"column":12},"end":{"line":297,"column":67},"skip":true},{"start":{"line":298,"column":12},"end":{"line":301,"column":36},"skip":true}]},"24":{"line":303,"type":"binary-expr","locations":[{"start":{"line":303,"column":43},"end":{"line":303,"column":75},"skip":true},{"start":{"line":303,"column":79},"end":{"line":303,"column":81},"skip":true}]},"25":{"line":306,"type":"if","locations":[{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true},{"start":{"line":306,"column":8},"end":{"line":306,"column":8},"skip":true}]},"26":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true},{"start":{"line":310,"column":8},"end":{"line":310,"column":8},"skip":true}]},"27":{"line":313,"type":"binary-expr","locations":[{"start":{"line":313,"column":27},"end":{"line":313,"column":43},"skip":true},{"start":{"line":313,"column":47},"end":{"line":313,"column":53},"skip":true}]},"28":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true},{"start":{"line":317,"column":12},"end":{"line":317,"column":12},"skip":true}]}},"code":["/*","example.js","","quickstart example","","instruction","    1. save this script as example.js","    2. run the shell command:","        $ npm install npmtest-aerospike && PORT=8081 node example.js","    3. play with the browser-demo on http://127.0.0.1:8081","*/","","","","/* istanbul instrument in package npmtest_aerospike */","/*jslint","    bitwise: true,","    browser: true,","    maxerr: 8,","    maxlen: 96,","    node: true,","    nomen: true,","    regexp: true,","    stupid: true","*/","(function () {","    'use strict';","    var local;","","","","    // run shared js-env code - pre-init","    (function () {","        // init local","        local = {};","        // init modeJs","        local.modeJs = (function () {","            try {","                return typeof navigator.userAgent === 'string' &&","                    typeof document.querySelector('body') === 'object' &&","                    typeof XMLHttpRequest.prototype.open === 'function' &&","                    'browser';","            } catch (errorCaughtBrowser) {","                return module.exports &&","                    typeof process.versions.node === 'string' &&","                    typeof require('http').createServer === 'function' &&","                    'node';","            }","        }());","        // init global","        local.global = local.modeJs === 'browser'","            ? window","            : global;","        // init utility2_rollup","        local = local.global.utility2_rollup || (local.modeJs === 'browser'","            ? local.global.utility2_npmtest_aerospike","            : global.utility2_moduleExports);","        // export local","        local.global.local = local;","    }());","    switch (local.modeJs) {","","","","    // post-init","    // run browser js-env code - post-init","    /* istanbul ignore next */","    case 'browser':","        local.testRunBrowser = function (event) {","            if (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('onreset'))) {","                // reset output","                Array.from(","                    document.querySelectorAll('body > .resettable')","                ).forEach(function (element) {","                    switch (element.tagName) {","                    case 'INPUT':","                    case 'TEXTAREA':","                        element.value = '';","                        break;","                    default:","                        element.textContent = '';","                    }","                });","            }","            switch (event && event.currentTarget && event.currentTarget.id) {","            case 'testRunButton1':","                // show tests","                if (document.querySelector('#testReportDiv1').style.display === 'none') {","                    document.querySelector('#testReportDiv1').style.display = 'block';","                    document.querySelector('#testRunButton1').textContent =","                        'hide internal test';","                    local.modeTest = true;","                    local.testRunDefault(local);","                // hide tests","                } else {","                    document.querySelector('#testReportDiv1').style.display = 'none';","                    document.querySelector('#testRunButton1').textContent = 'run internal test';","                }","                break;","            // custom-case","            default:","                break;","            }","            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&","                    event.currentTarget &&","                    event.currentTarget.className &&","                    event.currentTarget.className.includes &&","                    event.currentTarget.className.includes('oneval')))) {","                // try to eval input-code","                try {","                    /*jslint evil: true*/","                    eval(document.querySelector('#inputTextareaEval1').value);","                } catch (errorCaught) {","                    console.error(errorCaught);","                }","            }","        };","        // log stderr and stdout to #outputTextareaStdout1","        ['error', 'log'].forEach(function (key) {","            console[key + '_original'] = console[key];","            console[key] = function () {","                var element;","                console[key + '_original'].apply(console, arguments);","                element = document.querySelector('#outputTextareaStdout1');","                if (!element) {","                    return;","                }","                // append text to #outputTextareaStdout1","                element.value += Array.from(arguments).map(function (arg) {","                    return typeof arg === 'string'","                        ? arg","                        : JSON.stringify(arg, null, 4);","                }).join(' ') + '\\n';","                // scroll textarea to bottom","                element.scrollTop = element.scrollHeight;","            };","        });","        // init event-handling","        ['change', 'click', 'keyup'].forEach(function (event) {","            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {","                element.addEventListener(event, local.testRunBrowser);","            });","        });","        // run tests","        local.testRunBrowser();","        break;","","","","    // run node js-env code - post-init","    /* istanbul ignore next */","    case 'node':","        // export local","        module.exports = local;","        // require modules","        local.fs = require('fs');","        local.http = require('http');","        local.url = require('url');","        // init assets","        local.assetsDict = local.assetsDict || {};","        /* jslint-ignore-begin */","        local.assetsDict['/assets.index.template.html'] = '\\","<!doctype html>\\n\\","<html lang=\"en\">\\n\\","<head>\\n\\","<meta charset=\"UTF-8\">\\n\\","<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\","<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\","<style>\\n\\","/*csslint\\n\\","    box-sizing: false,\\n\\","    universal-selector: false\\n\\","*/\\n\\","* {\\n\\","    box-sizing: border-box;\\n\\","}\\n\\","body {\\n\\","    background: #dde;\\n\\","    font-family: Arial, Helvetica, sans-serif;\\n\\","    margin: 2rem;\\n\\","}\\n\\","body > * {\\n\\","    margin-bottom: 1rem;\\n\\","}\\n\\",".utility2FooterDiv {\\n\\","    margin-top: 20px;\\n\\","    text-align: center;\\n\\","}\\n\\","</style>\\n\\","<style>\\n\\","/*csslint\\n\\","*/\\n\\","textarea {\\n\\","    font-family: monospace;\\n\\","    height: 10rem;\\n\\","    width: 100%;\\n\\","}\\n\\","textarea[readonly] {\\n\\","    background: #ddd;\\n\\","}\\n\\","</style>\\n\\","</head>\\n\\","<body>\\n\\","<!-- utility2-comment\\n\\","<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\","utility2-comment -->\\n\\","<h1>\\n\\","<!-- utility2-comment\\n\\","    <a\\n\\","        {{#if env.npm_package_homepage}}\\n\\","        href=\"{{env.npm_package_homepage}}\"\\n\\","        {{/if env.npm_package_homepage}}\\n\\","        target=\"_blank\"\\n\\","    >\\n\\","utility2-comment -->\\n\\","        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\","<!-- utility2-comment\\n\\","    </a>\\n\\","utility2-comment -->\\n\\","</h1>\\n\\","<h3>{{env.npm_package_description}}</h3>\\n\\","<!-- utility2-comment\\n\\","<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\","<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\","<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\","utility2-comment -->\\n\\","\\n\\","\\n\\","\\n\\","<label>stderr and stdout</label>\\n\\","<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\","<!-- utility2-comment\\n\\","{{#if isRollup}}\\n\\","<script src=\"assets.app.js\"></script>\\n\\","{{#unless isRollup}}\\n\\","utility2-comment -->\\n\\","<script src=\"assets.utility2.rollup.js\"></script>\\n\\","<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\","<script src=\"assets.npmtest_aerospike.rollup.js\"></script>\\n\\","<script src=\"assets.example.js\"></script>\\n\\","<script src=\"assets.test.js\"></script>\\n\\","<!-- utility2-comment\\n\\","{{/if isRollup}}\\n\\","utility2-comment -->\\n\\","<div class=\"utility2FooterDiv\">\\n\\","    [ this app was created with\\n\\","    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\","    ]\\n\\","</div>\\n\\","</body>\\n\\","</html>\\n\\","';","        /* jslint-ignore-end */","        if (local.templateRender) {","            local.assetsDict['/'] = local.templateRender(","                local.assetsDict['/assets.index.template.html'],","                {","                    env: local.objectSetDefault(local.env, {","                        npm_package_description: 'the greatest app in the world!',","                        npm_package_name: 'my-app',","                        npm_package_nameAlias: 'my_app',","                        npm_package_version: '0.0.1'","                    })","                }","            );","        } else {","            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']","                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {","                    // jslint-hack","                    String(match0);","                    switch (match1) {","                    case 'npm_package_description':","                        return 'the greatest app in the world!';","                    case 'npm_package_name':","                        return 'my-app';","                    case 'npm_package_nameAlias':","                        return 'my_app';","                    case 'npm_package_version':","                        return '0.0.1';","                    }","                });","        }","        // run the cli","        if (local.global.utility2_rollup || module !== require.main) {","            break;","        }","        local.assetsDict['/assets.example.js'] =","            local.assetsDict['/assets.example.js'] ||","            local.fs.readFileSync(__filename, 'utf8');","        // bug-workaround - long $npm_package_buildCustomOrg","        /* jslint-ignore-begin */","        local.assetsDict['/assets.npmtest_aerospike.rollup.js'] =","            local.assetsDict['/assets.npmtest_aerospike.rollup.js'] ||","            local.fs.readFileSync(","                local.npmtest_aerospike.__dirname + '/lib.npmtest_aerospike.js',","                'utf8'","            ).replace((/^#!/), '//');","        /* jslint-ignore-end */","        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';","        // if $npm_config_timeout_exit exists,","        // then exit this process after $npm_config_timeout_exit ms","        if (Number(process.env.npm_config_timeout_exit)) {","            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));","        }","        // start server","        if (local.global.utility2_serverHttp1) {","            break;","        }","        process.env.PORT = process.env.PORT || '8081';","        console.error('server starting on port ' + process.env.PORT);","        local.http.createServer(function (request, response) {","            request.urlParsed = local.url.parse(request.url);","            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {","                response.end(local.assetsDict[request.urlParsed.pathname]);","                return;","            }","            response.statusCode = 404;","            response.end();","        }).listen(process.env.PORT);","        break;","    }","}());",""],"l":{"26":2,"28":2,"33":2,"35":2,"37":2,"38":2,"39":2,"44":1,"51":2,"55":2,"59":2,"61":2,"69":1,"70":2,"76":2,"79":2,"82":2,"83":2,"85":1,"89":2,"92":1,"93":1,"94":1,"96":1,"97":1,"100":1,"101":1,"103":1,"106":1,"108":2,"114":1,"116":1,"118":1,"123":1,"124":2,"125":2,"126":3,"127":3,"128":3,"129":3,"130":1,"133":3,"134":3,"139":3,"143":1,"144":3,"145":1,"149":1,"150":1,"158":1,"160":1,"161":1,"162":1,"164":1,"166":1,"258":1,"259":1,"271":1,"274":6,"275":6,"277":1,"279":2,"281":1,"283":2,"288":1,"289":1,"291":1,"296":1,"303":1,"306":1,"307":1,"310":1,"311":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"321":1,"322":1,"324":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/aerospike.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/aerospike.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":3,"16":1,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":6,"46":1,"47":14,"48":14,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1},"b":{"1":[0,0]},"f":{"1":3,"2":0,"3":0,"4":0,"5":1,"6":6,"7":14},"fnMap":{"1":{"name":"(anonymous_1)","line":125,"loc":{"start":{"line":125,"column":29},"end":{"line":125,"column":44}}},"2":{"name":"client","line":136,"loc":{"start":{"line":136,"column":0},"end":{"line":136,"column":25}}},"3":{"name":"connect","line":148,"loc":{"start":{"line":148,"column":0},"end":{"line":148,"column":36}}},"4":{"name":"key","line":173,"loc":{"start":{"line":173,"column":0},"end":{"line":173,"column":28}}},"5":{"name":"Aerospike","line":177,"loc":{"start":{"line":177,"column":0},"end":{"line":177,"column":22}}},"6":{"name":"(anonymous_6)","line":204,"loc":{"start":{"line":204,"column":34},"end":{"line":204,"column":49}}},"7":{"name":"(anonymous_7)","line":207,"loc":{"start":{"line":207,"column":29},"end":{"line":207,"column":44}}}},"statementMap":{"1":{"start":{"line":109,"column":0},"end":{"line":109,"column":53}},"2":{"start":{"line":111,"column":0},"end":{"line":111,"column":51}},"3":{"start":{"line":112,"column":0},"end":{"line":112,"column":34}},"4":{"start":{"line":113,"column":0},"end":{"line":113,"column":34}},"5":{"start":{"line":114,"column":0},"end":{"line":114,"column":36}},"6":{"start":{"line":115,"column":0},"end":{"line":115,"column":28}},"7":{"start":{"line":116,"column":0},"end":{"line":116,"column":43}},"8":{"start":{"line":117,"column":0},"end":{"line":117,"column":34}},"9":{"start":{"line":118,"column":0},"end":{"line":118,"column":30}},"10":{"start":{"line":119,"column":0},"end":{"line":119,"column":32}},"11":{"start":{"line":120,"column":0},"end":{"line":120,"column":30}},"12":{"start":{"line":121,"column":0},"end":{"line":121,"column":42}},"13":{"start":{"line":122,"column":0},"end":{"line":122,"column":32}},"14":{"start":{"line":125,"column":0},"end":{"line":127,"column":2}},"15":{"start":{"line":126,"column":2},"end":{"line":126,"column":26}},"16":{"start":{"line":136,"column":0},"end":{"line":138,"column":1}},"17":{"start":{"line":137,"column":2},"end":{"line":137,"column":27}},"18":{"start":{"line":148,"column":0},"end":{"line":156,"column":1}},"19":{"start":{"line":149,"column":2},"end":{"line":152,"column":3}},"20":{"start":{"line":150,"column":4},"end":{"line":150,"column":21}},"21":{"start":{"line":151,"column":4},"end":{"line":151,"column":17}},"22":{"start":{"line":153,"column":2},"end":{"line":153,"column":34}},"23":{"start":{"line":154,"column":2},"end":{"line":154,"column":26}},"24":{"start":{"line":155,"column":2},"end":{"line":155,"column":15}},"25":{"start":{"line":173,"column":0},"end":{"line":175,"column":1}},"26":{"start":{"line":174,"column":2},"end":{"line":174,"column":30}},"27":{"start":{"line":177,"column":0},"end":{"line":609,"column":1}},"28":{"start":{"line":179,"column":2},"end":{"line":179,"column":22}},"29":{"start":{"line":180,"column":2},"end":{"line":180,"column":38}},"30":{"start":{"line":181,"column":2},"end":{"line":181,"column":22}},"31":{"start":{"line":182,"column":2},"end":{"line":182,"column":24}},"32":{"start":{"line":183,"column":2},"end":{"line":183,"column":16}},"33":{"start":{"line":186,"column":2},"end":{"line":186,"column":22}},"34":{"start":{"line":187,"column":2},"end":{"line":187,"column":24}},"35":{"start":{"line":188,"column":2},"end":{"line":188,"column":16}},"36":{"start":{"line":189,"column":2},"end":{"line":189,"column":26}},"37":{"start":{"line":191,"column":2},"end":{"line":191,"column":54}},"38":{"start":{"line":194,"column":2},"end":{"line":194,"column":22}},"39":{"start":{"line":195,"column":2},"end":{"line":195,"column":18}},"40":{"start":{"line":196,"column":2},"end":{"line":196,"column":20}},"41":{"start":{"line":197,"column":2},"end":{"line":197,"column":18}},"42":{"start":{"line":198,"column":2},"end":{"line":198,"column":30}},"43":{"start":{"line":203,"column":2},"end":{"line":203,"column":19}},"44":{"start":{"line":204,"column":2},"end":{"line":206,"column":4}},"45":{"start":{"line":205,"column":4},"end":{"line":205,"column":35}},"46":{"start":{"line":207,"column":2},"end":{"line":210,"column":4}},"47":{"start":{"line":208,"column":4},"end":{"line":208,"column":73}},"48":{"start":{"line":209,"column":4},"end":{"line":209,"column":34}},"49":{"start":{"line":211,"column":2},"end":{"line":211,"column":26}},"50":{"start":{"line":224,"column":2},"end":{"line":224,"column":29}},"51":{"start":{"line":257,"column":2},"end":{"line":257,"column":19}},"52":{"start":{"line":371,"column":2},"end":{"line":371,"column":25}},"53":{"start":{"line":412,"column":2},"end":{"line":412,"column":19}},"54":{"start":{"line":418,"column":2},"end":{"line":418,"column":33}},"55":{"start":{"line":434,"column":2},"end":{"line":434,"column":31}},"56":{"start":{"line":451,"column":2},"end":{"line":451,"column":37}},"57":{"start":{"line":466,"column":2},"end":{"line":466,"column":39}},"58":{"start":{"line":491,"column":2},"end":{"line":491,"column":31}},"59":{"start":{"line":608,"column":2},"end":{"line":608,"column":25}},"60":{"start":{"line":610,"column":0},"end":{"line":610,"column":32}}},"branchMap":{"1":{"line":149,"type":"if","locations":[{"start":{"line":149,"column":2},"end":{"line":149,"column":2}},{"start":{"line":149,"column":2},"end":{"line":149,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @module aerospike"," *"," * @description The Aerospike module is the main entry point for the Aerospike"," * Node.js Client API. It provides methods for creating new client instances"," * that connect to a specific Aerospike server cluster."," *"," * # Data Model"," *"," * ## Record"," *"," * A record is how the data is represented and stored in the database. A record"," * is represented as an object. The keys of the object are the names of the fields"," * (bins) of a record. The values for each field can either be Number, String,"," * Array, Buffer or an Object itself. Aerospike supports integer, double,"," * string, bytes, array and map data types."," *"," * Note: Array can contain an array or an object as a value in it. Similarly"," * the object can contain an array or an object as a value in it. Essentially"," * nesting of arrays in an object, and nesting of objects in an array is"," * allowed."," *"," * Example of a record with 5 fields:"," *"," * ```js"," * var record = {"," *   int_bin: 123,"," *   str_bin: 'xyz',"," *   buff_bin: new Buffer('hello world!'),"," *   arr_bin: [1, 2, 3],"," *   obj_bin: {num: 123, str: 'abc', buff: new Buffer([0xa, 0xb, 0xc])}"," * }"," * ```"," *"," * ### Unsupported Data Types"," *"," * Aerospike does currently not support a boolean data type. To store boolean"," * values in the database the application needs to convert them to a supported"," * data type as the client does not do any automatica data type conversions."," * Attempting to store a boolean value in a record bin will lead to a parameter"," * error being returned by the client."," *"," * ## Metadata"," *"," * Some operations allow you to provide metadata with a record, including:"," *"," * - `gen` – (optional) The generation (version) of the record. Must be an Integer."," * - `ttl` – (optional) The time-to-live in seconds (expiration) of the record."," *   Must be an Integer. There are a few \"special\" TTL values which are defined"," *   under the {@link module:aerospike.ttl|ttl} property on the aerospike module."," *"," * Example:"," *"," * ```js"," * var metadata = {"," *   gen: 1,"," *   ttl: 6000"," * }"," * ```"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const Key = Aerospike.Key"," *"," * const config = {"," *   hosts: '192.168.0.1:3000',"," *   policies: {"," *     timeout: 50"," *   }"," * }"," *"," * Aerospike.connect(config, (error, client) => {"," *   if (error) throw error"," *   var key = new Key('test', 'demo', 'key1')"," *   client.get(key, (error, record, meta) => {"," *     if (error) {"," *       switch (error.code) {"," *         case Aerospike.status.AEROSPIKE_ERR_RECORD_NOT_FOUND:"," *           console.error('record ' + key.key + ' does not exist')"," *           break;"," *         default:"," *           throw error"," *       }"," *     } else {"," *       console.log(record, meta)"," *     }"," *     client.close()"," *   })"," * })"," */","","const as = require('../build/Release/aerospike.node')","","const AerospikeError = require('./aerospike_error')","const Client = require('./client')","const Double = require('./double')","const GeoJSON = require('./geojson')","const Key = require('./key')","const asEventLoop = require('./event_loop')","const filter = require('./filter')","const info = require('./info')","const lists = require('./lists')","const maps = require('./maps')","const operations = require('./operations')","const utils = require('./utils')","","// copy maps related enums into maps module","Object.keys(as.maps).forEach(function (key) {","  maps[key] = as.maps[key]","})","","/**"," * @function module:aerospike.client"," *"," * @summary Creates a new {@link Client} instance."," *"," * @param {Config} config - The configuration for the client."," */","function client (config) {","  return new Client(config)","}","","/**"," * @function module:aerospike.connect"," *"," * @summary Creates a new {@link Client} instance and connects to the Aerospike cluster."," *"," * @param {Config} [config] - The configuration for the client."," * @param {Client~connectCallback} callback - The funcation to call, once the client is connected to the cluster successfully."," */","function connect (config, callback) {","  if (typeof config === 'function') {","    callback = config","    config = null","  }","  var client = this.client(config)","  client.connect(callback)","  return client","}","","/**"," * @function module:aerospike.key"," *"," * @summary Creates a new {@link Key} instance."," *"," * @description Provided for backward compatibility. Use the {@link Key} class"," * constructor instead."," *"," * @param {string} ns - The Namespace to which the key belongs."," * @param {string} set - The Set to which the key belongs."," * @param {(string|number|Buffer)} value - The unique key value. Keys can be"," * strings, integers or an instance of the Buffer class."," *"," * @deprecated in v2.0"," */","function key (ns, set, key) {","  return new Key(ns, set, key)","}","","function Aerospike () {","  // classes && data types","  this.Client = Client","  this.AerospikeError = AerospikeError","  this.Double = Double","  this.GeoJSON = GeoJSON","  this.Key = Key","","  // top-level methods exposed through Aerospike module","  this.client = client","  this.connect = connect","  this.key = key","  this.print = utils.print","","  this.releaseEventLoop = asEventLoop.releaseEventLoop","","  // other commands contained in sub-modules","  this.filter = filter","  this.info = info","  this.lists = lists","  this.maps = maps","  this.operations = operations","","  // Include both scalar and list operations in the Aerospike.operator","  // namespace for backwards compatibility. Aerospike.operator is deprecated","  // and will be removed in the next major release.","  var operator = {}","  Object.keys(operations).forEach(function (key) {","    operator[key] = operations[key]","  })","  Object.keys(lists).forEach(function (key) {","    var listKey = 'list' + key.substr(0, 1).toUpperCase() + key.substr(1)","    operator[listKey] = lists[key]","  })","  this.operator = operator","","  // enums imported from C client library","","  /**","   * Enumeration of UDF types.","   *","   * @member {Object} language","   * @readonly","   * @static","   *","   * @property LUA - Lua (only supported UDF type at the moment)","   */","  this.language = as.language","","  /**","   * Enumeration of log levels","   *","   * @member {Object} log","   * @readonly","   * @static","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   *","   * var config = {","   *   log: { level: Aerospike.log.INFO }","   * }","   * Aerospike.connect(config, (error, client) => {","   *   if (error) throw error","   *","   *   var key = new Aerospike.Key('test', 'demo', 'k1')","   *   client.get(key, (error, record) => {","   *     if (error) throw error","   *     console.info(record)","   *     client.close()","   *   })","   * })","   *","   * @property OFF","   * @property ERROR","   * @property WARN","   * @property DEBUG","   * @property DETAIL","   */","  this.log = as.log","","  /**","   * Enumeration of policy values.","   *","   * @member {Object} policy","   * @readonly","   * @static","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   *","   * // global policy, applied to all commands that do not override it","   * var config = {","   *   policies: {","   *     timeout: 100,","   *     retry: Aerospike.policy.retry.ONCE","   *   }","   * }","   *","   * Aerospike.connect(config, (error, client) => {","   *   if (error) throw error","   *","   *   var key = new Aerospike.Key('test', 'demo', 'k1')","   *   var record = {i: 1234}","   *","   *   // override policy for put command","   *   var policy = {","   *     exists: Aerospike.policy.exists.CREATE,","   *     key: Aerospike.policy.key.SEND","   *   }","   *","   *   client.put(key, record, {}, policy, (error) => {","   *     if (error && error.code === Aerospike.status.AEROSPIKE_ERR_RECORD_EXISTS) {","   *       console.info('record already exists')","   *     } else if (error) {","   *       throw error","   *     }","   *     client.close()","   *   })","   * })","   *","   * @property {object} retry - Retry Policy - Specifies the behavior of failed","   * operations. **Important**: Single key read/write commands, the","   * batch read command and query/scan commands **do not follow** the retry","   * policy. Retry policy is deprecated in v2.4 and will be removed","   * in a future version.","   *","   * @property retry.NONE - Only attempt an operation once.","   * @property retry.ONCE - If an operation fails, attempt the operation one","   * more time.","   *","   * @property {object} gen - Generation Policy - Specifies the behavior of","   * record modifications with regard to the generation value.","   *","   * @property gen.IGNORE - Write a record, regardless of generation.","   * @property gen.EQ - Write a record, ONLY if generations are equal.","   * @property gen.GT - Write a record, ONLY if local generation is greater than","   * remote generation.","   *","   * @property {object} key - Key Policy - Specifies the behavior for whether","   * keys or digests should be sent to the cluster.","   *","   * @property key.DIGEST - Send the digest value of the key. This is the","   * recommended mode of operation. This calculates the digest and sends the","   * digest to the server. The digest is only calculated on the client, and not","   * the server.","   *","   * @property key.SEND - Send the key, in addition to the digest value. If you","   * want keys to be returned when scanning or querying, the keys must be","   * stored on the server. This policy causes a write operation to store the","   * key. Once the key is stored, the server will keep it - there is no need to","   * use this policy on subsequent updates of the record. If this policy is","   * used on read or delete operations, or on subsequent updates of a record","   * with a stored key, the key sent will be compared with the key stored on","  * the server. A mismatch will cause","  * <code>AEROSPIKE_ERR_RECORD_KEY_MISMATCH</code> to be returned.","   *","   * @property {object} exists - Existence Policy - Specifies the behavior for","   * writing the record depending whether or not it exists.","   *","   * @property exists.IGNORE - Write the record, regardless of existence.","   * (I.e. create or update.)","   * @property exists.CREATE - Create a record, ONLY if it doesn't exist.","   * @property exists.UPDATE - Update a record, ONLY if it exists.","   * @property exists.REPLACE - Completely replace a record, ONLY if it exists.","   * @property exists.CREATE_OR_REPLACE - Completely replace a record if it","   * exists, otherwise create it.","   *","   * @property {object} replica - Specifies which partition replica to read from.","   *","   * @property replica.MASTER - Read from the partition master replica node.","   * @property replica.ANY - Distribute reads across nodes containing key's","   * master and replicated partition in round-robin fashion. Currently","   * restricted to master and one prole.","   *","   * @property {object} consistencyLevel - Specifies the number of replicas to","   * be consulted in a read operation to provide the desired consistency","   * guarantee.","   *","   * @property consistencyLevel.ONE - Involve a single replica in the","   * operation.","   * @property consistencyLevel.ALL - Involve all replicas in the operation.","   *","   * @property {object} commitLevel - Specifies the number of replicas required","   * to be successfully committed before returning success in a write operation","   * to provide the desired consistency guarantee.","   *","   * @property commitLevel.ALL - Return success only after successfully","   * committing all replicas.","   * @property commitLevel.MASTER - Return success after successfully","   * committing the master replica.","   */","  this.policy = as.policy","","  /**","   * @summary Enumertion of special TTL (time-to-live) values.","   *","   * @description Instead of specifying a TTL in seconds, you can set the TTL","   * to one of these special values when creating or updating a record.","   *","   * @member {Object} ttl","   * @readonly","   * @static","   *","   * @property NAMESPACE_DEFAULT - Use the default TTL value for the namespace of the record.","   * @property NEVER_EXIRE - Never expire the record.","   * @property DONT_UPDATE - Update the record without changing the record's","   *                         TTL value. Requires Aerospike Server version 3.10.1 or later.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const Key = Aerospike.Key","   *","   * Aerospike.connect((error, client) => {","   *   if (error) throw error","   *   var key = new Key('test', 'demo', 'key1')","   *   var record = { 'a': 1, 'b': 2 }","   *   var meta = { ttl: 12345 }","   *   var policy = { exists: Aerospike.policy.exists.CREATE_OR_REPLACE }","   *   client.put(key, record, meta, policy, (error) => {","   *     if (error) throw error","   *     client.put(key, { c: 3 }, { ttl: Aerospike.ttl.DONT_UPDATE }, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record, meta) => {","   *         if (error) throw error","   *         console.log(record, meta) // => { a: 1, b: 2, c: 3 } { ttl: 12345, gen: 2 }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  this.ttl = as.ttl","","  /**","   * Enumeration of predicate types.","   * @private","   */","  this.predicates = as.predicates","","  /**","   * Enumeration of job status codes.","   *","   * @member {Object} jobStatus","   * @readonly","   * @static","   *","   * @see {@link Job#infoCallback} returns the job status.","   *","   * @property UNDEF - The job status is undefined. This is likely due to the","   * status not being properly checked.","   * @property INPROGRESS - The job is currently running.","   * @property COMPLETED - The job completed successfully.","   */","  this.jobStatus = as.jobStatus","","  /**","   * Enumeration of priority levels for a scan operation.","   *","   * @member {Object} scanPriority","   * @readonly","   * @static","   *","   *","   * @see {@link Scan#priority}","   *","   * @property AUTO - The cluster will auto adjust the scan priority.","   * @property LOW - Low scan priority.","   * @property MEDIUM - Medium scan priority.","   * @property HIGH - High scan priority.","   */","  this.scanPriority = as.scanPriority","","  /**","   * Enumeration of secondary index data types.","   *","   * @member {Object} indexDataType","   * @readonly","   * @static","   *","   * @property STRING - Values contained in the secondary index are strings.","   * @property NUMERIC - Values contained in the secondary index are integers.","   * @property GEO2DSPHERE - Values contained in the secondary index are GeoJSON values (points or polygons).","   *","   * @see {@link Client#createIndex}","   */","  this.indexDataType = as.indexDataType","","  /**","   * Enumeration of secondary index types.","   *","   * @member {Object} indexType","   * @readonly","   * @static","   *","   * @property DEFAULT - Default secondary index type for bins containing scalar values (i.e. integer, string).","   *","   * @property LIST - Secondary index for bins containing","   * <a href=\"http://www.aerospike.com/docs/guide/cdt-list.html\" title=\"Aerospike List Data Type\">&uArr;Lists</a>;","   * the index will be build over the individual entries of the list.","   *","   * @property MAPKEYS - Secondary index for bins containing","   * <a href=\"http://www.aerospike.com/docs/guide/cdt-map.html\" title=\"Aerospike Maps Data Type\">&uArr;Maps</a>;","   * the index will be build over the individual keys of the map entries.","   *","   * @property MAPVALUES - Secondary index for bins containing","   * <a href=\"http://www.aerospike.com/docs/guide/cdt-map.html\" title=\"Aerospike Maps Data Type\">&uArr;Maps</a>;","   * the index will be build over the individual values of the map entries.","   *","   * @see {@link Client#createIndex}","   */","  this.indexType = as.indexType","","  /**","   * Enumeration of error status codes.","   *","   * @member {Object} status","   * @readonly","   * @static","   *","   * @property AEROSPIKE_ERR_INVALID_NODE - Node invalid or could not be found.","   * @property AEROSPIKE_ERR_NO_MORE_CONNECTIONS - Asynchronous connection error.","   * @property AEROSPIKE_ERR_ASYNC_CONNECTION - Asynchronous connection error.","   * @property AEROSPIKE_ERR_CLIENT_ABORT - Query or scan was aborted in user's callback.","   * @property AEROSPIKE_ERR_INVALID_HOST - Host name could not be found in DNS lookup.","   * @property AEROSPIKE_NO_MORE_RECORDS - No more records available when parsing batch, scan or query records.","   * @property AEROSPIKE_ERR_PARAM - Invalid client API parameter.","   * @property AEROSPIKE_ERR_CLIENT - Generic client API usage error.","   * @property AEROSPIKE_ERR - Generic client error (deprecated).","   * @property AEROSPIKE_OK - Generic success.","   * @property AEROSPIKE_ERR_SERVER - Generic error returned by the server.","   * @property AEROSPIKE_ERR_RECORD_NOT_FOUND - Record does not exist in database. May be returned by read, or write with policy <code>exists: Aerospike.policy.exists.UPDATE</code>","   * @property AEROSPIKE_ERR_RECORD_GENERATION - Generation of record in database does not satisfy write policy.","   * @property AEROSPIKE_ERR_REQUEST_INVALID - Request protocol invalid, or invalid protocol field.","   * @property AEROSPIKE_ERR_RECORD_EXISTS - Record already exists. May be returned by write with policy <code>exists: Aerospike.policy.exists.CREATE</code>.","   * @property AEROSPIKE_ERR_BIN_EXISTS - Bin already exists.","   * @property AEROSPIKE_ERR_CLUSTER_CHANGE - A cluster state change occurred during the request.","   * @property AEROSPIKE_ERR_SERVER_FULL - The server node is running out of memory and/or storage device space reserved for the specified namespace.","   * @property AEROSPIKE_ERR_TIMEOUT - Request timed out. Can be triggered by client or server.","   * @property AEROSPIKE_ERR_NO_XDR - XDR not available for the cluster.","   * @property AEROSPIKE_ERR_CLUSTER - Generic cluster discovery & connection error.","   * @property AEROSPIKE_ERR_BIN_INCOMPATIBLE_TYPE - Bin modification operation cannot be done on an existing bin due to its value type.","   * @property AEROSPIKE_ERR_RECORD_TOO_BIG - Record being (re-)written cannot fit in a storage write block.","   * @property AEROSPIKE_ERR_RECORD_BUSY - Too many concurrent requests for one record - a \"hot key\" situation.","   * @property AEROSPIKE_ERR_SCAN_ABORTED - Scan aborted by user.","   * @property AEROSPIKE_ERR_UNSUPPORTED_FEATURE - Sometimes our doc, or our customers' wishes, get ahead of us. We may have processed something that the server is not ready for (unsupported feature).","   * @property AEROSPIKE_ERR_BIN_NOT_FOUND - Bin-level replace-only supported on server but not on client.","   * @property AEROSPIKE_ERR_DEVICE_OVERLOAD - The server node's storage device(s) can't keep up with the write load.","   * @property AEROSPIKE_ERR_RECORD_KEY_MISMATCH - Record key sent with transaction did not match key stored on server.","   * @property AEROSPIKE_ERR_NAMESPACE_NOT_FOUND - Namespace in request not found on server.","   * @property AEROSPIKE_ERR_BIN_NAME - Sent too-long bin name or exceeded namespace's bin name quota.","   * @property AEROSPIKE_ERR_FAIL_FORBIDDEN - Operation not allowed at this time.","   * @property AEROSPIKE_QUERY_END - There are no more records left for query.","   * @property AEROSPIKE_SECURITY_NOT_SUPPORTED - Security functionality not supported by connected server.","   * @property AEROSPIKE_SECURITY_NOT_ENABLED - Security functionality not enabled by connected server.","   * @property AEROSPIKE_SECURITY_SCHEME_NOT_SUPPORTED - Security type not supported by connected server.","   * @property AEROSPIKE_INVALID_COMMAND - Administration command is invalid.","   * @property AEROSPIKE_INVALID_FIELD - Administration field is invalid.","   * @property AEROSPIKE_ILLEGAL_STATE - Security protocol not followed.","   * @property AEROSPIKE_INVALID_USER - User name is invalid.","   * @property AEROSPIKE_USER_ALREADY_EXISTS - User was previously created.","   * @property AEROSPIKE_INVALID_PASSWORD - Password is invalid.","   * @property AEROSPIKE_EXPIRED_PASSWORD - Password has expired.","   * @property AEROSPIKE_FORBIDDEN_PASSWORD - Forbidden password (e.g. recently used).","   * @property AEROSPIKE_INVALID_CREDENTIAL - Security credential is invalid.","   * @property AEROSPIKE_INVALID_ROLE - Role name is invalid.","   * @property AEROSPIKE_ROLE_ALREADY_EXISTS - Role name already exists.","   * @property AEROSPIKE_INVALID_PRIVILEGE - Privilege is invalid.","   * @property AEROSPIKE_NOT_AUTHENTICATED - User must be authenticated before performing database operations.","   * @property AEROSPIKE_ROLE_VIOLATION - User does not possess the required role to perform the database operation.","   * @property AEROSPIKE_ERR_UDF - Generic UDF error.","   * @property AEROSPIKE_ERR_LARGE_ITEM_NOT_FOUND - The requested item in a large collection was not found.","   * @property AEROSPIKE_ERR_BATCH_DISABLED - Batch functionality has been disabled.","   * @property AEROSPIKE_ERR_BATCH_MAX_REQUESTS_EXCEEDED - Batch max. requests have been exceeded.","   * @property AEROSPIKE_ERR_BATCH_QUEUES_FULL - All batch queues are full.","   * @property AEROSPIKE_ERR_GEO_INVALID_GEOJSON - Invalid/unsupported GeoJSON.","   * @property AEROSPIKE_ERR_INDEX_FOUND - Index found.","   * @property AEROSPIKE_ERR_INDEX_NOT_FOUND - Index not found.","   * @property AEROSPIKE_ERR_INDEX_OOM - Index is out of memory.","   * @property AEROSPIKE_ERR_INDEX_NOT_READABLE - Unable to read the index.","   * @property AEROSPIKE_ERR_INDEX - Generic secondary index error.","   * @property AEROSPIKE_ERR_INDEX_NAME_MAXLEN - Index name is too long.","   * @property AEROSPIKE_ERR_INDEX_MAXCOUNT - System alrady has maximum allowed indeces.","   * @property AEROSPIKE_ERR_QUERY_ABORTED - Query was aborted.","   * @property AEROSPIKE_ERR_QUERY_QUEUE_FULL - Query processing queue is full.","   * @property AEROSPIKE_ERR_QUERY_TIMEOUT - Secondary index query timed out on server.","   * @property AEROSPIKE_ERR_QUERY - Generic query error.","   * @property AEROSPIKE_ERR_UDF_NOT_FOUND - UDF does not exist.","   * @property AEROSPIKE_ERR_LUA_FILE_NOT_FOUND - LUA file does not exist.","   * @property AEROSPIKE_ERR_LDT_INTERNAL - Internal LDT error.","   * @property AEROSPIKE_ERR_LDT_NOT_FOUND - LDT item not found.","   * @property AEROSPIKE_ERR_LDT_UNIQUE_KEY - Unique key violation: Duplicated item inserted when 'unique key' was set.","   * @property AEROSPIKE_ERR_LDT_INSERT - General error during insert operation.","   * @property AEROSPIKE_ERR_LDT_SEARCH - General error during search operation.","   * @property AEROSPIKE_ERR_LDT_DELETE - General error during delete operation.","   * @property AEROSPIKE_ERR_LDT_INPUT_PARM - General input parameter error.","   * @property AEROSPIKE_ERR_LDT_TYPE_MISMATCH - LDT type mismatch for this bin.","   * @property AEROSPIKE_ERR_LDT_NULL_BIN_NAME - The supplied LDT bin name is null.","   * @property AEROSPIKE_ERR_LDT_BIN_NAME_NOT_STRING - The supplied LDT bin name must be a string.","   * @property AEROSPIKE_ERR_LDT_BIN_NAME_TOO_LONG - The supplied LDT bin name exceeded the 14 char limit.","   * @property AEROSPIKE_ERR_LDT_TOO_MANY_OPEN_SUBRECS - Internal Error: too many open records at one time.","   * @property AEROSPIKE_ERR_LDT_TOP_REC_NOT_FOUND - Internal Error: Top Record not found.","   * @property AEROSPIKE_ERR_LDT_SUB_REC_NOT_FOUND - Internal Error: Sub Record not found.","   * @property AEROSPIKE_ERR_LDT_BIN_DOES_NOT_EXIST - LDT Bin does not exist.","   * @property AEROSPIKE_ERR_LDT_BIN_ALREADY_EXISTS - Collision: LDT Bin already exists.","   * @property AEROSPIKE_ERR_LDT_BIN_DAMAGED - LDT control structures in the Top Record are damanged. Cannot proceed.","   * @property AEROSPIKE_ERR_LDT_SUBREC_POOL_DAMAGED - Internal Error: LDT Subrecord pool is damanged.","   * @property AEROSPIKE_ERR_LDT_SUBREC_DAMAGED - LDT control structure in the Sub Record are damaged. Cannot proceed.","   * @property AEROSPIKE_ERR_LDT_SUBREC_OPEN - Error encountered while opening a Sub Record.","   * @property AEROSPIKE_ERR_LDT_SUBREC_UPDATE - Error encountered while updating a Sub Record.","   * @property AEROSPIKE_ERR_LDT_SUBREC_CREATE - Error encountered while creating a Sub Record.","   * @property AEROSPIKE_ERR_LDT_SUBREC_DELETE - Error encountered while deleting a Sub Record.","   * @property AEROSPIKE_ERR_LDT_SUBREC_CLOSE - Error encountered while closing a Sub Record.","   * @property AEROSPIKE_ERR_LDT_TOPREC_UPDATE - Error encountered while updating a TOP Record.","   * @property AEROSPIKE_ERR_LDT_TOPREC_CREATE - Error encountered while creating a TOP Record.","   * @property AEROSPIKE_ERR_LDT_FILTER_FUNCTION_BAD - The filter function name was invalid.","   * @property AEROSPIKE_ERR_LDT_FILTER_FUNCTION_NOT_FOUND - The filter function was not found.","   * @property AEROSPIKE_ERR_LDT_KEY_FUNCTION_BAD - The function to extract the Unique Value from a complex object was invalid.","   * @property AEROSPIKE_ERR_LDT_KEY_FUNCTION_NOT_FOUND - The function to extract the Unique Value from a complex object was not found.","   * @property AEROSPIKE_ERR_LDT_TRANS_FUNCTION_BAD - The function to transform an object into a binary form was invalid.","   * @property AEROSPIKE_ERR_LDT_TRANS_FUNCTION_NOT_FOUND - The function to transform an object into a binary form was not found.","   * @property AEROSPIKE_ERR_LDT_UNTRANS_FUNCTION_BAD - The function to untransform an object from binary form to live form was invalid.","   * @property AEROSPIKE_ERR_LDT_UNTRANS_FUNCTION_NOT_FOUND - The function to untransform an object from binary form to live form was not found.","   * @property AEROSPIKE_ERR_LDT_USER_MODULE_BAD - The UDF user module name for LDT Overrides was invalid.","   * @property AEROSPIKE_ERR_LDT_USER_MODULE_NOT_FOUND - The UDF user module name for LDT Overrides was not found.","   *","   * @see {@link AerospikeError#code}","   */","  this.status = as.status","}","module.exports = new Aerospike()",""],"l":{"109":1,"111":1,"112":1,"113":1,"114":1,"115":1,"116":1,"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"125":1,"126":3,"136":1,"137":0,"148":1,"149":0,"150":0,"151":0,"153":0,"154":0,"155":0,"173":1,"174":0,"177":1,"179":1,"180":1,"181":1,"182":1,"183":1,"186":1,"187":1,"188":1,"189":1,"191":1,"194":1,"195":1,"196":1,"197":1,"198":1,"203":1,"204":1,"205":6,"207":1,"208":14,"209":14,"211":1,"224":1,"257":1,"371":1,"412":1,"418":1,"434":1,"451":1,"466":1,"491":1,"608":1,"610":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/aerospike_error.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/aerospike_error.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1,"14":0,"15":1,"16":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"AerospikeError","line":52,"loc":{"start":{"line":52,"column":0},"end":{"line":52,"column":65}}},"2":{"name":"(anonymous_2)","line":117,"loc":{"start":{"line":117,"column":29},"end":{"line":117,"column":44}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":28}},"2":{"start":{"line":52,"column":0},"end":{"line":115,"column":1}},"3":{"start":{"line":60,"column":2},"end":{"line":60,"column":64}},"4":{"start":{"line":69,"column":2},"end":{"line":69,"column":45}},"5":{"start":{"line":80,"column":2},"end":{"line":80,"column":18}},"6":{"start":{"line":89,"column":2},"end":{"line":89,"column":18}},"7":{"start":{"line":98,"column":2},"end":{"line":98,"column":18}},"8":{"start":{"line":107,"column":2},"end":{"line":107,"column":18}},"9":{"start":{"line":109,"column":2},"end":{"line":114,"column":3}},"10":{"start":{"line":110,"column":4},"end":{"line":110,"column":82}},"11":{"start":{"line":111,"column":4},"end":{"line":111,"column":56}},"12":{"start":{"line":113,"column":4},"end":{"line":113,"column":51}},"13":{"start":{"line":117,"column":0},"end":{"line":119,"column":1}},"14":{"start":{"line":118,"column":2},"end":{"line":118,"column":91}},"15":{"start":{"line":121,"column":0},"end":{"line":121,"column":36}},"16":{"start":{"line":123,"column":0},"end":{"line":123,"column":31}}},"branchMap":{"1":{"line":69,"type":"binary-expr","locations":[{"start":{"line":69,"column":17},"end":{"line":69,"column":24}},{"start":{"line":69,"column":28},"end":{"line":69,"column":45}}]},"2":{"line":109,"type":"if","locations":[{"start":{"line":109,"column":2},"end":{"line":109,"column":2}},{"start":{"line":109,"column":2},"end":{"line":109,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const util = require('util')","","/**"," * @class AerospikeError"," * @extends Error"," * @classdesc Error status returned by the server."," *"," * @summary Construct a new AerospikeError instance."," *"," * @param {number} code - The status code of the error."," * @param {string} [message] - A message describing the status code."," * @param {string} [func] - The name of the function in which the error occurred."," * @param {string} [file] - The file name in which the error occurred."," * @param {string} [line] - The line number on which the error occurred."," *"," * @see <code>Aerospike.status</code> contains the full list of possible status codes."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * var key = new Aerospike.Key('test', 'key', 'does_not_exist')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   client.get(key, (error, record) => {"," *     console.log(error) // => { [AerospikeError: AEROSPIKE_ERR_RECORD_NOT_FOUND]"," *                        //      code: 2,"," *                        //      message: 'AEROSPIKE_ERR_RECORD_NOT_FOUND',"," *                        //      func: 'as_event_command_parse_result',"," *                        //      file: 'src/main/aerospike/as_event.c',"," *                        //      line: 614,"," *                        //      name: 'AerospikeError' }"," *   })"," *   client.close()"," * })"," */","function AerospikeError (code, message, func, file, line, stack) {","  /**","   * Error name","   *","   * @name AerospikeError#name","   * @type {string}","   * @readonly","   */","  Object.defineProperty(this, 'name', {value: 'AerospikeError'})","","  /**","   * Error message","   *","   * @name AerospikeError#message","   * @type {string}","   * @readonly","   */","  this.message = message || 'Aerospike Error'","","  /**","   * Status code.","   *","   * @name AerospikeError#code","   * @type {number}","   * @readonly","   *","   * @see List of status codes defined at {@link module:aerospike.status}","   */","  this.code = code","","  /**","   * C/C++ function name where the error occurred.","   *","   * @name AerospikeError#func","   * @type {?string}","   * @readonly","   */","  this.func = func","","  /**","   * File name of the C/C++ source file in which the error occurred.","   *","   * @name AerospikeError#file","   * @type {?string}","   * @readonly","   */","  this.file = file","","  /**","   * Line number in the C/C++ source file in which the error occurred.","   *","   * @name AerospikeError#file","   * @type {?string}","   * @readonly","   */","  this.line = line","","  if (stack) {","    stack = stack.replace(/^.*$/m, util.format('%s: %s', this.name, this.message))","    Object.defineProperty(this, 'stack', {value: stack})","  } else {","    Error.captureStackTrace(this, this.constructor)","  }","}","","AerospikeError.fromASError = function (err) {","  return new AerospikeError(err.code, err.message, err.func, err.file, err.line, err.stack)","}","","util.inherits(AerospikeError, Error)","","module.exports = AerospikeError",""],"l":{"17":1,"52":1,"60":0,"69":0,"80":0,"89":0,"98":0,"107":0,"109":0,"110":0,"111":0,"113":0,"117":1,"118":0,"121":1,"123":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/client.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/client.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":1,"28":0,"29":0,"30":0,"31":1,"32":1,"33":0,"34":1,"35":0,"36":1,"37":0,"38":0,"39":0,"40":0,"41":1,"42":0,"43":0,"44":0,"45":0,"46":1,"47":0,"48":0,"49":0,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":1,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":1,"88":0,"89":0,"90":1,"91":0,"92":0,"93":1,"94":0,"95":0,"96":1,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":1,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":1,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":1,"122":0,"123":0,"124":0,"125":0,"126":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":1,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":1,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":1,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":1,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":1,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":1,"209":3,"210":0,"211":0,"212":0,"213":1,"214":1,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":1,"226":0,"227":0,"228":0,"229":0,"230":1,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":1,"239":0,"240":0,"241":0,"242":0,"243":1,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":1,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":1,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":1,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":1,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":1,"305":0,"306":0,"307":0,"308":0,"309":1,"310":0,"311":0,"312":0,"313":0,"314":1,"315":0,"316":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0],"53":[0,0],"54":[0,0],"55":[0,0],"56":[0,0],"57":[0,0],"58":[0,0],"59":[0,0],"60":[0,0],"61":[0,0],"62":[0,0],"63":[0,0],"64":[0,0],"65":[0,0],"66":[0,0],"67":[0,0],"68":[0,0],"69":[0,0],"70":[0,0],"71":[0,0],"72":[0,0],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":3,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0},"fnMap":{"1":{"name":"Client","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":25}}},"2":{"name":"(anonymous_2)","line":71,"loc":{"start":{"line":71,"column":32},"end":{"line":71,"column":75}}},"3":{"name":"(anonymous_3)","line":81,"loc":{"start":{"line":81,"column":31},"end":{"line":81,"column":74}}},"4":{"name":"(anonymous_4)","line":88,"loc":{"start":{"line":88,"column":28},"end":{"line":88,"column":55}}},"5":{"name":"(anonymous_5)","line":121,"loc":{"start":{"line":121,"column":29},"end":{"line":121,"column":75}}},"6":{"name":"(anonymous_6)","line":164,"loc":{"start":{"line":164,"column":31},"end":{"line":164,"column":65}}},"7":{"name":"(anonymous_7)","line":211,"loc":{"start":{"line":211,"column":28},"end":{"line":211,"column":62}}},"8":{"name":"(anonymous_8)","line":260,"loc":{"start":{"line":260,"column":29},"end":{"line":260,"column":66}}},"9":{"name":"(anonymous_9)","line":309,"loc":{"start":{"line":309,"column":31},"end":{"line":309,"column":71}}},"10":{"name":"(anonymous_10)","line":335,"loc":{"start":{"line":335,"column":25},"end":{"line":335,"column":53}}},"11":{"name":"(anonymous_11)","line":390,"loc":{"start":{"line":390,"column":27},"end":{"line":390,"column":47}}},"12":{"name":"connectCb","line":393,"loc":{"start":{"line":393,"column":25},"end":{"line":393,"column":50}}},"13":{"name":"(anonymous_13)","line":499,"loc":{"start":{"line":499,"column":31},"end":{"line":499,"column":68}}},"14":{"name":"(anonymous_14)","line":516,"loc":{"start":{"line":516,"column":40},"end":{"line":516,"column":55}}},"15":{"name":"(anonymous_15)","line":566,"loc":{"start":{"line":566,"column":38},"end":{"line":566,"column":75}}},"16":{"name":"(anonymous_16)","line":615,"loc":{"start":{"line":615,"column":37},"end":{"line":615,"column":74}}},"17":{"name":"(anonymous_17)","line":664,"loc":{"start":{"line":664,"column":42},"end":{"line":664,"column":79}}},"18":{"name":"(anonymous_18)","line":700,"loc":{"start":{"line":700,"column":25},"end":{"line":700,"column":67}}},"19":{"name":"(anonymous_19)","line":707,"loc":{"start":{"line":707,"column":57},"end":{"line":707,"column":80}}},"20":{"name":"exists","line":751,"loc":{"start":{"line":751,"column":26},"end":{"line":751,"column":66}}},"21":{"name":"(anonymous_21)","line":758,"loc":{"start":{"line":758,"column":49},"end":{"line":758,"column":74}}},"22":{"name":"(anonymous_22)","line":784,"loc":{"start":{"line":784,"column":23},"end":{"line":784,"column":56}}},"23":{"name":"(anonymous_23)","line":791,"loc":{"start":{"line":791,"column":46},"end":{"line":791,"column":79}}},"24":{"name":"(anonymous_24)","line":815,"loc":{"start":{"line":815,"column":35},"end":{"line":815,"column":87}}},"25":{"name":"(anonymous_25)","line":844,"loc":{"start":{"line":844,"column":31},"end":{"line":844,"column":77}}},"26":{"name":"(anonymous_26)","line":915,"loc":{"start":{"line":915,"column":24},"end":{"line":915,"column":73}}},"27":{"name":"asInfoCb","line":950,"loc":{"start":{"line":950,"column":47},"end":{"line":950,"column":81}}},"28":{"name":"asInfoCb","line":955,"loc":{"start":{"line":955,"column":48},"end":{"line":955,"column":88}}},"29":{"name":"(anonymous_29)","line":987,"loc":{"start":{"line":987,"column":27},"end":{"line":987,"column":64}}},"30":{"name":"(anonymous_30)","line":1028,"loc":{"start":{"line":1028,"column":27},"end":{"line":1028,"column":64}}},"31":{"name":"infoAllCb","line":1045,"loc":{"start":{"line":1045,"column":46},"end":{"line":1045,"column":87}}},"32":{"name":"(anonymous_32)","line":1048,"loc":{"start":{"line":1048,"column":5},"end":{"line":1048,"column":17}}},"33":{"name":"(anonymous_33)","line":1066,"loc":{"start":{"line":1066,"column":31},"end":{"line":1066,"column":60}}},"34":{"name":"(anonymous_34)","line":1111,"loc":{"start":{"line":1111,"column":27},"end":{"line":1111,"column":82}}},"35":{"name":"(anonymous_35)","line":1121,"loc":{"start":{"line":1121,"column":72},"end":{"line":1121,"column":105}}},"36":{"name":"(anonymous_36)","line":1182,"loc":{"start":{"line":1182,"column":39},"end":{"line":1182,"column":53}}},"37":{"name":"(anonymous_37)","line":1183,"loc":{"start":{"line":1183,"column":25},"end":{"line":1183,"column":74}}},"38":{"name":"(anonymous_38)","line":1184,"loc":{"start":{"line":1184,"column":36},"end":{"line":1184,"column":51}}},"39":{"name":"(anonymous_39)","line":1244,"loc":{"start":{"line":1244,"column":23},"end":{"line":1244,"column":74}}},"40":{"name":"(anonymous_40)","line":1254,"loc":{"start":{"line":1254,"column":64},"end":{"line":1254,"column":79}}},"41":{"name":"(anonymous_41)","line":1281,"loc":{"start":{"line":1281,"column":25},"end":{"line":1281,"column":53}}},"42":{"name":"(anonymous_42)","line":1310,"loc":{"start":{"line":1310,"column":26},"end":{"line":1310,"column":59}}},"43":{"name":"(anonymous_43)","line":1317,"loc":{"start":{"line":1317,"column":49},"end":{"line":1317,"column":64}}},"44":{"name":"(anonymous_44)","line":1337,"loc":{"start":{"line":1337,"column":24},"end":{"line":1337,"column":52}}},"45":{"name":"(anonymous_45)","line":1367,"loc":{"start":{"line":1367,"column":26},"end":{"line":1367,"column":65}}},"46":{"name":"(anonymous_46)","line":1374,"loc":{"start":{"line":1374,"column":55},"end":{"line":1374,"column":88}}},"47":{"name":"(anonymous_47)","line":1380,"loc":{"start":{"line":1380,"column":31},"end":{"line":1380,"column":62}}},"48":{"name":"(anonymous_48)","line":1400,"loc":{"start":{"line":1400,"column":12},"end":{"line":1400,"column":45}}},"49":{"name":"(anonymous_49)","line":1417,"loc":{"start":{"line":1417,"column":29},"end":{"line":1417,"column":56}}},"50":{"name":"(anonymous_50)","line":1425,"loc":{"start":{"line":1425,"column":19},"end":{"line":1425,"column":31}}},"51":{"name":"(anonymous_51)","line":1449,"loc":{"start":{"line":1449,"column":28},"end":{"line":1449,"column":78}}},"52":{"name":"(anonymous_52)","line":1489,"loc":{"start":{"line":1489,"column":31},"end":{"line":1489,"column":74}}},"53":{"name":"(anonymous_53)","line":1547,"loc":{"start":{"line":1547,"column":35},"end":{"line":1547,"column":88}}},"54":{"name":"(anonymous_54)","line":1574,"loc":{"start":{"line":1574,"column":29},"end":{"line":1574,"column":68}}},"55":{"name":"(anonymous_55)","line":1582,"loc":{"start":{"line":1582,"column":33},"end":{"line":1582,"column":54}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":51}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":34}},"4":{"start":{"line":20,"column":0},"end":{"line":20,"column":39}},"5":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"6":{"start":{"line":22,"column":0},"end":{"line":22,"column":32}},"7":{"start":{"line":23,"column":0},"end":{"line":23,"column":30}},"8":{"start":{"line":24,"column":0},"end":{"line":24,"column":43}},"9":{"start":{"line":25,"column":0},"end":{"line":25,"column":42}},"10":{"start":{"line":26,"column":0},"end":{"line":26,"column":32}},"11":{"start":{"line":29,"column":0},"end":{"line":29,"column":25}},"12":{"start":{"line":39,"column":0},"end":{"line":64,"column":1}},"13":{"start":{"line":40,"column":2},"end":{"line":42,"column":3}},"14":{"start":{"line":41,"column":4},"end":{"line":41,"column":147}},"15":{"start":{"line":51,"column":2},"end":{"line":51,"column":34}},"16":{"start":{"line":54,"column":2},"end":{"line":54,"column":41}},"17":{"start":{"line":57,"column":2},"end":{"line":57,"column":47}},"18":{"start":{"line":60,"column":2},"end":{"line":60,"column":24}},"19":{"start":{"line":63,"column":2},"end":{"line":63,"column":69}},"20":{"start":{"line":71,"column":0},"end":{"line":79,"column":1}},"21":{"start":{"line":72,"column":2},"end":{"line":72,"column":23}},"22":{"start":{"line":72,"column":17},"end":{"line":72,"column":23}},"23":{"start":{"line":73,"column":2},"end":{"line":78,"column":3}},"24":{"start":{"line":74,"column":4},"end":{"line":74,"column":87}},"25":{"start":{"line":75,"column":4},"end":{"line":75,"column":26}},"26":{"start":{"line":77,"column":4},"end":{"line":77,"column":43}},"27":{"start":{"line":81,"column":0},"end":{"line":84,"column":1}},"28":{"start":{"line":82,"column":2},"end":{"line":82,"column":23}},"29":{"start":{"line":82,"column":17},"end":{"line":82,"column":23}},"30":{"start":{"line":83,"column":2},"end":{"line":83,"column":33}},"31":{"start":{"line":86,"column":0},"end":{"line":86,"column":54}},"32":{"start":{"line":88,"column":0},"end":{"line":90,"column":1}},"33":{"start":{"line":89,"column":2},"end":{"line":89,"column":40}},"34":{"start":{"line":121,"column":0},"end":{"line":123,"column":1}},"35":{"start":{"line":122,"column":2},"end":{"line":122,"column":64}},"36":{"start":{"line":164,"column":0},"end":{"line":170,"column":1}},"37":{"start":{"line":165,"column":2},"end":{"line":168,"column":3}},"38":{"start":{"line":166,"column":4},"end":{"line":166,"column":21}},"39":{"start":{"line":167,"column":4},"end":{"line":167,"column":17}},"40":{"start":{"line":169,"column":2},"end":{"line":169,"column":59}},"41":{"start":{"line":211,"column":0},"end":{"line":217,"column":1}},"42":{"start":{"line":212,"column":2},"end":{"line":215,"column":3}},"43":{"start":{"line":213,"column":4},"end":{"line":213,"column":21}},"44":{"start":{"line":214,"column":4},"end":{"line":214,"column":17}},"45":{"start":{"line":216,"column":2},"end":{"line":216,"column":56}},"46":{"start":{"line":260,"column":0},"end":{"line":266,"column":1}},"47":{"start":{"line":261,"column":2},"end":{"line":264,"column":3}},"48":{"start":{"line":262,"column":4},"end":{"line":262,"column":21}},"49":{"start":{"line":263,"column":4},"end":{"line":263,"column":17}},"50":{"start":{"line":265,"column":2},"end":{"line":265,"column":60}},"51":{"start":{"line":309,"column":0},"end":{"line":315,"column":1}},"52":{"start":{"line":310,"column":2},"end":{"line":313,"column":3}},"53":{"start":{"line":311,"column":4},"end":{"line":311,"column":21}},"54":{"start":{"line":312,"column":4},"end":{"line":312,"column":17}},"55":{"start":{"line":314,"column":2},"end":{"line":314,"column":65}},"56":{"start":{"line":335,"column":0},"end":{"line":346,"column":1}},"57":{"start":{"line":336,"column":2},"end":{"line":338,"column":3}},"58":{"start":{"line":337,"column":4},"end":{"line":337,"column":27}},"59":{"start":{"line":339,"column":2},"end":{"line":339,"column":38}},"60":{"start":{"line":339,"column":32},"end":{"line":339,"column":38}},"61":{"start":{"line":340,"column":2},"end":{"line":340,"column":24}},"62":{"start":{"line":341,"column":2},"end":{"line":341,"column":24}},"63":{"start":{"line":342,"column":2},"end":{"line":342,"column":24}},"64":{"start":{"line":343,"column":2},"end":{"line":345,"column":3}},"65":{"start":{"line":344,"column":4},"end":{"line":344,"column":34}},"66":{"start":{"line":390,"column":0},"end":{"line":403,"column":1}},"67":{"start":{"line":391,"column":2},"end":{"line":391,"column":17}},"68":{"start":{"line":392,"column":2},"end":{"line":392,"column":35}},"69":{"start":{"line":393,"column":2},"end":{"line":401,"column":4}},"70":{"start":{"line":394,"column":4},"end":{"line":394,"column":66}},"71":{"start":{"line":395,"column":4},"end":{"line":399,"column":5}},"72":{"start":{"line":396,"column":6},"end":{"line":396,"column":28}},"73":{"start":{"line":398,"column":6},"end":{"line":398,"column":28}},"74":{"start":{"line":400,"column":4},"end":{"line":400,"column":45}},"75":{"start":{"line":402,"column":2},"end":{"line":402,"column":13}},"76":{"start":{"line":499,"column":0},"end":{"line":520,"column":1}},"77":{"start":{"line":500,"column":2},"end":{"line":505,"column":3}},"78":{"start":{"line":501,"column":4},"end":{"line":501,"column":21}},"79":{"start":{"line":502,"column":4},"end":{"line":502,"column":17}},"80":{"start":{"line":503,"column":9},"end":{"line":505,"column":3}},"81":{"start":{"line":504,"column":4},"end":{"line":504,"column":65}},"82":{"start":{"line":506,"column":2},"end":{"line":514,"column":3}},"83":{"start":{"line":515,"column":2},"end":{"line":515,"column":17}},"84":{"start":{"line":516,"column":2},"end":{"line":519,"column":4}},"85":{"start":{"line":517,"column":4},"end":{"line":517,"column":59}},"86":{"start":{"line":518,"column":4},"end":{"line":518,"column":22}},"87":{"start":{"line":566,"column":0},"end":{"line":569,"column":1}},"88":{"start":{"line":567,"column":2},"end":{"line":567,"column":41}},"89":{"start":{"line":568,"column":2},"end":{"line":568,"column":45}},"90":{"start":{"line":615,"column":0},"end":{"line":618,"column":1}},"91":{"start":{"line":616,"column":2},"end":{"line":616,"column":40}},"92":{"start":{"line":617,"column":2},"end":{"line":617,"column":45}},"93":{"start":{"line":664,"column":0},"end":{"line":667,"column":1}},"94":{"start":{"line":665,"column":2},"end":{"line":665,"column":45}},"95":{"start":{"line":666,"column":2},"end":{"line":666,"column":45}},"96":{"start":{"line":700,"column":0},"end":{"line":710,"column":1}},"97":{"start":{"line":701,"column":2},"end":{"line":706,"column":3}},"98":{"start":{"line":702,"column":4},"end":{"line":702,"column":21}},"99":{"start":{"line":703,"column":4},"end":{"line":703,"column":17}},"100":{"start":{"line":704,"column":9},"end":{"line":706,"column":3}},"101":{"start":{"line":705,"column":4},"end":{"line":705,"column":65}},"102":{"start":{"line":707,"column":2},"end":{"line":709,"column":4}},"103":{"start":{"line":708,"column":4},"end":{"line":708,"column":30}},"104":{"start":{"line":727,"column":0},"end":{"line":727,"column":49}},"105":{"start":{"line":751,"column":0},"end":{"line":761,"column":1}},"106":{"start":{"line":752,"column":2},"end":{"line":757,"column":3}},"107":{"start":{"line":753,"column":4},"end":{"line":753,"column":21}},"108":{"start":{"line":754,"column":4},"end":{"line":754,"column":17}},"109":{"start":{"line":755,"column":9},"end":{"line":757,"column":3}},"110":{"start":{"line":756,"column":4},"end":{"line":756,"column":65}},"111":{"start":{"line":758,"column":2},"end":{"line":760,"column":4}},"112":{"start":{"line":759,"column":4},"end":{"line":759,"column":32}},"113":{"start":{"line":784,"column":0},"end":{"line":794,"column":1}},"114":{"start":{"line":785,"column":2},"end":{"line":790,"column":3}},"115":{"start":{"line":786,"column":4},"end":{"line":786,"column":21}},"116":{"start":{"line":787,"column":4},"end":{"line":787,"column":17}},"117":{"start":{"line":788,"column":9},"end":{"line":790,"column":3}},"118":{"start":{"line":789,"column":4},"end":{"line":789,"column":65}},"119":{"start":{"line":791,"column":2},"end":{"line":793,"column":4}},"120":{"start":{"line":792,"column":4},"end":{"line":792,"column":40}},"121":{"start":{"line":815,"column":0},"end":{"line":822,"column":1}},"122":{"start":{"line":816,"column":2},"end":{"line":819,"column":3}},"123":{"start":{"line":817,"column":4},"end":{"line":817,"column":46}},"124":{"start":{"line":818,"column":4},"end":{"line":818,"column":10}},"125":{"start":{"line":820,"column":2},"end":{"line":820,"column":48}},"126":{"start":{"line":821,"column":2},"end":{"line":821,"column":43}},"127":{"start":{"line":844,"column":0},"end":{"line":850,"column":1}},"128":{"start":{"line":845,"column":2},"end":{"line":848,"column":3}},"129":{"start":{"line":846,"column":4},"end":{"line":846,"column":21}},"130":{"start":{"line":847,"column":4},"end":{"line":847,"column":17}},"131":{"start":{"line":849,"column":2},"end":{"line":849,"column":71}},"132":{"start":{"line":915,"column":0},"end":{"line":959,"column":1}},"133":{"start":{"line":916,"column":2},"end":{"line":916,"column":85}},"134":{"start":{"line":917,"column":2},"end":{"line":917,"column":29}},"135":{"start":{"line":918,"column":2},"end":{"line":923,"column":3}},"136":{"start":{"line":919,"column":4},"end":{"line":919,"column":23}},"137":{"start":{"line":920,"column":4},"end":{"line":920,"column":23}},"138":{"start":{"line":921,"column":9},"end":{"line":923,"column":3}},"139":{"start":{"line":922,"column":4},"end":{"line":922,"column":23}},"140":{"start":{"line":925,"column":2},"end":{"line":927,"column":3}},"141":{"start":{"line":926,"column":4},"end":{"line":926,"column":18}},"142":{"start":{"line":929,"column":2},"end":{"line":936,"column":3}},"143":{"start":{"line":930,"column":4},"end":{"line":930,"column":15}},"144":{"start":{"line":931,"column":9},"end":{"line":936,"column":3}},"145":{"start":{"line":932,"column":4},"end":{"line":932,"column":17}},"146":{"start":{"line":933,"column":4},"end":{"line":933,"column":15}},"147":{"start":{"line":934,"column":9},"end":{"line":936,"column":3}},"148":{"start":{"line":935,"column":4},"end":{"line":935,"column":38}},"149":{"start":{"line":938,"column":2},"end":{"line":940,"column":3}},"150":{"start":{"line":939,"column":4},"end":{"line":939,"column":17}},"151":{"start":{"line":942,"column":2},"end":{"line":946,"column":3}},"152":{"start":{"line":943,"column":4},"end":{"line":943,"column":44}},"153":{"start":{"line":944,"column":4},"end":{"line":944,"column":40}},"154":{"start":{"line":944,"column":16},"end":{"line":944,"column":40}},"155":{"start":{"line":945,"column":4},"end":{"line":945,"column":10}},"156":{"start":{"line":948,"column":2},"end":{"line":948,"column":17}},"157":{"start":{"line":949,"column":2},"end":{"line":958,"column":3}},"158":{"start":{"line":950,"column":4},"end":{"line":953,"column":6}},"159":{"start":{"line":951,"column":6},"end":{"line":951,"column":55}},"160":{"start":{"line":952,"column":6},"end":{"line":952,"column":14}},"161":{"start":{"line":955,"column":4},"end":{"line":957,"column":14}},"162":{"start":{"line":956,"column":6},"end":{"line":956,"column":55}},"163":{"start":{"line":987,"column":0},"end":{"line":997,"column":1}},"164":{"start":{"line":988,"column":2},"end":{"line":995,"column":3}},"165":{"start":{"line":989,"column":4},"end":{"line":989,"column":22}},"166":{"start":{"line":990,"column":4},"end":{"line":990,"column":18}},"167":{"start":{"line":991,"column":4},"end":{"line":991,"column":17}},"168":{"start":{"line":992,"column":9},"end":{"line":995,"column":3}},"169":{"start":{"line":993,"column":4},"end":{"line":993,"column":21}},"170":{"start":{"line":994,"column":4},"end":{"line":994,"column":17}},"171":{"start":{"line":996,"column":2},"end":{"line":996,"column":61}},"172":{"start":{"line":1028,"column":0},"end":{"line":1051,"column":1}},"173":{"start":{"line":1029,"column":2},"end":{"line":1036,"column":3}},"174":{"start":{"line":1030,"column":4},"end":{"line":1030,"column":22}},"175":{"start":{"line":1031,"column":4},"end":{"line":1031,"column":18}},"176":{"start":{"line":1032,"column":4},"end":{"line":1032,"column":17}},"177":{"start":{"line":1033,"column":9},"end":{"line":1036,"column":3}},"178":{"start":{"line":1034,"column":4},"end":{"line":1034,"column":21}},"179":{"start":{"line":1035,"column":4},"end":{"line":1035,"column":17}},"180":{"start":{"line":1037,"column":2},"end":{"line":1040,"column":3}},"181":{"start":{"line":1038,"column":4},"end":{"line":1038,"column":46}},"182":{"start":{"line":1039,"column":4},"end":{"line":1039,"column":10}},"183":{"start":{"line":1042,"column":2},"end":{"line":1042,"column":18}},"184":{"start":{"line":1043,"column":2},"end":{"line":1043,"column":15}},"185":{"start":{"line":1044,"column":2},"end":{"line":1044,"column":17}},"186":{"start":{"line":1045,"column":2},"end":{"line":1050,"column":4}},"187":{"start":{"line":1046,"column":4},"end":{"line":1046,"column":24}},"188":{"start":{"line":1047,"column":4},"end":{"line":1047,"column":55}},"189":{"start":{"line":1049,"column":4},"end":{"line":1049,"column":47}},"190":{"start":{"line":1066,"column":0},"end":{"line":1075,"column":1}},"191":{"start":{"line":1067,"column":2},"end":{"line":1069,"column":3}},"192":{"start":{"line":1068,"column":4},"end":{"line":1068,"column":28}},"193":{"start":{"line":1070,"column":2},"end":{"line":1070,"column":32}},"194":{"start":{"line":1071,"column":2},"end":{"line":1073,"column":3}},"195":{"start":{"line":1072,"column":4},"end":{"line":1072,"column":44}},"196":{"start":{"line":1074,"column":2},"end":{"line":1074,"column":18}},"197":{"start":{"line":1111,"column":0},"end":{"line":1182,"column":1}},"198":{"start":{"line":1112,"column":2},"end":{"line":1120,"column":3}},"199":{"start":{"line":1113,"column":4},"end":{"line":1113,"column":21}},"200":{"start":{"line":1114,"column":4},"end":{"line":1114,"column":17}},"201":{"start":{"line":1115,"column":9},"end":{"line":1120,"column":3}},"202":{"start":{"line":1116,"column":4},"end":{"line":1116,"column":23}},"203":{"start":{"line":1117,"column":4},"end":{"line":1117,"column":19}},"204":{"start":{"line":1118,"column":9},"end":{"line":1120,"column":3}},"205":{"start":{"line":1119,"column":4},"end":{"line":1119,"column":65}},"206":{"start":{"line":1121,"column":2},"end":{"line":1123,"column":4}},"207":{"start":{"line":1122,"column":4},"end":{"line":1122,"column":40}},"208":{"start":{"line":1182,"column":1},"end":{"line":1189,"column":2}},"209":{"start":{"line":1183,"column":2},"end":{"line":1188,"column":3}},"210":{"start":{"line":1184,"column":4},"end":{"line":1186,"column":6}},"211":{"start":{"line":1185,"column":6},"end":{"line":1185,"column":43}},"212":{"start":{"line":1187,"column":4},"end":{"line":1187,"column":54}},"213":{"start":{"line":1204,"column":0},"end":{"line":1204,"column":44}},"214":{"start":{"line":1244,"column":0},"end":{"line":1257,"column":1}},"215":{"start":{"line":1245,"column":2},"end":{"line":1253,"column":3}},"216":{"start":{"line":1246,"column":4},"end":{"line":1246,"column":23}},"217":{"start":{"line":1247,"column":4},"end":{"line":1247,"column":19}},"218":{"start":{"line":1248,"column":9},"end":{"line":1253,"column":3}},"219":{"start":{"line":1249,"column":4},"end":{"line":1249,"column":21}},"220":{"start":{"line":1250,"column":4},"end":{"line":1250,"column":17}},"221":{"start":{"line":1251,"column":9},"end":{"line":1253,"column":3}},"222":{"start":{"line":1252,"column":4},"end":{"line":1252,"column":65}},"223":{"start":{"line":1254,"column":2},"end":{"line":1256,"column":4}},"224":{"start":{"line":1255,"column":4},"end":{"line":1255,"column":22}},"225":{"start":{"line":1281,"column":0},"end":{"line":1287,"column":1}},"226":{"start":{"line":1282,"column":2},"end":{"line":1282,"column":25}},"227":{"start":{"line":1283,"column":2},"end":{"line":1285,"column":3}},"228":{"start":{"line":1284,"column":4},"end":{"line":1284,"column":46}},"229":{"start":{"line":1286,"column":2},"end":{"line":1286,"column":42}},"230":{"start":{"line":1310,"column":0},"end":{"line":1320,"column":1}},"231":{"start":{"line":1311,"column":2},"end":{"line":1316,"column":3}},"232":{"start":{"line":1312,"column":4},"end":{"line":1312,"column":21}},"233":{"start":{"line":1313,"column":4},"end":{"line":1313,"column":17}},"234":{"start":{"line":1314,"column":9},"end":{"line":1316,"column":3}},"235":{"start":{"line":1315,"column":4},"end":{"line":1315,"column":65}},"236":{"start":{"line":1317,"column":2},"end":{"line":1319,"column":4}},"237":{"start":{"line":1318,"column":4},"end":{"line":1318,"column":22}},"238":{"start":{"line":1337,"column":0},"end":{"line":1343,"column":1}},"239":{"start":{"line":1338,"column":2},"end":{"line":1338,"column":25}},"240":{"start":{"line":1339,"column":2},"end":{"line":1341,"column":3}},"241":{"start":{"line":1340,"column":4},"end":{"line":1340,"column":46}},"242":{"start":{"line":1342,"column":2},"end":{"line":1342,"column":41}},"243":{"start":{"line":1367,"column":0},"end":{"line":1377,"column":1}},"244":{"start":{"line":1368,"column":2},"end":{"line":1373,"column":3}},"245":{"start":{"line":1369,"column":4},"end":{"line":1369,"column":21}},"246":{"start":{"line":1370,"column":4},"end":{"line":1370,"column":17}},"247":{"start":{"line":1371,"column":9},"end":{"line":1373,"column":3}},"248":{"start":{"line":1372,"column":4},"end":{"line":1372,"column":65}},"249":{"start":{"line":1374,"column":2},"end":{"line":1376,"column":4}},"250":{"start":{"line":1375,"column":4},"end":{"line":1375,"column":40}},"251":{"start":{"line":1380,"column":0},"end":{"line":1414,"column":1}},"252":{"start":{"line":1381,"column":2},"end":{"line":1383,"column":3}},"253":{"start":{"line":1382,"column":4},"end":{"line":1382,"column":65}},"254":{"start":{"line":1384,"column":2},"end":{"line":1387,"column":3}},"255":{"start":{"line":1385,"column":4},"end":{"line":1385,"column":46}},"256":{"start":{"line":1386,"column":4},"end":{"line":1386,"column":10}},"257":{"start":{"line":1392,"column":2},"end":{"line":1392,"column":17}},"258":{"start":{"line":1394,"column":2},"end":{"line":1394,"column":26}},"259":{"start":{"line":1395,"column":2},"end":{"line":1397,"column":3}},"260":{"start":{"line":1396,"column":4},"end":{"line":1396,"column":46}},"261":{"start":{"line":1399,"column":2},"end":{"line":1399,"column":17}},"262":{"start":{"line":1400,"column":2},"end":{"line":1410,"column":4}},"263":{"start":{"line":1401,"column":4},"end":{"line":1403,"column":5}},"264":{"start":{"line":1402,"column":6},"end":{"line":1402,"column":31}},"265":{"start":{"line":1404,"column":4},"end":{"line":1409,"column":5}},"266":{"start":{"line":1406,"column":6},"end":{"line":1406,"column":73}},"267":{"start":{"line":1408,"column":6},"end":{"line":1408,"column":66}},"268":{"start":{"line":1412,"column":2},"end":{"line":1412,"column":49}},"269":{"start":{"line":1413,"column":2},"end":{"line":1413,"column":14}},"270":{"start":{"line":1417,"column":0},"end":{"line":1428,"column":1}},"271":{"start":{"line":1418,"column":2},"end":{"line":1420,"column":3}},"272":{"start":{"line":1419,"column":4},"end":{"line":1419,"column":30}},"273":{"start":{"line":1421,"column":2},"end":{"line":1421,"column":59}},"274":{"start":{"line":1422,"column":2},"end":{"line":1422,"column":49}},"275":{"start":{"line":1423,"column":2},"end":{"line":1423,"column":32}},"276":{"start":{"line":1424,"column":2},"end":{"line":1424,"column":17}},"277":{"start":{"line":1425,"column":2},"end":{"line":1427,"column":4}},"278":{"start":{"line":1426,"column":4},"end":{"line":1426,"column":41}},"279":{"start":{"line":1449,"column":0},"end":{"line":1464,"column":1}},"280":{"start":{"line":1450,"column":2},"end":{"line":1462,"column":3}},"281":{"start":{"line":1451,"column":4},"end":{"line":1451,"column":18}},"282":{"start":{"line":1452,"column":4},"end":{"line":1452,"column":14}},"283":{"start":{"line":1453,"column":4},"end":{"line":1453,"column":19}},"284":{"start":{"line":1454,"column":4},"end":{"line":1454,"column":17}},"285":{"start":{"line":1455,"column":9},"end":{"line":1462,"column":3}},"286":{"start":{"line":1456,"column":4},"end":{"line":1456,"column":26}},"287":{"start":{"line":1457,"column":4},"end":{"line":1457,"column":19}},"288":{"start":{"line":1458,"column":4},"end":{"line":1458,"column":17}},"289":{"start":{"line":1459,"column":9},"end":{"line":1462,"column":3}},"290":{"start":{"line":1460,"column":4},"end":{"line":1460,"column":21}},"291":{"start":{"line":1461,"column":4},"end":{"line":1461,"column":17}},"292":{"start":{"line":1463,"column":2},"end":{"line":1463,"column":72}},"293":{"start":{"line":1489,"column":0},"end":{"line":1502,"column":1}},"294":{"start":{"line":1490,"column":2},"end":{"line":1496,"column":3}},"295":{"start":{"line":1491,"column":4},"end":{"line":1491,"column":22}},"296":{"start":{"line":1492,"column":4},"end":{"line":1492,"column":18}},"297":{"start":{"line":1493,"column":9},"end":{"line":1496,"column":3}},"298":{"start":{"line":1494,"column":4},"end":{"line":1494,"column":21}},"299":{"start":{"line":1495,"column":4},"end":{"line":1495,"column":17}},"300":{"start":{"line":1497,"column":2},"end":{"line":1500,"column":3}},"301":{"start":{"line":1498,"column":4},"end":{"line":1498,"column":20}},"302":{"start":{"line":1499,"column":4},"end":{"line":1499,"column":18}},"303":{"start":{"line":1501,"column":2},"end":{"line":1501,"column":68}},"304":{"start":{"line":1547,"column":0},"end":{"line":1553,"column":1}},"305":{"start":{"line":1548,"column":2},"end":{"line":1551,"column":3}},"306":{"start":{"line":1549,"column":4},"end":{"line":1549,"column":21}},"307":{"start":{"line":1550,"column":4},"end":{"line":1550,"column":17}},"308":{"start":{"line":1552,"column":2},"end":{"line":1552,"column":82}},"309":{"start":{"line":1574,"column":0},"end":{"line":1580,"column":1}},"310":{"start":{"line":1575,"column":2},"end":{"line":1578,"column":3}},"311":{"start":{"line":1576,"column":4},"end":{"line":1576,"column":21}},"312":{"start":{"line":1577,"column":4},"end":{"line":1577,"column":17}},"313":{"start":{"line":1579,"column":2},"end":{"line":1579,"column":62}},"314":{"start":{"line":1582,"column":0},"end":{"line":1584,"column":1}},"315":{"start":{"line":1583,"column":2},"end":{"line":1583,"column":41}},"316":{"start":{"line":1839,"column":0},"end":{"line":1839,"column":23}}},"branchMap":{"1":{"line":40,"type":"if","locations":[{"start":{"line":40,"column":2},"end":{"line":40,"column":2}},{"start":{"line":40,"column":2},"end":{"line":40,"column":2}}]},"2":{"line":72,"type":"if","locations":[{"start":{"line":72,"column":2},"end":{"line":72,"column":2}},{"start":{"line":72,"column":2},"end":{"line":72,"column":2}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"4":{"line":73,"type":"binary-expr","locations":[{"start":{"line":73,"column":6},"end":{"line":73,"column":9}},{"start":{"line":73,"column":13},"end":{"line":73,"column":48}}]},"5":{"line":74,"type":"cond-expr","locations":[{"start":{"line":74,"column":50},"end":{"line":74,"column":53}},{"start":{"line":74,"column":56},"end":{"line":74,"column":87}}]},"6":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":2},"end":{"line":82,"column":2}},{"start":{"line":82,"column":2},"end":{"line":82,"column":2}}]},"7":{"line":165,"type":"if","locations":[{"start":{"line":165,"column":2},"end":{"line":165,"column":2}},{"start":{"line":165,"column":2},"end":{"line":165,"column":2}}]},"8":{"line":212,"type":"if","locations":[{"start":{"line":212,"column":2},"end":{"line":212,"column":2}},{"start":{"line":212,"column":2},"end":{"line":212,"column":2}}]},"9":{"line":261,"type":"if","locations":[{"start":{"line":261,"column":2},"end":{"line":261,"column":2}},{"start":{"line":261,"column":2},"end":{"line":261,"column":2}}]},"10":{"line":310,"type":"if","locations":[{"start":{"line":310,"column":2},"end":{"line":310,"column":2}},{"start":{"line":310,"column":2},"end":{"line":310,"column":2}}]},"11":{"line":336,"type":"if","locations":[{"start":{"line":336,"column":2},"end":{"line":336,"column":2}},{"start":{"line":336,"column":2},"end":{"line":336,"column":2}}]},"12":{"line":339,"type":"if","locations":[{"start":{"line":339,"column":2},"end":{"line":339,"column":2}},{"start":{"line":339,"column":2},"end":{"line":339,"column":2}}]},"13":{"line":343,"type":"if","locations":[{"start":{"line":343,"column":2},"end":{"line":343,"column":2}},{"start":{"line":343,"column":2},"end":{"line":343,"column":2}}]},"14":{"line":343,"type":"binary-expr","locations":[{"start":{"line":343,"column":6},"end":{"line":343,"column":22}},{"start":{"line":343,"column":26},"end":{"line":343,"column":49}}]},"15":{"line":394,"type":"binary-expr","locations":[{"start":{"line":394,"column":22},"end":{"line":394,"column":26}},{"start":{"line":394,"column":30},"end":{"line":394,"column":65}}]},"16":{"line":395,"type":"if","locations":[{"start":{"line":395,"column":4},"end":{"line":395,"column":4}},{"start":{"line":395,"column":4},"end":{"line":395,"column":4}}]},"17":{"line":500,"type":"if","locations":[{"start":{"line":500,"column":2},"end":{"line":500,"column":2}},{"start":{"line":500,"column":2},"end":{"line":500,"column":2}}]},"18":{"line":503,"type":"if","locations":[{"start":{"line":503,"column":9},"end":{"line":503,"column":9}},{"start":{"line":503,"column":9},"end":{"line":503,"column":9}}]},"19":{"line":511,"type":"binary-expr","locations":[{"start":{"line":511,"column":4},"end":{"line":511,"column":16}},{"start":{"line":511,"column":20},"end":{"line":511,"column":40}}]},"20":{"line":513,"type":"binary-expr","locations":[{"start":{"line":513,"column":4},"end":{"line":513,"column":10}},{"start":{"line":513,"column":14},"end":{"line":513,"column":28}}]},"21":{"line":701,"type":"if","locations":[{"start":{"line":701,"column":2},"end":{"line":701,"column":2}},{"start":{"line":701,"column":2},"end":{"line":701,"column":2}}]},"22":{"line":704,"type":"if","locations":[{"start":{"line":704,"column":9},"end":{"line":704,"column":9}},{"start":{"line":704,"column":9},"end":{"line":704,"column":9}}]},"23":{"line":752,"type":"if","locations":[{"start":{"line":752,"column":2},"end":{"line":752,"column":2}},{"start":{"line":752,"column":2},"end":{"line":752,"column":2}}]},"24":{"line":755,"type":"if","locations":[{"start":{"line":755,"column":9},"end":{"line":755,"column":9}},{"start":{"line":755,"column":9},"end":{"line":755,"column":9}}]},"25":{"line":785,"type":"if","locations":[{"start":{"line":785,"column":2},"end":{"line":785,"column":2}},{"start":{"line":785,"column":2},"end":{"line":785,"column":2}}]},"26":{"line":788,"type":"if","locations":[{"start":{"line":788,"column":9},"end":{"line":788,"column":9}},{"start":{"line":788,"column":9},"end":{"line":788,"column":9}}]},"27":{"line":816,"type":"if","locations":[{"start":{"line":816,"column":2},"end":{"line":816,"column":2}},{"start":{"line":816,"column":2},"end":{"line":816,"column":2}}]},"28":{"line":845,"type":"if","locations":[{"start":{"line":845,"column":2},"end":{"line":845,"column":2}},{"start":{"line":845,"column":2},"end":{"line":845,"column":2}}]},"29":{"line":916,"type":"cond-expr","locations":[{"start":{"line":916,"column":39},"end":{"line":916,"column":53}},{"start":{"line":916,"column":56},"end":{"line":916,"column":84}}]},"30":{"line":918,"type":"if","locations":[{"start":{"line":918,"column":2},"end":{"line":918,"column":2}},{"start":{"line":918,"column":2},"end":{"line":918,"column":2}}]},"31":{"line":918,"type":"binary-expr","locations":[{"start":{"line":918,"column":6},"end":{"line":918,"column":42}},{"start":{"line":918,"column":46},"end":{"line":918,"column":82}}]},"32":{"line":921,"type":"if","locations":[{"start":{"line":921,"column":9},"end":{"line":921,"column":9}},{"start":{"line":921,"column":9},"end":{"line":921,"column":9}}]},"33":{"line":925,"type":"if","locations":[{"start":{"line":925,"column":2},"end":{"line":925,"column":2}},{"start":{"line":925,"column":2},"end":{"line":925,"column":2}}]},"34":{"line":929,"type":"if","locations":[{"start":{"line":929,"column":2},"end":{"line":929,"column":2}},{"start":{"line":929,"column":2},"end":{"line":929,"column":2}}]},"35":{"line":931,"type":"if","locations":[{"start":{"line":931,"column":9},"end":{"line":931,"column":9}},{"start":{"line":931,"column":9},"end":{"line":931,"column":9}}]},"36":{"line":931,"type":"binary-expr","locations":[{"start":{"line":931,"column":13},"end":{"line":931,"column":37}},{"start":{"line":931,"column":41},"end":{"line":931,"column":66}}]},"37":{"line":931,"type":"binary-expr","locations":[{"start":{"line":931,"column":43},"end":{"line":931,"column":52}},{"start":{"line":931,"column":56},"end":{"line":931,"column":65}}]},"38":{"line":934,"type":"if","locations":[{"start":{"line":934,"column":9},"end":{"line":934,"column":9}},{"start":{"line":934,"column":9},"end":{"line":934,"column":9}}]},"39":{"line":938,"type":"if","locations":[{"start":{"line":938,"column":2},"end":{"line":938,"column":2}},{"start":{"line":938,"column":2},"end":{"line":938,"column":2}}]},"40":{"line":942,"type":"if","locations":[{"start":{"line":942,"column":2},"end":{"line":942,"column":2}},{"start":{"line":942,"column":2},"end":{"line":942,"column":2}}]},"41":{"line":944,"type":"if","locations":[{"start":{"line":944,"column":4},"end":{"line":944,"column":4}},{"start":{"line":944,"column":4},"end":{"line":944,"column":4}}]},"42":{"line":949,"type":"if","locations":[{"start":{"line":949,"column":2},"end":{"line":949,"column":2}},{"start":{"line":949,"column":2},"end":{"line":949,"column":2}}]},"43":{"line":988,"type":"if","locations":[{"start":{"line":988,"column":2},"end":{"line":988,"column":2}},{"start":{"line":988,"column":2},"end":{"line":988,"column":2}}]},"44":{"line":992,"type":"if","locations":[{"start":{"line":992,"column":9},"end":{"line":992,"column":9}},{"start":{"line":992,"column":9},"end":{"line":992,"column":9}}]},"45":{"line":1029,"type":"if","locations":[{"start":{"line":1029,"column":2},"end":{"line":1029,"column":2}},{"start":{"line":1029,"column":2},"end":{"line":1029,"column":2}}]},"46":{"line":1033,"type":"if","locations":[{"start":{"line":1033,"column":9},"end":{"line":1033,"column":9}},{"start":{"line":1033,"column":9},"end":{"line":1033,"column":9}}]},"47":{"line":1037,"type":"if","locations":[{"start":{"line":1037,"column":2},"end":{"line":1037,"column":2}},{"start":{"line":1037,"column":2},"end":{"line":1037,"column":2}}]},"48":{"line":1046,"type":"binary-expr","locations":[{"start":{"line":1046,"column":12},"end":{"line":1046,"column":17}},{"start":{"line":1046,"column":21},"end":{"line":1046,"column":24}}]},"49":{"line":1067,"type":"if","locations":[{"start":{"line":1067,"column":2},"end":{"line":1067,"column":2}},{"start":{"line":1067,"column":2},"end":{"line":1067,"column":2}}]},"50":{"line":1071,"type":"if","locations":[{"start":{"line":1071,"column":2},"end":{"line":1071,"column":2}},{"start":{"line":1071,"column":2},"end":{"line":1071,"column":2}}]},"51":{"line":1071,"type":"binary-expr","locations":[{"start":{"line":1071,"column":6},"end":{"line":1071,"column":15}},{"start":{"line":1071,"column":19},"end":{"line":1071,"column":36}}]},"52":{"line":1112,"type":"if","locations":[{"start":{"line":1112,"column":2},"end":{"line":1112,"column":2}},{"start":{"line":1112,"column":2},"end":{"line":1112,"column":2}}]},"53":{"line":1115,"type":"if","locations":[{"start":{"line":1115,"column":9},"end":{"line":1115,"column":9}},{"start":{"line":1115,"column":9},"end":{"line":1115,"column":9}}]},"54":{"line":1118,"type":"if","locations":[{"start":{"line":1118,"column":9},"end":{"line":1118,"column":9}},{"start":{"line":1118,"column":9},"end":{"line":1118,"column":9}}]},"55":{"line":1245,"type":"if","locations":[{"start":{"line":1245,"column":2},"end":{"line":1245,"column":2}},{"start":{"line":1245,"column":2},"end":{"line":1245,"column":2}}]},"56":{"line":1248,"type":"if","locations":[{"start":{"line":1248,"column":9},"end":{"line":1248,"column":9}},{"start":{"line":1248,"column":9},"end":{"line":1248,"column":9}}]},"57":{"line":1251,"type":"if","locations":[{"start":{"line":1251,"column":9},"end":{"line":1251,"column":9}},{"start":{"line":1251,"column":9},"end":{"line":1251,"column":9}}]},"58":{"line":1282,"type":"binary-expr","locations":[{"start":{"line":1282,"column":12},"end":{"line":1282,"column":19}},{"start":{"line":1282,"column":23},"end":{"line":1282,"column":25}}]},"59":{"line":1283,"type":"if","locations":[{"start":{"line":1283,"column":2},"end":{"line":1283,"column":2}},{"start":{"line":1283,"column":2},"end":{"line":1283,"column":2}}]},"60":{"line":1311,"type":"if","locations":[{"start":{"line":1311,"column":2},"end":{"line":1311,"column":2}},{"start":{"line":1311,"column":2},"end":{"line":1311,"column":2}}]},"61":{"line":1314,"type":"if","locations":[{"start":{"line":1314,"column":9},"end":{"line":1314,"column":9}},{"start":{"line":1314,"column":9},"end":{"line":1314,"column":9}}]},"62":{"line":1338,"type":"binary-expr","locations":[{"start":{"line":1338,"column":12},"end":{"line":1338,"column":19}},{"start":{"line":1338,"column":23},"end":{"line":1338,"column":25}}]},"63":{"line":1339,"type":"if","locations":[{"start":{"line":1339,"column":2},"end":{"line":1339,"column":2}},{"start":{"line":1339,"column":2},"end":{"line":1339,"column":2}}]},"64":{"line":1368,"type":"if","locations":[{"start":{"line":1368,"column":2},"end":{"line":1368,"column":2}},{"start":{"line":1368,"column":2},"end":{"line":1368,"column":2}}]},"65":{"line":1371,"type":"if","locations":[{"start":{"line":1371,"column":9},"end":{"line":1371,"column":9}},{"start":{"line":1371,"column":9},"end":{"line":1371,"column":9}}]},"66":{"line":1381,"type":"if","locations":[{"start":{"line":1381,"column":2},"end":{"line":1381,"column":2}},{"start":{"line":1381,"column":2},"end":{"line":1381,"column":2}}]},"67":{"line":1384,"type":"if","locations":[{"start":{"line":1384,"column":2},"end":{"line":1384,"column":2}},{"start":{"line":1384,"column":2},"end":{"line":1384,"column":2}}]},"68":{"line":1395,"type":"if","locations":[{"start":{"line":1395,"column":2},"end":{"line":1395,"column":2}},{"start":{"line":1395,"column":2},"end":{"line":1395,"column":2}}]},"69":{"line":1401,"type":"if","locations":[{"start":{"line":1401,"column":4},"end":{"line":1401,"column":4}},{"start":{"line":1401,"column":4},"end":{"line":1401,"column":4}}]},"70":{"line":1401,"type":"binary-expr","locations":[{"start":{"line":1401,"column":8},"end":{"line":1401,"column":11}},{"start":{"line":1401,"column":15},"end":{"line":1401,"column":28}}]},"71":{"line":1404,"type":"if","locations":[{"start":{"line":1404,"column":4},"end":{"line":1404,"column":4}},{"start":{"line":1404,"column":4},"end":{"line":1404,"column":4}}]},"72":{"line":1418,"type":"if","locations":[{"start":{"line":1418,"column":2},"end":{"line":1418,"column":2}},{"start":{"line":1418,"column":2},"end":{"line":1418,"column":2}}]},"73":{"line":1421,"type":"binary-expr","locations":[{"start":{"line":1421,"column":15},"end":{"line":1421,"column":25}},{"start":{"line":1421,"column":29},"end":{"line":1421,"column":59}}]},"74":{"line":1422,"type":"binary-expr","locations":[{"start":{"line":1422,"column":18},"end":{"line":1422,"column":31}},{"start":{"line":1422,"column":35},"end":{"line":1422,"column":49}}]},"75":{"line":1450,"type":"if","locations":[{"start":{"line":1450,"column":2},"end":{"line":1450,"column":2}},{"start":{"line":1450,"column":2},"end":{"line":1450,"column":2}}]},"76":{"line":1455,"type":"if","locations":[{"start":{"line":1455,"column":9},"end":{"line":1455,"column":9}},{"start":{"line":1455,"column":9},"end":{"line":1455,"column":9}}]},"77":{"line":1459,"type":"if","locations":[{"start":{"line":1459,"column":9},"end":{"line":1459,"column":9}},{"start":{"line":1459,"column":9},"end":{"line":1459,"column":9}}]},"78":{"line":1490,"type":"if","locations":[{"start":{"line":1490,"column":2},"end":{"line":1490,"column":2}},{"start":{"line":1490,"column":2},"end":{"line":1490,"column":2}}]},"79":{"line":1493,"type":"if","locations":[{"start":{"line":1493,"column":9},"end":{"line":1493,"column":9}},{"start":{"line":1493,"column":9},"end":{"line":1493,"column":9}}]},"80":{"line":1497,"type":"if","locations":[{"start":{"line":1497,"column":2},"end":{"line":1497,"column":2}},{"start":{"line":1497,"column":2},"end":{"line":1497,"column":2}}]},"81":{"line":1548,"type":"if","locations":[{"start":{"line":1548,"column":2},"end":{"line":1548,"column":2}},{"start":{"line":1548,"column":2},"end":{"line":1548,"column":2}}]},"82":{"line":1575,"type":"if","locations":[{"start":{"line":1575,"column":2},"end":{"line":1575,"column":2}},{"start":{"line":1575,"column":2},"end":{"line":1575,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const as = require('../build/Release/aerospike.node')","const AerospikeError = require('./aerospike_error')","const Config = require('./config')","const IndexJob = require('./index_job')","const LargeList = require('./llist')","const Query = require('./query')","const Scan = require('./scan')","const asEventLoop = require('./event_loop')","const operations = require('./operations')","const utils = require('./utils')","","// number of client instances currently connected to any Aerospike cluster","var _connectedClients = 0","","/**"," * @class Client"," * @classdesc Aerospike client"," *"," * @summary Construct a new Aerospike client instance."," *"," * @param {Config} config - Configuration used to initialize the client."," */","function Client (config) {","  if (asEventLoop.eventLoopReleased()) {","    throw new Error('Event loop resources have already been released! Call Client#close() with releaseEventLoop set to false to avoid this error.')","  }","","  /**","   * @name Client#config","   *","   * @summary A copy of the configuration with which the client was initialized.","   *","   * @type {Config}","   */","  this.config = new Config(config)","","  /** @private */","  this.as_client = as.client(this.config)","","  /** @private */","  this.callbackHandler = Client.callbackHandler","","  /** @private */","  this.connected = false","","  /** @private */","  this.captureStackTraces = !!process.env.AEROSPIKE_DEBUG_STACKTRACES","}","","// The callback functions for the client commands take a variable number of","// arguments. Since use of the arguments variable can prevent V8 from","// optimizing the function we declare the max. number of arguments statically.","// See // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments","// for more information.","Client.DefaultCallbackHandler = function (callback, err, arg1, arg2, arg3) {","  if (!callback) return","  if (err && err.code !== as.status.AEROSPIKE_OK) {","    var error = (err instanceof AerospikeError) ? err : AerospikeError.fromASError(err)","    return callback(error)","  } else {","    return callback(null, arg1, arg2, arg3)","  }","}","","Client.LegacyCallbackHandler = function (callback, err, arg1, arg2, arg3) {","  if (!callback) return","  callback(err, arg1, arg2, arg3)","}","","Client.callbackHandler = Client.DefaultCallbackHandler","","Client.setCallbackHandler = function (callbackHandler) {","  this.callbackHandler = callbackHandler","}","","/**"," * @function Client#LargeList"," *"," * @summary Creates a new LargeList instance, which is used to perform all LDT operations in the database."," *"," * @param {Key} key - A key, used to locate the record in the cluster."," * @param {string} binName - Name of the Large Data Type Bin."," * @param {Client~WritePolicy} [writePolicy] - The Write Policy to use for this operation."," * @param {string} [createModule] - Lua function name that initialized the list configuration parameters, pass null for default list."," *"," * @deprecated since v2.4.4"," *"," * @see {@link LargeList}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const Key = Aerospike.Key"," *"," * const key = new Key('test', 'demo', 'ldt_key')"," * const policy = { timeout: 1000 }"," *"," * Aerospike.connect((error, client) => {"," *   var llist = client.LargeList(key, 'ldtBinName', policy);"," *   llist.add('abc', (error) => {"," *     client.close()"," *   })"," * })"," */","Client.prototype.LargeList = function (key, binName, policy, createModule) {","  return new LargeList(this, key, binName, policy, createModule)","}","","/**"," * @function Client#batchExists"," *"," * @summary Checks the existence of a batch of records from the database cluster."," *"," * @param {Key[]} keys - An array of Keys used to locate the records in the cluster."," * @param {Client~BatchPolicy} [policy] - The Batch Policy to use for this operation."," * @param {Client~batchRecordsCallback} callback - The function to call when the operation completes, with the results of the batch operation."," *"," * @deprecated since v2.0 - use {@link Client#batchRead} instead."," *"," * @example"," *"," * var keys = ["," *   new Key('test', 'demo', 'key1'),"," *   new Key('test', 'demo', 'key2'),"," *   new Key('test', 'demo', 'key3')"," * ]"," *"," * client.batchExists(keys, function (error, results) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     results.forEach(function (result) {"," *       switch (result.status) {"," *         case status.AEROSPIKE_OK:"," *           // record found"," *           break"," *         case status.AEROSPIKE_ERR_RECORD_NOT_FOUND:"," *           // record not found"," *           break"," *         default:"," *           // error while reading record"," *           break"," *       }"," *     })"," *   }"," * })"," */","Client.prototype.batchExists = function (keys, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('batchExists', [keys, policy], callback)","}","","/**"," * @function Client#batchGet"," *"," * @summary Reads a batch of records from the database cluster."," *"," * @param {Key[]} keys - An array of keys, used to locate the records in the cluster."," * @param {Client~BatchPolicy} [policy] - The Batch Policy to use for this operation."," * @param {Client~batchRecordsCallback} callback - The function to call when the operation completes, with the results of the batch operation."," *"," * @deprecated since v2.0 - use {@link Client#batchRead} instead."," *"," * @example"," *"," * var keys = ["," *   new Key('test', 'demo', 'key1'),"," *   new Key('test', 'demo', 'key2'),"," *   new Key('test', 'demo', 'key3')"," * ]"," *"," * client.batchGet(keys, function (error, results) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     results.forEach(function (result) {"," *       switch (result.status) {"," *         case status.AEROSPIKE_OK:"," *           // record found - bin values are available in result.record"," *           break"," *         case status.AEROSPIKE_ERR_RECORD_NOT_FOUND:"," *           // record not found"," *           break"," *         default:"," *           // error while reading record"," *           break"," *       }"," *     })"," *   }"," * })"," */","Client.prototype.batchGet = function (keys, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('batchGet', [keys, policy], callback)","}","","/**"," * @function Client#batchRead"," *"," * @summary Read multiple records for specified batch keys in one batch call."," *"," * @description"," *"," * This method allows different namespaces/bins to be requested for each key in"," * the batch. This method requires Aerospike Server version >= 3.6.0."," *"," * @param {object[]} records - List of keys and bins to retrieve."," * @param {Key} records[].key - Key to retrieve."," * @param {string[]} [records[].bins] - List of bins to retrieve."," * @param {boolean} [records[].read_all_bins] - Whether to retrieve all bins or"," * just the meta data of the record. If true, ignore <code>bins</code> and read"," * all bins; if false and <code>bins</code> is specified, read specified bins;"," * if false and <code>bins</code> is not specified, read only record meta data"," * (generation, expiration, etc.)"," * @param {Client~BatchPolicy} [policy] - The Batch Policy to use for this operation."," * @param {Client~batchRecordsCallback} callback - The function to call when the operation completes, with the results of the batch operation."," *"," * @since v2.0"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * var batchRecords = ["," *   { key: new Aerospike.Key('test', 'demo', 'key1'), bins: ['i', 's'] },"," *   { key: new Aerospike.Key('test', 'demo', 'key2'), read_all_bins: true },"," *   { key: new Aerospike.Key('test', 'demo', 'key3') }"," * ]"," * Aerospike.connect(function (error, client) {"," *   if (error) throw error"," *   client.batchRead(batchRecords, function (error, results) {"," *     if (error) throw error"," *     results.forEach(function (result) {"," *       console.log(result)"," *     })"," *   })"," * })"," */","Client.prototype.batchRead = function (records, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('batchRead', [records, policy], callback)","}","","/**"," * @function Client#batchSelect"," *"," * @summary Reads a subset of bins for a batch of records from the database cluster."," *"," * @param {Key[]} keys - An array of keys, used to locate the records in the cluster."," * @param {string[]} bins - An array of bin names for the bins to be returned for the given keys."," * @param {Client~BatchPolicy} [policy] - The Batch Policy to use for this operation."," * @param {Client~batchRecordCallback} callback - The function to call when the operation completes, with the results of the batch operation."," *"," * @deprecated since v2.0 - use {@link Client#batchRead} instead."," *"," * @example"," *"," * var keys = ["," *   new Key('test', 'demo', 'key1'),"," *   new Key('test', 'demo', 'key2'),"," *   new Key('test', 'demo', 'key3')"," * ]"," * var bins = ['s', 'i']"," *"," * client.batchSelect(keys, bins, function (error, results) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     results.forEach(function (result) {"," *       switch (result.status) {"," *         case status.AEROSPIKE_OK:"," *           // record found - selected bins are available in result.record."," *           break"," *         case status.AEROSPIKE_ERR_RECORD_NOT_FOUND:"," *           // record not found"," *           break"," *         default:"," *           // error while reading record"," *           break"," *       }"," *     })"," *   }"," * })"," */","Client.prototype.batchSelect = function (keys, bins, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('batchSelect', [keys, bins, policy], callback)","}","","/**"," * @function Client#close"," *"," * @summary Closes the client connection to the cluster."," *"," * @param {boolean} [releaseEventLoop=true] - Whether to release the event loop handle after the client is closed."," *"," * @see module:aerospike.releaseEventLoop"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect(function (error, client) {"," *   if (error) throw error"," *   // client ready to receive commands"," *   client.close()"," * })"," */","Client.prototype.close = function (releaseEventLoop) {","  if (typeof releaseEventLoop === 'undefined') {","    releaseEventLoop = true","  }","  if (!this.isConnected(false)) return","  this.connected = false","  this.as_client.close()","  _connectedClients -= 1","  if (releaseEventLoop && _connectedClients === 0) {","    asEventLoop.releaseEventLoop()","  }","}","","/**"," * @function Client#connect"," *"," * @summary Establishes the connection to the cluster."," *"," * @description"," *"," * Once the client is connected to at least one server node, it will start"," * polling each cluster node regularly to discover the current cluster status."," * As new nodes are added to the cluster, or existing nodes are removed, the"," * client will establish or close down connections to these nodes. If the"," * client gets disconnected from the cluster, it will keep polling the last"," * known server endpoints, and will reconnect automatically if the connection"," * is reestablished."," *"," * It is recommended that you use the {@link module:aerospike.connect} method"," * to connect to the cluster. You will receive the client instance in the"," * {@link Client~connectCallback|connect callback} once the cluster connection"," * has been established and the client is ready to accept commands."," *"," * @param {Client~connectCallback} callback - The function to call once the"," * client connection has been established successfully."," *"," * @return {Client} Client object which was used to connect to the cluster."," *"," * @see {@link Config#connTimeoutMs} - Initial host connection timeout in milliseconds."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," *"," * var config = { ... }"," * var client = Aerospike.client(config)"," * client.connect((error) => {"," *   if (error) {"," *     console.error('Failed to connect to cluster: %s', error.message)"," *     process.exit()"," *   } else {"," *     // client is ready to accept commands"," *   }"," * })"," */","Client.prototype.connect = function (callback) {","  var self = this","  asEventLoop.registerASEventLoop()","  this.as_client.connect(function connectCb (err) {","    self.connected = (!err || err.code === as.status.AEROSPIKE_OK)","    if (self.connected) {","      _connectedClients += 1","    } else {","      self.as_client.close()","    }","    self.callbackHandler(callback, err, self)","  })","  return this","}","","/**"," * @function Client#createIndex"," *"," * @summary Creates a secondary index."," *"," * @description"," *"," * Calling the <code>createIndex</code> method issues an"," * index create command to the Aerospike cluster and returns immediately. To"," * verify that the index has been created and populated with all the data use"," * the {@link IndexJob} instance returned by the callback."," *"," * Aerospike currently supports indexing of strings, integers and geospatial"," * information in GeoJSON format."," *"," * ##### String Indexes"," *"," * A string index allows for equality lookups. An equality lookup means that if"," * you query for an indexed bin with value \"abc\", then only records containing"," * bins with \"abc\" will be returned."," *"," * ##### Integer Indexes"," *"," * An integer index allows for either equality or range lookups. An equality"," * lookup means that if you query for an indexed bin with value 123, then only"," * records containing bins with the value 123 will be returned. A range lookup"," * means that if you can query bins within a range. So, if your range is"," * (1...100), then all records containing a value in that range will be"," * returned."," *"," * ##### Geo 2D Sphere Indexes"," *"," * A geo 2d sphere index allows either \"contains\" or \"within\" lookups. A"," * \"contains\" lookup means that if you query for an indexed bin with GeoJSON"," * point element, then only records containing bins with a GeoJSON element"," * containing that point will be returned. A \"within\" lookup means that if you"," * query for an indexed bin with a GeoJSON polygon element, then all records"," * containing bins with a GeoJSON element wholly contained within that polygon"," * will be returned."," *"," * @param {Object} options - Options for creating the index."," * @param {string} options.ns - The namespace on which the index is to be created."," * @param {string} options.set - The set on which the index is to be created."," * @param {string} options.bin - The name of the bin which values are to be indexed."," * @param {string} options.index - The name of the index to be created."," * @param {module:aerospike.indexType} [options.type] - Type of index to be"," * created based on the type of values stored in the bin. This option needs to"," * be specified if the bin to be indexed contains list or map values and the"," * individual entries of the list or keys/values of the map should be indexed."," * @param {module:aerospike.indexDataType} options.datatype - The data type of"," * the index to be created, e.g. Numeric, String or Geo."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~jobCallback} callback - The function to call when the operation completes."," *"," * @see {@link module:aerospike.indexType} for enumeration of supported index types."," * @see {@link module:aerospike.indexDataType} for enumeration of supported data types."," * @see {@link IndexJob}"," *"," * @since v2.0"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   // create index over user's recent locations"," *   var namespace = 'test'"," *   var set = 'demo'"," *   var binName = 'rloc' // recent locations"," *   var indexName = 'recentLocationsIdx'"," *   var indexType = Aerospike.indexType.LIST"," *   var dataType = Aerospike.indexDataType.GEO2DSPHERE"," *   var options = { ns: namespace,"," *                   set: set,"," *                   bin: binName,"," *                   index: indexName,"," *                   type: indexType,"," *                   datatype: dataType }"," *   var policy = { timeout: 100 }"," *"," *   client.createIndex(options, policy, (error, job) => {"," *     if (error) throw error"," *"," *     // wait for index creation to complete"," *     var pollInterval = 100"," *     job.waitUntilDone(pollInterval, (error) => {"," *       if (error) throw error"," *       console.info('secondary index %s on %s was created successfully', indexName, binName)"," *       client.close()"," *     })"," *   })"," * })"," */","Client.prototype.createIndex = function (options, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  var args = [","    options.ns,","    options.set,","    options.bin,","    options.index,","    options.type || as.indexType.DEFAULT,","    options.datatype,","    policy || options.policy","  ]","  var self = this","  this.sendCommand('indexCreate', args, function (err) {","    var job = new IndexJob(self, options.ns, options.index)","    callback(err, job)","  })","}","","/**"," * @function Client#createIntegerIndex"," *"," * @summary Creates a secondary index of type Integer."," *"," * @description This is a short-hand for calling {@link Client#createIndex}"," * with the <code>datatype</code> option set to <code>Aerospike.indexDataType.NUMERIC</code>."," *"," * @param {Object} options - Options for creating the index."," * @param {string} options.ns - The namespace on which the index is to be created."," * @param {string} options.set - The set on which the index is to be created."," * @param {string} options.bin - The name of the bin which values are to be indexed."," * @param {string} options.index - The name of the index to be created."," * @param {module:aerospike.indexType} [options.type] - Type of index to be"," * created based on the type of values stored in the bin. This option needs to"," * be specified if the bin to be indexed contains list or map values and the"," * individual entries of the list or keys/values of the map should be indexed."," * @param {Client~InfoPolicy} [options.policy] - Deprecated - set policy using"," * <code>policy</code> parameter instead."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~jobCallback} callback - The function to call when the operation completes."," *"," * @see {@link Client#indexCreate}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var binName = 'age'"," *   var indexName = 'ageIndex'"," *   var options = { ns: 'test',"," *                   set: 'demo',"," *                   bin: binName,"," *                   index: indexName }"," *"," *   client.createIntegerIndex(options, function (error) {"," *     if (error) throw error"," *     console.info('secondary index %s on %s was created successfully', indexName, binName)"," *     client.close()"," *   })"," * })"," */","Client.prototype.createIntegerIndex = function (options, policy, callback) {","  options.datatype = as.indexType.NUMERIC","  this.createIndex(options, policy, callback)","}","","/**"," * @function Client#createStringIndex"," *"," * @summary Creates a secondary index of type String."," *"," * @description This is a short-hand for calling {@link Client#createIndex}"," * with the <code>datatype</code> option set to <code>Aerospike.indexDataType.STRING</code>."," *"," * @param {Object} options - Options for creating the index."," * @param {string} options.ns - The namespace on which the index is to be created."," * @param {string} options.set - The set on which the index is to be created."," * @param {string} options.bin - The name of the bin which values are to be indexed."," * @param {string} options.index - The name of the index to be created."," * @param {module:aerospike.indexType} [options.type] - Type of index to be"," * created based on the type of values stored in the bin. This option needs to"," * be specified if the bin to be indexed contains list or map values and the"," * individual entries of the list or keys/values of the map should be indexed."," * @param {Client~InfoPolicy} [options.policy] - Deprecated - set policy using"," * <code>policy</code> parameter instead."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~jobCallback} callback - The function to call when the operation completes."," *"," * @see {@link Client#indexCreate}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var binName = 'name'"," *   var indexName = 'nameIndex'"," *   var options = { ns: 'test',"," *                   set: 'demo',"," *                   bin: binName,"," *                   index: indexName }"," *"," *   client.createStringIndex(options, function (error) {"," *     if (error) throw error"," *     console.info('secondary index %s on %s was created successfully', indexName, binName)"," *     client.close()"," *   })"," * })"," */","Client.prototype.createStringIndex = function (options, policy, callback) {","  options.datatype = as.indexType.STRING","  this.createIndex(options, policy, callback)","}","","/**"," * @function Client#createGeo2DSphereIndex"," *"," * @summary Creates a secondary, geospatial index."," *"," * @description This is a short-hand for calling {@link Client#createIndex}"," * with the <code>datatype</code> option set to <code>Aerospike.indexDataType.GEO2DSPHERE</code>."," *"," * @param {Object} options - Options for creating the index."," * @param {string} options.ns - The namespace on which the index is to be created."," * @param {string} options.set - The set on which the index is to be created."," * @param {string} options.bin - The name of the bin which values are to be indexed."," * @param {string} options.index - The name of the index to be created."," * @param {module:aerospike.indexType} [options.type] - Type of index to be"," * created based on the type of values stored in the bin. This option needs to"," * be specified if the bin to be indexed contains list or map values and the"," * individual entries of the list or keys/values of the map should be indexed."," * @param {Client~InfoPolicy} [options.policy] - Deprecated - set policy using"," * <code>policy</code> parameter instead."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~jobCallback} callback - The function to call when the operation completes."," *"," * @see {@link Client#indexCreate}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var binName = 'location'"," *   var indexName = 'locationIndex'"," *   var options = { ns: 'test',"," *                   set: 'demo',"," *                   bin: binName,"," *                   index: indexName }"," *"," *   client.createGeo2DSphereIndex(options, function (error) {"," *     if (error) throw error"," *     console.info('secondary index %s on %s was created successfully', indexName, binName)"," *     client.close()"," *   })"," * })"," */","Client.prototype.createGeo2DSphereIndex = function (options, policy, callback) {","  options.datatype = as.indexType.GEO2DSPHERE","  this.createIndex(options, policy, callback)","}","","/**"," * @function Client#apply"," *"," * @summary Applies a User Defined Function (UDF) on a record in the database."," *"," * @param {Key} key - The key, used to locate the record in the cluster."," * @param {Object} udfArgs - Parameters used to specify which UDF function to execute."," * @param {string} udfArgs.module - The name of the UDF module that was registered with the cluster."," * @param {string} udfArgs.funcname - The name of the UDF function within the module."," * @param {Array.<(number|string)>} udfArgs.args - List of arguments to pass to the UDF function."," * @param {Client~ApplyPolicy} [policy] - The Apply Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation has completed with the results of the operation."," *"," * @since v2.0"," *"," * @see {@link Client#udfRegister}"," *"," * @example"," *"," * var key = new Key('test', 'demo', value')"," * var udfArgs = {module: 'my_udf_module', funcname: 'my_udf_function', args: ['abc', 123, 4.5]}"," *"," * client.apply(key, udfArgs, function (error, res, key) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," *"," */","Client.prototype.apply = function (key, udfArgs, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('applyAsync', [key, udfArgs, policy], function (err, result) {","    callback(err, result, key)","  })","}","","/**"," * @function Client#execute"," *"," * @summary Alias for {@link Client#apply} for backwards compatibility."," *"," * @param {Key} key - The key, used to locate the record in the cluster."," * @param {Object} udfArgs - Parameters used to specify which UDF function to execute."," * @param {string} udfArgs.module - The name of the UDF module that was registered with the cluster."," * @param {string} udfArgs.funcname - The name of the UDF function within the module."," * @param {Array.<(number|string)>} udfArgs.args - List of arguments to pass to the UDF function."," * @param {Client~ApplyPolicy} [policy] - The Apply Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation has completed with the results of the operation."," *"," * @deprecated since v2.0 - renamed to {@link Client#apply}."," */","Client.prototype.execute = Client.prototype.apply","","/**"," * @function Client#exists"," *"," * @summary Checks the existance of a record in the database cluster."," *"," * @param {Key} key - The key of the record to check for existance."," * @param {Client~ReadPolicy} [policy] - The Read Policy to use for this operation."," * @param {Client~existsCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @example"," *"," * var key = new Key('test', 'demo', 'key1')"," * client.exists(key, function (error, metadata, key) {"," *   if (error && error.code === Aerospike.status.AEROSPIKE_ERR_RECORD_NOT_FOUND) {"," *     // record does not exist"," *   } else if (error) {"," *     // handle error"," *   } else {"," *     // record exists"," *   }"," * })"," */","Client.prototype.exists = function exists (key, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('existsAsync', [key, policy], function (err, metadata) {","    callback(err, metadata, key)","  })","}","","/**"," * @function Client#get"," *"," * @summary Using the key provided, reads a record from the database cluster."," *"," * @param {Key} key - The key used to locate the record in the cluster."," * @param {Client~ReadPolicy} [policy] - The Read Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @example"," *"," * var key = new Key('test', 'demo', 'key1')"," *"," * client.get(key, function (error, record, metadata) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," */","Client.prototype.get = function (key, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('getAsync', [key, policy], function (err, record, metadata) {","    callback(err, record, metadata, key)","  })","}","","/**"," * @function Client#indexCreateWait"," *"," * @summary Wait until an index create command succeeds in aerospike cluster."," *"," * @description This function actively polls the Aerospike cluster until the"," * specified index is ready to be queried."," *"," * This method has been deprecated in v2.0. Use the {@link"," * IndexJob#waitUntilDone} method on the {@link IndexJob} instance returned"," * by the {@link Client#createIndex} callback instead."," *"," * @param {string} namespace - The namespace on which the index is created."," * @param {string} index - The name of the index."," * @param {number} pollInterval - The poll interval in milliseconds."," * @param {Client~doneCallback} callback - The function to call when the operation completes which the result of the operation."," *"," * @deprecated since v2.0 - use {@link IndexJob#waitUntilDone} instead."," */","Client.prototype.indexCreateWait = function (namespace, index, pollInterval, callback) {","  if (!this.isConnected(false)) {","    this.sendError(callback, 'Not connected.')","    return","  }","  var job = new IndexJob(this, namespace, index)","  job.waitUntilDone(pollInterval, callback)","}","","/**"," * @function Client#indexRemove"," *"," * @summary Removes the specified index."," *"," * @param {string} namespace - The namespace on which the index was created."," * @param {string} index - The name of the index."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~doneCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @example"," *"," * client.indexRemove('test', 'index', function (error) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * });"," */","Client.prototype.indexRemove = function (namespace, index, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('indexRemove', [namespace, index, policy], callback)","}","","/**"," * @function Client#info"," *"," * @summary Sends an info query to all nodes in the cluster."," *"," * @description The <code>request</code> parameter is a string representing an"," * info request. If it is not specified, the cluster host(s) will send all"," * available info."," *"," * The command queries each node in the cluster separately. The info callback"," * is called once for every cluster host that responds. The optional done callback"," * is called once all responses have been received."," *"," * @param {string} [request] - The info request to send."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~infoCallback} infoCb - The function to call when an info response from a cluster host is received."," * @param {Client~doneCallback} [doneCb] - The function to call once all info responses have been received and the operation completes."," *"," * @deprecated since v2.4 - use {@link Client#infoAll} instead."," *"," * @example <caption>Sending info command to whole cluster</caption>"," *"," * client.info('statistics', function (error, response, host) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // process info response from host"," *   }"," * }, function () {"," *   // all response have been processed"," * })"," */","","/**"," * @function Client#info"," *"," * @summary Sends an info query to a specific cluster node."," *"," * @description The <code>request</code> parameter is a string representing an"," * info request. If it is not specified, the cluster host will send all"," * available info."," *"," * Please refer to the"," * <a href=\"http://www.aerospike.com/docs/reference/info\">Info Command Reference</a>"," * for a list of all available info commands."," *"," * @param {string} [request] - The info request to send."," * @param {Object} host - The address of the cluster host to send the request to."," * @param {string} host.addr - The IP address or host name of the host."," * @param {number} [host.port=3000] - The port of the host."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~infoCallback} infoCb - The function to call when an info response from a cluster host is received."," *"," * @example <caption>Sending a 'statistics' info query to a specific host</caption>"," *"," * client.info('statistics', {addr: '127.0.0.1', port: 3000}, function (error, response) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," */","Client.prototype.info = function (request, host, policy, infoCb, doneCb) {","  var argv = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments))","  var argc = arguments.length","  if (typeof argv[argc - 2] === 'function' && typeof argv[argc - 1] === 'function') {","    doneCb = argv.pop()","    infoCb = argv.pop()","  } else if (typeof argv[argc - 1] === 'function') {","    infoCb = argv.pop()","  }","","  if (typeof request === 'function') {","    request = null","  }","","  if (typeof host === 'function') {","    host = null","  } else if (typeof host === 'object' && !(host.addr && host.port)) {","    policy = host","    host = null","  } else if (typeof host === 'string') {","    host = utils.parseHostString(host)","  }","","  if (typeof policy === 'function') {","    policy = null","  }","","  if (!this.isConnected(false)) {","    this.sendError(infoCb, 'Not connected.')","    if (doneCb) process.nextTick(doneCb)","    return","  }","","  var self = this","  if (host) {","    this.as_client.info(request, host, policy, function asInfoCb (err, response) {","      self.callbackHandler(infoCb, err, response, host)","      doneCb()","    })","  } else {","    this.as_client.infoForeach(request, policy, function asInfoCb (err, response, host) {","      self.callbackHandler(infoCb, err, response, host)","    }, doneCb)","  }","}","","/**"," * @function Client#infoAny"," *"," * @summary Sends an info query to a single, randomly selected cluster node."," *"," * @description The <code>request</code> parameter is a string representing an"," * info request. If it is not specified, the cluster host(s) will send all"," * available info."," *"," * @param {string} [request] - The info request to send."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~infoCallback} callback - The function to call when an info"," * response from a cluster host is received."," *"," * @since v2.4.0"," *"," * @example <caption>Sending 'statistics' info command to random cluster node</caption>"," *"," * client.infoAny('statistics', function (error, response) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," */","Client.prototype.infoAny = function (request, policy, callback) {","  if (typeof request === 'function') {","    callback = request","    request = null","    policy = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('info', [request, null, policy], callback)","}","","/**"," * @function Client#infoAll"," *"," * @summary Sends an info query to all nodes in the cluster and collects the"," * results."," *"," * @description The <code>request</code> parameter is a string representing an"," * info request. If it is not specified, the cluster hosts will send all"," * available info."," *"," * @param {string} [request] - The info request to send."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~infoAllCallback} callback - The function to call when an info"," * response from all cluster hosts is received."," *"," * @since v2.3.0"," *"," * @example <caption>Sending info command to whole cluster</caption>"," *"," * client.infoAll('statistics', function (error, responses) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     responses.forEach((function (info) {"," *       // handle response"," *     })"," *   }"," * })"," */","Client.prototype.infoAll = function (request, policy, callback) {","  if (typeof request === 'function') {","    callback = request","    request = null","    policy = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  if (!this.isConnected(false)) {","    this.sendError(callback, 'Not connected.')","    return","  }","","  var error = null","  var info = []","  var self = this","  this.as_client.infoForeach(request, policy, function infoAllCb (err, response, host) {","    error = error || err","    info.push({host: host, info: response, error: err})","  }, function () {","    self.callbackHandler(callback, error, info)","  })","}","","/**"," * @function Client#isConnected"," *"," * @summary Is client connected to any server nodes."," *"," * @param {boolean} [checkTenderErrors=true] - Whether to consider a server"," * node connection that has had 5 consecutive info request failures during"," * cluster tender."," *"," * @returns {boolean} <code>true</code> if the client is currently connected to any server nodes."," *"," * @since v2.0"," */","Client.prototype.isConnected = function (checkTenderErrors) {","  if (typeof checkTenderErrors === 'undefined') {","    checkTenderErrors = true","  }","  var connected = this.connected","  if (connected && checkTenderErrors) {","    connected = this.as_client.isConnected()","  }","  return connected","}","","/**"," * @function Client#operate"," *"," * @summary Performs multiple operations on a single record."," *"," * @param {Key} key - The key of the record."," * @param {Object[]} operations - List of operations to perform on the record."," * @param {Object} [metadata] - Meta data."," * @param {Client~OperatePolicy} [policy] - The Operate Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const op = Aerospike.operations"," *"," * var key = new Aerospike.Key('test', 'demo', 'mykey1')"," * var ops = ["," *   op.append('a', 'xyz'),"," *   op.incr('b', 10),"," *   op.read('b')"," * ]"," *"," * Aerospike.connect(function (error, client) {"," *   client.operate(key, ops, function (error, record) {"," *     if (error) {"," *       // handle failure"," *     } else {"," *       console.log('b', record['b']) // value of 'b' returned by the `read` operation"," *     }"," *   })"," *   client.close()"," * })"," */","Client.prototype.operate = function (key, operations, metadata, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof metadata === 'function') {","    callback = metadata","    metadata = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('operateAsync', [key, operations, metadata, policy], function (err, record, metadata) {","    callback(err, record, metadata, key)","  })","}","","/**"," * @function Client#append"," *"," * @summary Shortcut for applying the {@link"," * module:aerospike/operations.append} operation to one or more record bins."," *"," * @description This function works on bins of type string or bytes; to append"," * a new value (of any type) to a bin containing a list of existing values, use"," * the {@link module:aerospike/lists.append} operation instead."," *"," * @param {Key} key - The key of the record."," * @param {Object[]} bins - The key-value mapping of bin names and the"," * corresponding values to append to the bin value. The bins must contain"," * either string or byte array values and the values to append must be of the"," * same type."," * @param {Object} [metadata] - Meta data."," * @param {Client~OperatePolicy} [policy] - The Operate Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @see {@link Client#operate}"," * @see {@link module:aerospike/operations.append}"," */","","/**"," * @function Client#prepend"," *"," * @summary Shortcut for applying the {@link module:aerospike/operations.prepend} operation to one or more record bins."," *"," * @param {Key} key - The key of the record."," * @param {Object[]} bins - The key-value mapping of bin names and the corresponding values to prepend to the bin value."," * @param {Object} [metadata] - Meta data."," * @param {Client~OperatePolicy} [policy] - The Operate Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @see {@link Client#operate}"," * @see {@link module:aerospike/operations.prepend}"," */","","/**"," * @function Client#incr"," *"," * @summary Shortcut for applying the {@link module:aerospike/operations.incr} operation to one or more record bins."," *"," * @param {Key} key - The key of the record."," * @param {Object[]} bins - The key-value mapping of bin names and the corresponding values to use to increment the bin values with."," * @param {Object} [metadata] - Meta data."," * @param {Client~OperatePolicy} [policy] - The Operate Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @since v2.0"," *"," * @see {@link Client#operate}"," * @see {@link module:aerospike/operations.incr}"," */","","// Shortcuts for some operations",";['append', 'prepend', 'incr'].forEach(function (op) {","  Client.prototype[op] = function (key, bins, metadata, policy, callback) {","    var ops = Object.keys(bins).map(function (bin) {","      return operations[op](bin, bins[bin])","    })","    this.operate(key, ops, metadata, policy, callback)","  }","})","","/**"," * @function Client#add"," *"," * @summary Alias for {@link Client#incr} for backwards compatibility."," *"," * @param {Key} key - The key of the record."," * @param {Object[]} bins - The key-value mapping of bin names and the corresponding values to use to increment the bin values with."," * @param {Object} [metadata] - Meta data."," * @param {Client~OperatePolicy} [policy] - The Operate Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @deprecated since v2.0 - renamed to {@link Client#incr}."," */","Client.prototype.add = Client.prototype.incr","","/**"," * @function Client#put"," *"," * @summary Writes a record to the database cluster."," *"," * @description"," * If the record exists, it modifies the record with bins provided."," * To remove a bin, set its value to <code>null</code>."," *"," * __Note:__ The client does not perform any automatic data type conversions."," * Attempting to write an unsupported data type (e.g. boolean) into a record"," * bin will cause an error to be returned. Setting an <code>undefined</code>"," * value will also cause an error."," *"," * @param {Key} key - The key of the record."," * @param {object} record - A record object used for specifying the fields to store."," * @param {object} [metadata] - Meta data."," * @param {Client~WritePolicy} [policy] - The Write Policy to use for this operation."," * @param {Client~writeCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @example"," *"," * const Key = Aerospike.Key"," *"," * var key = new Key('test', 'demo', 'key1')"," * var rec = {"," *   a: 'xyz',"," *   b: 123"," * }"," *"," * client.put(key, rec, function (error, key) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," */","Client.prototype.put = function (key, record, metadata, policy, callback) {","  if (typeof metadata === 'function') {","    callback = metadata","    metadata = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('putAsync', [key, record, metadata, policy], function (err) {","    callback(err, key)","  })","}","","/**"," * @function Client#query"," *"," * @summary Creates a new {@link Query} instance, which is used to define query"," * in the database."," *"," * @param {string} ns - The namespace to be queried."," * @param {string} set - The set on which the query is to be executed."," * @param {object} [options] - Query parameters. See {@link Query} constructor for details."," *"," * @see {@link Query}"," *"," * @example"," *"," * const filter = Aerospike.filter"," *"," * var statement = {}"," * statment.filters: [filter.equal('color', 'blue')]"," *"," * var query = client.query(ns, set, statment)"," * var stream = query.execute()"," */","Client.prototype.query = function (ns, set, options) {","  options = options || {}","  if (!this.isConnected()) {","    throw new AerospikeError('Not connected.')","  }","  return new Query(this, ns, set, options)","}","","/**"," * @function Client#remove"," *"," * @summary Removes a record with the specified key from the database cluster."," *"," * @param {Key} key - The key of the record."," * @param {Client~RemovePolicy} [policy] - The Remove Policy to use for this operation."," * @param {Client~writeCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @example"," *"," * const Key = Aerospike.Key",""," * client.remove(new Key('test', 'demo', 'key1'), function (error, key) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," */","Client.prototype.remove = function (key, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('removeAsync', [key, policy], function (err) {","    callback(err, key)","  })","}","","/**"," * @function Client#scan"," *"," * @summary Creates a new {@link Scan} instance in order to execute a database"," * scan using the Scan API."," *"," * @see {@link Scan} constructor for options that can be used to initialize a"," * new instance."," *"," * @param {string} ns - The namescape."," * @param {string} set - The name of a set."," * @param {object} [options] - Scan parameters. See {@link Scan} constructor for details."," *"," * @since v2.0"," */","Client.prototype.scan = function (ns, set, options) {","  options = options || {}","  if (!this.isConnected()) {","    throw new AerospikeError('Not connected.')","  }","  return new Scan(this, ns, set, options)","}","","/**"," * @function Client#select"," *"," * @summary Retrieves selected bins for a record of given key from the database cluster."," *"," * @param {Key} key - The key of the record."," * @param {string[]} bins - A list of bin names for the bins to be returned."," * @param {Client~ReadPolicy} [policy] - The Read Policy to use for this operation."," * @param {Client~recordCallback} callback - The function to call when the operation completes with the results of the operation."," *"," * @example"," *"," * const Key = Aerospike.Key"," *"," * client.select(new Key('test', 'demo', 'key1'), ['name', 'age'], function (error, record, metadata, key) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // handle success"," *   }"," * })"," */","Client.prototype.select = function (key, bins, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.sendCommand('selectAsync', [key, bins, policy], function (err, record, metadata) {","    callback(err, record, metadata, key)","  })","}","","/** @private */","Client.prototype.sendCommand = function (cmd, args, callback) {","  if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  if (!this.isConnected(false)) {","    this.sendError(callback, 'Not connected.')","    return","  }","","  // C client will call the callback function synchronously under certain error","  // conditions; if we detect a synchronous callback we need to schedule the JS","  // callback to be called asynchronously anyway.","  var sync = true","","  var cmdStackTrace = null","  if (this.captureStackTraces) {","    cmdStackTrace = new AerospikeError().stack","  }","","  var self = this","  args.push(function (err, arg1, arg2, arg3) {","    if (err && cmdStackTrace) {","      err.stack = cmdStackTrace","    }","    if (sync) {","      // TODO: replace with process.nextTick once we drop support for Node.js v0.12","      setImmediate(self.callbackHandler, callback, err, arg1, arg2, arg3)","    } else {","      return self.callbackHandler(callback, err, arg1, arg2, arg3)","    }","  })","","  this.as_client[cmd].apply(this.as_client, args)","  sync = false // if we get here before the cb was called the cb is async","}","","/** @private */","Client.prototype.sendError = function (callback, error) {","  if (typeof error === 'string') {","    error = { message: error }","  }","  error.code = error.code || as.status.AEROSPIKE_ERR_CLIENT","  error.message = error.message || 'Client Error'","  Error.captureStackTrace(error)","  var self = this","  process.nextTick(function () {","    self.callbackHandler(callback, error)","  })","}","","/**"," * @function Client#truncate"," *"," * @summary Removes records in specified namespace/set efficiently."," *"," * @description This method is many orders of magnitude faster than deleting"," * records one at a time. Works with Aerospike Server version >= 3.12."," *"," * @param {string} ns - Required namespace."," * @param {string} set - Optional set name. Set to <code>null</code> to delete"," * all sets in namespace."," * @param {number} before_nanos - Optionally delete records before given last"," * update time. Units are in nanoseconds since unix epoch (1970-01-01). If"," * specified, the value must be before the current time. Pass in 0 to delete"," * all records in namespace/set regardless of last udpate time."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~doneCallback} callback - The function to call when the"," * operation completes with the result of the operation."," */","Client.prototype.truncate = function (ns, set, beforeNanos, policy, callback) {","  if (typeof set === 'function') {","    callback = set","    set = null","    beforeNanos = 0","    policy = null","  } else if (typeof beforeNanos === 'function') {","    callback = beforeNanos","    beforeNanos = 0","    policy = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('truncate', [ns, set, beforeNanos, policy], callback)","}","","/**"," * @function Client#udfRegister"," *"," * @summary Registers a UDF module with the database cluster."," *"," * @description This method loads a Lua script from the local filesystem into"," * the Aerospike database cluster and registers it for use as a UDF module. The"," * client uploads the module to a single cluster node. It then gets distributed"," * within the whole cluster automatically. The callback function is called once"," * the initial upload into the cluster has completed (or if an error occurred"," * during the upload). To verify that the UDF module has been registered on"," * every cluster node you can use the {@link Client#udfRegisterWait} method."," *"," * @param {string} path - The file path to the Lua script to load into the server."," * @param {number} [udfType] - Language of the UDF script. Lua is the default"," * and only supported scripting language for UDF modules at the moment; ref."," * {@link module:aerospike.language}."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~doneCallback} callback - The function to call when the"," * operation completes with the result of the operation."," *"," * @see {@link Client#udfRegisterWait} for an example."," */","Client.prototype.udfRegister = function (path, udfType, policy, callback) {","  if (typeof udfType === 'function') {","    callback = udfType","    udfType = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  if (typeof udfType === 'object') {","    policy = udfType","    udfType = null","  }","  this.sendCommand('udfRegister', [path, udfType, policy], callback)","}","","/**"," * @function Client#udfRegisterWait"," *"," * @summary Waits until a UDF module has been successfully registered on all"," * cluster nodes."," *"," * @description This function periodically polls the cluster nodes to check for"," * the presence of a previously registered UDF module. It calls the provided"," * callback function once all nodes have successfully registered the module."," *"," * @param {string} udfModule - The name of the UDF module; this is the basename"," * of the UDF file registered with {@link Client#udfRegister}, i.e. the"," * filename, optionally including the file extension, but without the directory"," * name."," * @param {number} pollInterval - Poll interval in milliseconds used to check"," * the presence of the on the cluster nodes."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~doneCallback} callback - The function to call when the"," * operation completes with the result of the operation."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const path = require('path')"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var path = './udf/my_module.lua'"," *   client.udfRegister(path, (error) => {"," *     if (error) throw error"," *"," *     var module = path.basename(path)"," *     client.udfRegisterWait(module, 100, (error) => {"," *       if (error) throw error"," *"," *       // UDF module was successfully registered on all cluster nodes"," *"," *       client.close()"," *     })"," *   })"," * })"," */","Client.prototype.udfRegisterWait = function (udfModule, pollInterval, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('udfRegisterWait', [udfModule, pollInterval, policy], callback)","}","","/**"," * @function Client#udfRemove"," *"," * @summary Removes a UDF module from the cluster."," *"," * @param {string} udfModule - The filename of the UDF module."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Client~doneCallback} callback - The function to call when the operation completes which the result of the operation."," *"," * @example"," *"," * client.udfRemove('my_module', function (error) {"," *   if (error) {"," *     // handle failure"," *   } else {"," *     // UDF module was successfully removed from the cluster"," *   }"," * })"," */","Client.prototype.udfRemove = function (udfModule, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.sendCommand('udfRemove', [udfModule, policy], callback)","}","","Client.prototype.updateLogging = function (logConfig) {","  this.as_client.updateLogging(logConfig)","}","","/**"," * @typedef {Object} Client~ApplyPolicy"," *"," * A policy affecting the behavior of apply operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {number} key - Specifies the behavior for the key."," * @property {number} commitLevel - Specifies the number of replicas required"," * to be committed successfully when writing before returning transaction succeeded."," * @property {number} ttl - The time-to-live (expiration) of the record in seconds."," * @property {boolean} [durableDelete=false] - Specifies whether a {@link"," * http://www.aerospike.com/docs/guide/durable_deletes.html|tombstone} should"," * be written in place of a record that gets deleted as a result of this"," * operation."," *"," * @see {@link module:aerospike.policy} for supported policy values."," */","","/**"," * @typedef {Object} Client~ReadPolicy"," *"," * A policy affecting the behavior of read operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {number} key - Specifies the behavior for the key."," * @property {number} replica - Specifies the replica to be consulted for the read."," * @property {number} concistencyLevel - Specifies the number of replicas consulted when reading for the desired consistency guarantee."," *"," * @see {@link module:aerospike.policy} for supported policy values."," */","","/**"," * @typedef {Object} Client~WritePolicy"," *"," * A policy affecting the behavior of write operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {number} compressionThreshold - Minimum record size beyond which it is compressed and sent to the server."," * @property {number} key - Specifies the behavior for the key."," * @property {number} gen - Specifies the behavior for the generation value."," * @property {number} exists - Specifies the behavior for the existence of the record."," * @property {number} commitLevel - Specifies the number of replicas required"," * to be committed successfully when writing before returning transaction succeeded."," * @property {boolean} [durableDelete=false] - Specifies whether a {@link"," * http://www.aerospike.com/docs/guide/durable_deletes.html|tombstone} should"," * be written in place of a record that gets deleted as a result of this"," * operation."," *"," * @see {@link module:aerospike.policy} for supported policy values."," */","","/**"," * @typedef {Object} Client~RemovePolicy"," *"," * A policy affecting the behavior of remove operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {number} generation - The generation of the record."," * @property {number} key - Specifies the behavior for the key."," * @property {number} gen - Specifies the behavior for the generation value."," * @property {number} commitLevel - Specifies the number of replicas required"," * to be committed successfully when writing before returning transaction succeeded."," * @property {boolean} [durableDelete=false] - Specifies whether a {@link"," * http://www.aerospike.com/docs/guide/durable_deletes.html|tombstone} should"," * be written in place of a record that gets deleted as a result of this"," * operation."," *"," * @see {@link module:aerospike.policy} for supported policy values."," */","","/**"," * @typedef {Object} Client~BatchPolicy"," *"," * A policy affecting the behavior of batch operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," */","","/**"," * @typedef {Object} Client~OperatePolicy"," *"," * A policy affecting the behavior of operate operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {number} key - Specifies the behavior for the key."," * @property {number} gen - Specifies the behavior for the generation value."," * @property {number} replica - Specifies the replica to be consulted for the read."," * @property {number} concistencyLevel - Specifies the number of replicas consulted when reading for the desired consistency guarantee."," * @property {number} commitLevel - Specifies the number of replicas required"," * to be committed successfully when writing before returning transaction succeeded."," * @property {boolean} [durableDelete=false] - Specifies whether a {@link"," * http://www.aerospike.com/docs/guide/durable_deletes.html|tombstone} should"," * be written in place of a record that gets deleted as a result of this"," * operation."," *"," * @see {@link module:aerospike.policy} for supported policy values."," */","","/**"," * @typedef {Object} Client~InfoPolicy"," *"," * A policy affecting the behavior of info operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {boolean} sendAsIs - Send request without any further processing."," * @property {boolean} checkBounds - Ensure the request is within allowable size limits."," */","","/**"," * @typedef {Object} Client~AdminPolicy"," *"," * A policy affecting the behavior of admin operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," */","","/**"," * @typedef {Object} Client~ScanPolicy"," *"," * A policy affecting the behavior of scan operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," * @property {boolean} failOnClusterChange - Abort the scan if the cluster is not in a stable state."," * @property {boolean} [durableDelete=false] - Specifies whether a {@link"," * http://www.aerospike.com/docs/guide/durable_deletes.html|tombstone} should"," * be written in place of a record that gets deleted as a result of this"," * operation."," */","","/**"," * @typedef {Object} Client~QueryPolicy"," *"," * A policy affecting the behavior of query operations."," *"," * @property {number} timeout - Maximum time in milliseconds to wait for the operation to complete."," */","","/**"," * @callback Client~doneCallback"," *"," * @summary Callback function called when an operation has completed."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," */","","/**"," * @callback Client~recordCallback"," *"," * @summary Callback function returning a single record from the cluster."," *"," * @description"," *"," * If the operation was successful, <code>null</code> will be returned for the"," * error parameter. If there was an error, <code>record</code> will be"," * <code>undefined</code> and the <code>error</code> paramter will provide more"," * information about the error."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Object} [record] - The record bins. Depending on the operation, the full record or a selection of bins will be returned."," * @param {Object} [metadata] - The metadata of the record."," * @param {Key} [key] - The key of the record."," */","","/**"," * @callback Client~writeCallback"," *"," * @summary Callback function called when a write operation on a single record has completed."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Key} key - The key of the record."," */","","/**"," * @callback Client~batchRecordsCallback"," *"," * @summary Callback function returning one or more records from the cluster."," *"," * @description"," *"," * If the operation was successful, <code>null</code> will be returned for the"," * error parameter. If there was an error, <code>results</code> will be"," * <code>undefined</code> and the <code>error</code> paramter will provide more"," * information about the error."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Object[]} [results] - The results of the operation. Depending on the"," * specific operation, the full record, a selection of bins or just the meta"," * data for the record will be included in the results."," * @param {number} results.status - The status of the record."," * @param {Key} [results.key] - The key of the record."," * @param {Object} [results.record] - The record bins read from the cluster."," * @param {Object} results.metadata - The metadata of the record."," */","","/**"," * @callback Client~connectCallback"," *"," * @summary The function called when the client has successfully connected to the server."," *"," * @description"," *"," * Once you receive the connect callback the client instance"," * returned in the callback is ready to accept commands for the Aerospike"," * cluster."," *"," * If an error occurred while connecting to the cluster, the"," * <code>client</code> parameter will be <code>undefined</code> and the"," * <code>error</code> parameter will include more information about the error."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Client} [client] - Aerospike client instance."," */","","/**"," * @callback Client~infoCallback"," *"," * @summary The function called when a cluster host responds to an info query."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {string} [response] - The response string with the requested info."," * @param {Object} [host] - The address of the host which send the response."," * @param {string} host.addr - The ip address or host name of the host."," * @param {number} host.port - The port number of the host."," */","","/**"," * @callback Client~infoAllCallback"," *"," * @summary The function called when all cluster nodes have responded to the"," * info request. Note that the error parameter in the callback will be"," * non-<code>null</code> if at least one of the cluster hosts responded with an"," * error to the info request. To check the status of the info requeset for each"," * individual cluster node, you need to check the list of responses returned in"," * the second parameter.."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Object[]} [responses] - The response string with the requested info."," * @param {string} responses[].info - The response string with the requested info."," * @param {?AerospikeError} responses[].error - The error code and message or <code>null</code> if the info request to this cluster host was successful."," * @param {Object} responses[].host - The address of the host which send the response."," * @param {string} responses[].host.addr - The ip address or host name of the host."," * @param {number} responses[].host.port - The port number of the host."," */","","/**"," * @callback Client~jobCallback"," *"," * @summary Function called when a potentially long-running job has been started."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Job} [job] - Handle on a potentially long-running job which can be used to check for job completion."," */","","module.exports = Client",""],"l":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"29":1,"39":1,"40":0,"41":0,"51":0,"54":0,"57":0,"60":0,"63":0,"71":1,"72":0,"73":0,"74":0,"75":0,"77":0,"81":1,"82":0,"83":0,"86":1,"88":1,"89":0,"121":1,"122":0,"164":1,"165":0,"166":0,"167":0,"169":0,"211":1,"212":0,"213":0,"214":0,"216":0,"260":1,"261":0,"262":0,"263":0,"265":0,"309":1,"310":0,"311":0,"312":0,"314":0,"335":1,"336":0,"337":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"390":1,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"398":0,"400":0,"402":0,"499":1,"500":0,"501":0,"502":0,"503":0,"504":0,"506":0,"515":0,"516":0,"517":0,"518":0,"566":1,"567":0,"568":0,"615":1,"616":0,"617":0,"664":1,"665":0,"666":0,"700":1,"701":0,"702":0,"703":0,"704":0,"705":0,"707":0,"708":0,"727":1,"751":1,"752":0,"753":0,"754":0,"755":0,"756":0,"758":0,"759":0,"784":1,"785":0,"786":0,"787":0,"788":0,"789":0,"791":0,"792":0,"815":1,"816":0,"817":0,"818":0,"820":0,"821":0,"844":1,"845":0,"846":0,"847":0,"849":0,"915":1,"916":0,"917":0,"918":0,"919":0,"920":0,"921":0,"922":0,"925":0,"926":0,"929":0,"930":0,"931":0,"932":0,"933":0,"934":0,"935":0,"938":0,"939":0,"942":0,"943":0,"944":0,"945":0,"948":0,"949":0,"950":0,"951":0,"952":0,"955":0,"956":0,"987":1,"988":0,"989":0,"990":0,"991":0,"992":0,"993":0,"994":0,"996":0,"1028":1,"1029":0,"1030":0,"1031":0,"1032":0,"1033":0,"1034":0,"1035":0,"1037":0,"1038":0,"1039":0,"1042":0,"1043":0,"1044":0,"1045":0,"1046":0,"1047":0,"1049":0,"1066":1,"1067":0,"1068":0,"1070":0,"1071":0,"1072":0,"1074":0,"1111":1,"1112":0,"1113":0,"1114":0,"1115":0,"1116":0,"1117":0,"1118":0,"1119":0,"1121":0,"1122":0,"1182":1,"1183":3,"1184":0,"1185":0,"1187":0,"1204":1,"1244":1,"1245":0,"1246":0,"1247":0,"1248":0,"1249":0,"1250":0,"1251":0,"1252":0,"1254":0,"1255":0,"1281":1,"1282":0,"1283":0,"1284":0,"1286":0,"1310":1,"1311":0,"1312":0,"1313":0,"1314":0,"1315":0,"1317":0,"1318":0,"1337":1,"1338":0,"1339":0,"1340":0,"1342":0,"1367":1,"1368":0,"1369":0,"1370":0,"1371":0,"1372":0,"1374":0,"1375":0,"1380":1,"1381":0,"1382":0,"1384":0,"1385":0,"1386":0,"1392":0,"1394":0,"1395":0,"1396":0,"1399":0,"1400":0,"1401":0,"1402":0,"1404":0,"1406":0,"1408":0,"1412":0,"1413":0,"1417":1,"1418":0,"1419":0,"1421":0,"1422":0,"1423":0,"1424":0,"1425":0,"1426":0,"1449":1,"1450":0,"1451":0,"1452":0,"1453":0,"1454":0,"1455":0,"1456":0,"1457":0,"1458":0,"1459":0,"1460":0,"1461":0,"1463":0,"1489":1,"1490":0,"1491":0,"1492":0,"1493":0,"1494":0,"1495":0,"1497":0,"1498":0,"1499":0,"1501":0,"1547":1,"1548":0,"1549":0,"1550":0,"1552":0,"1574":1,"1575":0,"1576":0,"1577":0,"1579":0,"1582":1,"1583":0,"1839":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/config.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/config.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0]},"f":{"1":0},"fnMap":{"1":{"name":"Config","line":42,"loc":{"start":{"line":42,"column":0},"end":{"line":42,"column":25}}}},"statementMap":{"1":{"start":{"line":42,"column":0},"end":{"line":303,"column":1}},"2":{"start":{"line":43,"column":2},"end":{"line":43,"column":23}},"3":{"start":{"line":53,"column":2},"end":{"line":55,"column":3}},"4":{"start":{"line":54,"column":4},"end":{"line":54,"column":27}},"5":{"start":{"line":62,"column":2},"end":{"line":64,"column":3}},"6":{"start":{"line":63,"column":4},"end":{"line":63,"column":35}},"7":{"start":{"line":76,"column":2},"end":{"line":76,"column":39}},"8":{"start":{"line":111,"column":2},"end":{"line":111,"column":78}},"9":{"start":{"line":121,"column":2},"end":{"line":123,"column":3}},"10":{"start":{"line":122,"column":4},"end":{"line":122,"column":27}},"11":{"start":{"line":160,"column":2},"end":{"line":162,"column":3}},"12":{"start":{"line":161,"column":4},"end":{"line":161,"column":35}},"13":{"start":{"line":192,"column":2},"end":{"line":194,"column":3}},"14":{"start":{"line":193,"column":4},"end":{"line":193,"column":25}},"15":{"start":{"line":203,"column":2},"end":{"line":205,"column":3}},"16":{"start":{"line":204,"column":4},"end":{"line":204,"column":45}},"17":{"start":{"line":213,"column":2},"end":{"line":215,"column":3}},"18":{"start":{"line":214,"column":4},"end":{"line":214,"column":47}},"19":{"start":{"line":225,"column":2},"end":{"line":227,"column":3}},"20":{"start":{"line":226,"column":4},"end":{"line":226,"column":49}},"21":{"start":{"line":237,"column":2},"end":{"line":240,"column":3}},"22":{"start":{"line":239,"column":4},"end":{"line":239,"column":31}},"23":{"start":{"line":300,"column":2},"end":{"line":302,"column":3}},"24":{"start":{"line":301,"column":4},"end":{"line":301,"column":43}},"25":{"start":{"line":305,"column":0},"end":{"line":305,"column":23}}},"branchMap":{"1":{"line":43,"type":"binary-expr","locations":[{"start":{"line":43,"column":11},"end":{"line":43,"column":17}},{"start":{"line":43,"column":21},"end":{"line":43,"column":23}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":53,"column":2}},{"start":{"line":53,"column":2},"end":{"line":53,"column":2}}]},"3":{"line":62,"type":"if","locations":[{"start":{"line":62,"column":2},"end":{"line":62,"column":2}},{"start":{"line":62,"column":2},"end":{"line":62,"column":2}}]},"4":{"line":111,"type":"binary-expr","locations":[{"start":{"line":111,"column":15},"end":{"line":111,"column":27}},{"start":{"line":111,"column":31},"end":{"line":111,"column":58}},{"start":{"line":111,"column":62},"end":{"line":111,"column":78}}]},"5":{"line":121,"type":"if","locations":[{"start":{"line":121,"column":2},"end":{"line":121,"column":2}},{"start":{"line":121,"column":2},"end":{"line":121,"column":2}}]},"6":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":2},"end":{"line":160,"column":2}},{"start":{"line":160,"column":2},"end":{"line":160,"column":2}}]},"7":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":2},"end":{"line":192,"column":2}},{"start":{"line":192,"column":2},"end":{"line":192,"column":2}}]},"8":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":2},"end":{"line":203,"column":2}},{"start":{"line":203,"column":2},"end":{"line":203,"column":2}}]},"9":{"line":213,"type":"if","locations":[{"start":{"line":213,"column":2},"end":{"line":213,"column":2}},{"start":{"line":213,"column":2},"end":{"line":213,"column":2}}]},"10":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":2},"end":{"line":225,"column":2}},{"start":{"line":225,"column":2},"end":{"line":225,"column":2}}]},"11":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":2},"end":{"line":237,"column":2}},{"start":{"line":237,"column":2},"end":{"line":237,"column":2}}]},"12":{"line":300,"type":"if","locations":[{"start":{"line":300,"column":2},"end":{"line":300,"column":2}},{"start":{"line":300,"column":2},"end":{"line":300,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @class Config"," * @classdesc Configuration for an Aerospike client instance."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const config = {"," *   user: process.env.DATABASE_USER,"," *   password: process.env.DATABASE_PASSWORD,"," *   hosts: '192.168.1.42:3000',"," *   log: {"," *     level: Aerospike.log.INFO,"," *     file: 2 // log to stderr"," *   }"," * }"," * Aerospike.connect(config, function (error, client) {"," *   if (error) {"," *     console.error('Failed to connect to cluster: %s', error.message)"," *     process.exit()"," *   }"," *   // client is ready to accept commands"," *   client.close()"," * })"," */","function Config (config) {","  config = config || {}","","  /**","   * @name Config#user","   * @summary The user name to use when authenticating to the cluster.","   * @description Leave empty for clusters running without access management.","   * (Security features are available in the Aerospike Database Enterprise","   * Edition.)","   * @type {string}","   */","  if (typeof config.user === 'string') {","    this.user = config.user","  }","","  /**","   * @name Config#password","   * @summary The password to use when authenticating to the cluster.","   * @type {string}","   */","  if (typeof config.password === 'string') {","    this.password = config.password","  }","","  /**","   * @name Config#clusterName","   * @summary Expected Cluster Name.","   * @description If not <code>null</code>, server nodes must return this","   * cluster name in order to join the client's view of the cluster. Should","   * only be set when connecting to servers that support the \"cluster-name\"","   * info command.","   * @type {string}","   * @since v2.4","   */","  this.clusterName = config.clusterName","","  /**","   * @name Config#hosts","   * @summary List of hosts with which the client should attempt to connect.","   * @description If not specified, the client attempts to read the host list","   * from the <code>AEROSPIKE_HOSTS</code> environment variable or else falls","   * back to use a default value of \"localhost\".","   * @type {(Object[] | string)}","   *","   * @example <caption>Setting <code>hosts</code> using a String</caption>","   *","   * const Aerospike = require('aerospike')","   *","   * var hosts = '192.168.0.1:3000,192.168.0.2:3000'","   * Aerospike.connect({hosts: hosts}, (err, client) => {","   *   if (err) throw err","   *   // ...","   *   client.close()","   * })","   *","   * @example <caption>Setting <code>hosts</code> using an array of hostname/port tuples</caption>","   *","   * const Aerospike = require('aerospike')","   *","   * var hosts = [","   *   { addr: '192.168.0.1', port: 3000 },","   *   { addr: '192.168.0.2', port: 3000 }","   * ]","   * Aerospike.connect({hosts: hosts}, (err, client) => {","   *   if (err) throw err","   *   // ...","   *   client.close()","   * })","   */","  this.hosts = config.hosts || process.env.AEROSPIKE_HOSTS || 'localhost:3000'","","  /**","   * @name Config#port","   * @summary Default port to use for any host address, that does not","   * explicitly specify a port number. Default is 3000.","   * @type {number}","   *","   * @since v2.4","   */","  if (typeof config.port === 'number') {","    this.port = config.port","  }","","  /**","   * @name Config#policies","   * @summaries Global client policies.","   * @description A policy is a set of values which modify the behavior of an","   * operation, like timeouts or how an operation handles data. The policies","   * defined in the configuration are used as global defaults, which can be","   * overridden by individual operations as needed.","   * @type {Object}","   *","   * @example <caption>Setting a default timeout value</caption>","   *","   * const Aerospike = require('aerospike')","   *","   * var config = {","   *   policies: {","   *     timeout: 100","   *   }","   * }","   * Aerospike.connect(config, (err, client) => {","   *   if (err) throw err","   *   var key = new Aerospike.Key('test', 'demo', 123)","   *","   *   // use default timeout policy","   *   client.put(key, {x: 42}, (err) => {","   *     if (err) throw err","   *","   *     // override global timeout policy","   *     client.get(key, { timeout: 200 }, (err, record) => {","   *       if (err) throw err","   *       console.log(record)","   *       client.close()","   *     })","   *   })","   * })","   */","  if (typeof config.policies === 'object') {","    this.policies = config.policies","  }","","  /**","   * @name Config#log","   * @summary Configuration for logging done by the client.","   * @type {Object}","   *","   * @property {number} [log.level] - Log level; see {@link","   * module:aerospike.log} for details.","   * @property {number} [log.file] - File descriptor opened using fs.open();","   * specify 1 for stdout and 2 for stdin.","   *","   * @example <caption>Enabling debug logging to a separate log file</caption>","   *","   * const Aerospike = require('aerospike')","   * const fs = require('fs')","   *","   * var debuglog = fs.openSync('./debug.log')","   * var config = {","   *   log: {","   *     level: Aerospike.log.DEBUG,","   *     file: debuglog","   *   }","   * }","   * Aerospike.connect(config, (err, client) => {","   *   if (err) throw err","   *   // ...","   *   client.close()","   * })","   */","  if (typeof config.log === 'object') {","    this.log = config.log","  }","","  /**","   * @name Config#connTimeoutMs","   * @summary Initial host connection timeout in milliseconds.","   * @description The client observes this timeout when opening a connection to","   * the cluster for the first time. Default is 1,000 milliseconds.","   * @type {number}","   */","  if (Number.isInteger(config.connTimeoutMs)) {","    this.connTimeoutMs = config.connTimeoutMs","  }","","  /**","   * @name Config#tenderInterval","   * @summary Polling interval in milliseconds for cluster tender. Default is","   * 1,000 milliseconds.","   * @type {number}","   */","  if (Number.isInteger(config.tenderInterval)) {","    this.tenderInterval = config.tenderInterval","  }","","  /**","   * @name Config#maxConnsPerNode","   * @summary Maximum number of asynchronous connections allowed for each node.","   * @description New transactions will be rejected with an","   * <code>AEROSPIKE_ERR_NO_MORE_CONNECTIONS</code> error if the limit would be","   * exceeded. Default is 300.","   * @type {number}","   */","  if (Number.isInteger(config.maxConnsPerNode)) {","    this.maxConnsPerNode = config.maxConnsPerNode","  }","","   /**","    * @name Config#modlua","    * @summary Configuration values for the mod-lua system and user paths.","    * @type {Object}","    *","    * @property {string} [modlua.systemPath] - Path to system Lua scripts.","    * @property {string} [modlua.userPath] - Path to user Lua scripts.","    */","  if (typeof config.modlua === 'object') {","    // TODO: reimplement logic to determine default paths (see conversions.cc)","    this.modlua = config.modlua","  }","","  /**","   * @name Config#sharedMemory","   * @summary Shared memory configuration.","   * @description This allows multiple client instances running in separate","   * processes on the same machine to share cluster status, including nodes and","   * data partion maps.","   * @type {Object}","   * @see {@link http://www.aerospike.com/docs/client/c/usage/shm.html#operational-notes|Operational Notes}","   * @tutorial node_clusters","   *","   * @property {boolean} [enable=true] - Whether to enable/disable usage of","   * shared memory.","   * @property {number} key - Key used to identify the shared","   * memory segment; the same key needs to be used on all client instances.","   * @property {number} [maxNodes=16] - Sets the max. number of","   * server nodes in the cluster - this value is required to size the shared","   * memory segment. Ensure that you leave a cushion between actual server node","   * cound and <code>maxNodes</code> so that you can add new nodes without","   * rebooting the client.","   * @property {number} [maxNamespaces=8] - Sets the max. number of","   * namespaces used in the cluster - this value is required to size the shared","   * memory segment. Ensure that you leave a cushion between actual namespace","   * count and <code>maxNamespaces</code> so that you can add new namespaces","   * without rebooking the client.","   * @property {number} [takeoverThresholdSeconds=30] - Expiration","   * time in seconds for the lock on the shared memory segment; if the cluster","   * status has not been updated after this many seconds another client instance","   * will take over the shared memory cluster tending.","   *","   * @example <caption>Using shared memory in a clustered setup</caption>","   *","   * const Aerospike = require('aerospike')","   * const cluster = require('cluster')","   *","   * const config = {","   *   sharedMemory: {","   *     key: 0xa5000000","   *   }","   * }","   * const client = Aerospike.client(config)","   * const noWorkers = 4","   *","   * if (cluster.isMaster) {","   *   // spawn new worker processes","   *   for (var i = 0; i < noWorkers; i++) {","   *     cluster.fork()","   *   }","   * } else {","   *   // connect to Aerospike cluster in each worker process","   *   client.connect((err) => { if (err) throw err })","   *","   *   // handle incoming HTTP requests, etc.","   *   // http.createServer((request, response) => { ... })","   *","   *   // close DB connection on shutdown","   *   client.close()","   * }","   */","  if (typeof config.sharedMemory === 'object') {","    this.sharedMemory = config.sharedMemory","  }","}","","module.exports = Config",""],"l":{"42":1,"43":0,"53":0,"54":0,"62":0,"63":0,"76":0,"111":0,"121":0,"122":0,"160":0,"161":0,"192":0,"193":0,"203":0,"204":0,"213":0,"214":0,"225":0,"226":0,"237":0,"239":0,"300":0,"301":0,"305":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/index_job.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/index_job.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"IndexJob","line":57,"loc":{"start":{"line":57,"column":0},"end":{"line":57,"column":49}}},"2":{"name":"(anonymous_2)","line":67,"loc":{"start":{"line":67,"column":34},"end":{"line":67,"column":56}}},"3":{"name":"(anonymous_3)","line":70,"loc":{"start":{"line":70,"column":37},"end":{"line":70,"column":53}}},"4":{"name":"(anonymous_4)","line":84,"loc":{"start":{"line":84,"column":26},"end":{"line":84,"column":46}}},"5":{"name":"(anonymous_5)","line":89,"loc":{"start":{"line":89,"column":15},"end":{"line":89,"column":36}}},"6":{"name":"(anonymous_6)","line":97,"loc":{"start":{"line":97,"column":15},"end":{"line":97,"column":27}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":30}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":28}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":28}},"5":{"start":{"line":57,"column":0},"end":{"line":61,"column":1}},"6":{"start":{"line":58,"column":2},"end":{"line":58,"column":22}},"7":{"start":{"line":59,"column":2},"end":{"line":59,"column":28}},"8":{"start":{"line":60,"column":2},"end":{"line":60,"column":28}},"9":{"start":{"line":62,"column":0},"end":{"line":62,"column":28}},"10":{"start":{"line":67,"column":0},"end":{"line":77,"column":1}},"11":{"start":{"line":68,"column":2},"end":{"line":68,"column":23}},"12":{"start":{"line":69,"column":2},"end":{"line":75,"column":3}},"13":{"start":{"line":70,"column":4},"end":{"line":73,"column":6}},"14":{"start":{"line":71,"column":6},"end":{"line":71,"column":37}},"15":{"start":{"line":72,"column":6},"end":{"line":72,"column":34}},"16":{"start":{"line":74,"column":4},"end":{"line":74,"column":27}},"17":{"start":{"line":76,"column":2},"end":{"line":76,"column":18}},"18":{"start":{"line":84,"column":0},"end":{"line":101,"column":1}},"19":{"start":{"line":85,"column":2},"end":{"line":85,"column":26}},"20":{"start":{"line":86,"column":2},"end":{"line":86,"column":64}},"21":{"start":{"line":87,"column":2},"end":{"line":87,"column":21}},"22":{"start":{"line":88,"column":2},"end":{"line":88,"column":18}},"23":{"start":{"line":89,"column":2},"end":{"line":96,"column":3}},"24":{"start":{"line":90,"column":4},"end":{"line":95,"column":5}},"25":{"start":{"line":91,"column":6},"end":{"line":91,"column":17}},"26":{"start":{"line":93,"column":6},"end":{"line":93,"column":33}},"27":{"start":{"line":94,"column":6},"end":{"line":94,"column":52}},"28":{"start":{"line":97,"column":2},"end":{"line":99,"column":3}},"29":{"start":{"line":98,"column":4},"end":{"line":98,"column":55}},"30":{"start":{"line":100,"column":2},"end":{"line":100,"column":42}},"31":{"start":{"line":112,"column":0},"end":{"line":112,"column":25}}},"branchMap":{"1":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"2":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":16},"end":{"line":71,"column":32}},{"start":{"line":71,"column":36},"end":{"line":71,"column":37}}]},"3":{"line":72,"type":"binary-expr","locations":[{"start":{"line":72,"column":13},"end":{"line":72,"column":21}},{"start":{"line":72,"column":25},"end":{"line":72,"column":34}}]},"4":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":4},"end":{"line":90,"column":4}},{"start":{"line":90,"column":4},"end":{"line":90,"column":4}}]},"5":{"line":90,"type":"binary-expr","locations":[{"start":{"line":90,"column":8},"end":{"line":90,"column":11}},{"start":{"line":90,"column":15},"end":{"line":90,"column":67}}]},"6":{"line":94,"type":"binary-expr","locations":[{"start":{"line":94,"column":22},"end":{"line":94,"column":34}},{"start":{"line":94,"column":38},"end":{"line":94,"column":51}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the 'License')","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an 'AS IS' BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const as = require('../build/Release/aerospike.node')","const Info = require('./info')","const Job = require('./job')","","const util = require('util')","","/**"," * @class IndexJob"," * @classdesc Potentially long-running index creation job."," * @extends Job"," *"," * @see {@link Client#createIndex}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   // create index for vehicle's current location"," *   var binName = 'location'"," *   var indexName = 'locationIndex'"," *   var options = { ns: 'test'"," *                   set: 'demo'"," *                   bin: binName,"," *                   index: indexName,"," *                   datatype: Aerospike.indexDataType.GEO2DSPHERE }"," *   client.createIndex(options, (error, job) => {"," *     if (error) throw error"," *"," *     // wait for index creation to complete"," *     var pollInterval = 100"," *     job.waitUntilDone(pollInterval, (error) => {"," *       if (error) throw error"," *       console.info('secondary index %s on %s was created successfully', indexName, binName)"," *       client.close()"," *     })"," *   })"," * })"," */","function IndexJob (client, namespace, indexName) {","  this.client = client","  this.namespace = namespace","  this.indexName = indexName","}","util.inherits(IndexJob, Job)","","/**"," * @private"," */","IndexJob.prototype.hasCompleted = function (sindexInfo) {","  var completed = false","  if (sindexInfo.length > 0) {","    var inProgress = sindexInfo.some(function (info) {","      var pct = info['load_pct'] || 0","      return pct >= 0 && pct < 100","    })","    completed = !inProgress","  }","  return completed","}","","/**"," * Fetches info for the secondary index from each cluster node."," *"," * @private"," */","IndexJob.prototype.info = function (callback) {","  var client = this.client","  var sindex = 'sindex/' + this.namespace + '/' + this.indexName","  var sindexInfo = []","  var error = null","  var infoCb = function (err, info) {","    if (err && err.code !== as.status.AEROSPIKE_ERR_INDEX_NOT_FOUND) {","      error = err","    } else {","      info = Info.parseInfo(info)","      sindexInfo.push(info[sindex] || {load_pct: 0})","    }","  }","  var doneCb = function () {","    client.callbackHandler(callback, error, sindexInfo)","  }","  this.client.info(sindex, infoCb, doneCb)","}","","/**"," * @function IndexJob#waitUntilDone"," *"," * @summary Wait until the job of creating a secondary index has completed."," *"," * @param {number} [pollInterval=1000] - Interval in milliseconds to use when polling the cluster nodes."," * @param {Client~doneCallback} callback - The function to call when the operation completes."," */","","module.exports = IndexJob",""],"l":{"17":1,"18":1,"19":1,"21":1,"57":1,"58":0,"59":0,"60":0,"62":1,"67":1,"68":0,"69":0,"70":0,"71":0,"72":0,"74":0,"76":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"93":0,"94":0,"97":0,"98":0,"100":0,"112":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/info.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/info.js","s":{"1":1,"2":0,"3":0,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0},"fnMap":{"1":{"name":"parseValue","line":47,"loc":{"start":{"line":47,"column":0},"end":{"line":47,"column":28}}},"2":{"name":"parseKeyValue","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":41}}},"3":{"name":"(anonymous_3)","line":56,"loc":{"start":{"line":56,"column":26},"end":{"line":56,"column":40}}},"4":{"name":"parseInfo","line":73,"loc":{"start":{"line":73,"column":0},"end":{"line":73,"column":26}}},"5":{"name":"(anonymous_5)","line":76,"loc":{"start":{"line":76,"column":32},"end":{"line":76,"column":47}}}},"statementMap":{"1":{"start":{"line":47,"column":0},"end":{"line":52,"column":1}},"2":{"start":{"line":48,"column":2},"end":{"line":50,"column":3}},"3":{"start":{"line":49,"column":4},"end":{"line":49,"column":24}},"4":{"start":{"line":51,"column":2},"end":{"line":51,"column":14}},"5":{"start":{"line":54,"column":0},"end":{"line":63,"column":1}},"6":{"start":{"line":55,"column":2},"end":{"line":55,"column":17}},"7":{"start":{"line":56,"column":2},"end":{"line":61,"column":4}},"8":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"9":{"start":{"line":58,"column":6},"end":{"line":58,"column":28}},"10":{"start":{"line":59,"column":6},"end":{"line":59,"column":39}},"11":{"start":{"line":62,"column":2},"end":{"line":62,"column":15}},"12":{"start":{"line":73,"column":0},"end":{"line":88,"column":1}},"13":{"start":{"line":74,"column":2},"end":{"line":74,"column":22}},"14":{"start":{"line":74,"column":13},"end":{"line":74,"column":22}},"15":{"start":{"line":75,"column":2},"end":{"line":75,"column":48}},"16":{"start":{"line":76,"column":2},"end":{"line":86,"column":4}},"17":{"start":{"line":77,"column":4},"end":{"line":77,"column":29}},"18":{"start":{"line":78,"column":4},"end":{"line":85,"column":5}},"19":{"start":{"line":79,"column":6},"end":{"line":83,"column":7}},"20":{"start":{"line":80,"column":8},"end":{"line":80,"column":46}},"21":{"start":{"line":82,"column":8},"end":{"line":82,"column":32}},"22":{"start":{"line":84,"column":6},"end":{"line":84,"column":27}},"23":{"start":{"line":87,"column":2},"end":{"line":87,"column":17}},"24":{"start":{"line":90,"column":0},"end":{"line":92,"column":1}}},"branchMap":{"1":{"line":48,"type":"if","locations":[{"start":{"line":48,"column":2},"end":{"line":48,"column":2}},{"start":{"line":48,"column":2},"end":{"line":48,"column":2}}]},"2":{"line":57,"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":57,"column":4}},{"start":{"line":57,"column":4},"end":{"line":57,"column":4}}]},"3":{"line":74,"type":"if","locations":[{"start":{"line":74,"column":2},"end":{"line":74,"column":2}},{"start":{"line":74,"column":2},"end":{"line":74,"column":2}}]},"4":{"line":78,"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":78,"column":4}},{"start":{"line":78,"column":4},"end":{"line":78,"column":4}}]},"5":{"line":78,"type":"binary-expr","locations":[{"start":{"line":78,"column":9},"end":{"line":78,"column":34}},{"start":{"line":78,"column":39},"end":{"line":78,"column":62}}]},"6":{"line":79,"type":"if","locations":[{"start":{"line":79,"column":6},"end":{"line":79,"column":6}},{"start":{"line":79,"column":6},"end":{"line":79,"column":6}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the 'License')","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an 'AS IS' BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @module aerospike/info"," *"," * @description Utility methods for dealing with info data returned by Aerospike cluster nodes."," *"," * @see {@link Client#info}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var infoCb = function (error, infoStr) {"," *     if (error) {"," *       console.error('error retrieving info: %s', error.message)"," *     } else {"," *       var info = Aerospike.info.parseInfo(infoStr)"," *       console.log(info) // => { features:"," *                         //      [ 'cdt-list',"," *                         //        'pipelining',"," *                         //        'geo',"," *                         //        ...,"," *                         //        'udf' ] }"," *     }"," *   }"," *   client.info('features', infoCb, () => client.close())"," * })"," */","","function parseValue (value) {","  if (Number(value).toString() === value) {","    return Number(value)","  }","  return value","}","","function parseKeyValue (str, sep1, sep2) {","  var result = {}","  str.split(sep1).forEach(function (kv) {","    if (kv.length > 0) {","      kv = kv.split(sep2, 2)","      result[kv[0]] = parseValue(kv[1])","    }","  })","  return result","}","","/**"," * @function module:aerospike/info.parseInfo"," *"," * @summary Parses the info string returned from a cluster node into key-value pairs."," *"," * @param {string} info - The info string returned by the cluster node."," * @returns {Object} key-value pairs"," */","function parseInfo (info) {","  if (!info) return {}","  var infoHash = parseKeyValue(info, '\\n', '\\t')","  Object.keys(infoHash).forEach(function (key) {","    var value = infoHash[key]","    if ((typeof value === 'string') && value.indexOf(';') >= 0) {","      if (value.indexOf('=') >= 0) {","        value = parseKeyValue(value, ';', '=')","      } else {","        value = value.split(';')","      }","      infoHash[key] = value","    }","  })","  return infoHash","}","","module.exports = {","  parseInfo: parseInfo","}",""],"l":{"47":1,"48":0,"49":0,"51":0,"54":1,"55":0,"56":0,"57":0,"58":0,"59":0,"62":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"82":0,"84":0,"87":0,"90":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/job.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/job.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":1,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"Job","line":28,"loc":{"start":{"line":28,"column":0},"end":{"line":28,"column":37}}},"2":{"name":"(anonymous_2)","line":34,"loc":{"start":{"line":34,"column":22},"end":{"line":34,"column":34}}},"3":{"name":"(anonymous_3)","line":44,"loc":{"start":{"line":44,"column":20},"end":{"line":44,"column":70}}},"4":{"name":"(anonymous_4)","line":48,"loc":{"start":{"line":48,"column":13},"end":{"line":48,"column":25}}},"5":{"name":"(anonymous_5)","line":49,"loc":{"start":{"line":49,"column":19},"end":{"line":49,"column":40}}},"6":{"name":"(anonymous_6)","line":69,"loc":{"start":{"line":69,"column":29},"end":{"line":69,"column":45}}},"7":{"name":"(anonymous_7)","line":78,"loc":{"start":{"line":78,"column":28},"end":{"line":78,"column":48}}},"8":{"name":"(anonymous_8)","line":80,"loc":{"start":{"line":80,"column":12},"end":{"line":80,"column":33}}},"9":{"name":"(anonymous_9)","line":123,"loc":{"start":{"line":123,"column":21},"end":{"line":123,"column":49}}},"10":{"name":"(anonymous_10)","line":139,"loc":{"start":{"line":139,"column":30},"end":{"line":139,"column":64}}},"11":{"name":"(anonymous_11)","line":146,"loc":{"start":{"line":146,"column":47},"end":{"line":146,"column":62}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":35}},"3":{"start":{"line":28,"column":0},"end":{"line":32,"column":1}},"4":{"start":{"line":29,"column":2},"end":{"line":29,"column":22}},"5":{"start":{"line":30,"column":2},"end":{"line":30,"column":20}},"6":{"start":{"line":31,"column":2},"end":{"line":31,"column":22}},"7":{"start":{"line":34,"column":0},"end":{"line":36,"column":1}},"8":{"start":{"line":35,"column":2},"end":{"line":35,"column":60}},"9":{"start":{"line":44,"column":0},"end":{"line":64,"column":1}},"10":{"start":{"line":45,"column":2},"end":{"line":45,"column":55}},"11":{"start":{"line":46,"column":2},"end":{"line":46,"column":18}},"12":{"start":{"line":47,"column":2},"end":{"line":47,"column":28}},"13":{"start":{"line":48,"column":2},"end":{"line":62,"column":3}},"14":{"start":{"line":49,"column":4},"end":{"line":61,"column":6}},"15":{"start":{"line":50,"column":6},"end":{"line":60,"column":7}},"16":{"start":{"line":51,"column":8},"end":{"line":53,"column":9}},"17":{"start":{"line":52,"column":10},"end":{"line":52,"column":30}},"18":{"start":{"line":54,"column":8},"end":{"line":57,"column":9}},"19":{"start":{"line":55,"column":10},"end":{"line":55,"column":23}},"20":{"start":{"line":56,"column":10},"end":{"line":56,"column":31}},"21":{"start":{"line":58,"column":13},"end":{"line":60,"column":7}},"22":{"start":{"line":59,"column":8},"end":{"line":59,"column":47}},"23":{"start":{"line":63,"column":2},"end":{"line":63,"column":8}},"24":{"start":{"line":69,"column":0},"end":{"line":71,"column":1}},"25":{"start":{"line":70,"column":2},"end":{"line":70,"column":49}},"26":{"start":{"line":78,"column":0},"end":{"line":88,"column":1}},"27":{"start":{"line":79,"column":2},"end":{"line":79,"column":17}},"28":{"start":{"line":80,"column":2},"end":{"line":87,"column":4}},"29":{"start":{"line":81,"column":4},"end":{"line":86,"column":5}},"30":{"start":{"line":82,"column":6},"end":{"line":82,"column":19}},"31":{"start":{"line":84,"column":6},"end":{"line":84,"column":45}},"32":{"start":{"line":85,"column":6},"end":{"line":85,"column":31}},"33":{"start":{"line":123,"column":0},"end":{"line":129,"column":1}},"34":{"start":{"line":124,"column":2},"end":{"line":127,"column":3}},"35":{"start":{"line":125,"column":4},"end":{"line":125,"column":21}},"36":{"start":{"line":126,"column":4},"end":{"line":126,"column":17}},"37":{"start":{"line":128,"column":2},"end":{"line":128,"column":81}},"38":{"start":{"line":139,"column":0},"end":{"line":149,"column":1}},"39":{"start":{"line":140,"column":2},"end":{"line":143,"column":3}},"40":{"start":{"line":141,"column":4},"end":{"line":141,"column":27}},"41":{"start":{"line":142,"column":4},"end":{"line":142,"column":23}},"42":{"start":{"line":144,"column":2},"end":{"line":144,"column":26}},"43":{"start":{"line":145,"column":2},"end":{"line":145,"column":47}},"44":{"start":{"line":146,"column":2},"end":{"line":148,"column":4}},"45":{"start":{"line":147,"column":4},"end":{"line":147,"column":41}},"46":{"start":{"line":171,"column":0},"end":{"line":171,"column":20}}},"branchMap":{"1":{"line":45,"type":"binary-expr","locations":[{"start":{"line":45,"column":17},"end":{"line":45,"column":29}},{"start":{"line":45,"column":33},"end":{"line":45,"column":55}}]},"2":{"line":50,"type":"if","locations":[{"start":{"line":50,"column":6},"end":{"line":50,"column":6}},{"start":{"line":50,"column":6},"end":{"line":50,"column":6}}]},"3":{"line":50,"type":"binary-expr","locations":[{"start":{"line":50,"column":10},"end":{"line":50,"column":13}},{"start":{"line":50,"column":17},"end":{"line":50,"column":21}}]},"4":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":8},"end":{"line":51,"column":8}},{"start":{"line":51,"column":8},"end":{"line":51,"column":8}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":8},"end":{"line":54,"column":8}},{"start":{"line":54,"column":8},"end":{"line":54,"column":8}}]},"6":{"line":58,"type":"if","locations":[{"start":{"line":58,"column":13},"end":{"line":58,"column":13}},{"start":{"line":58,"column":13},"end":{"line":58,"column":13}}]},"7":{"line":81,"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":81,"column":4}},{"start":{"line":81,"column":4},"end":{"line":81,"column":4}}]},"8":{"line":124,"type":"if","locations":[{"start":{"line":124,"column":2},"end":{"line":124,"column":2}},{"start":{"line":124,"column":2},"end":{"line":124,"column":2}}]},"9":{"line":140,"type":"if","locations":[{"start":{"line":140,"column":2},"end":{"line":140,"column":2}},{"start":{"line":140,"column":2},"end":{"line":140,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const as = require('../build/Release/aerospike.node')","","const DEFAULT_POLL_INTERVALL = 1000","","/**"," * @class Job"," * @classdesc Potentially long-running background job."," *"," * @see {@link Scan#background}"," * @see {@link Query#background}"," */","function Job (client, jobID, module) {","  this.client = client","  this.jobID = jobID","  this.module = module","}","","Job.safeRandomJobID = function () {","  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER)","}","","/**"," * Repeatedly execute the given status function until it either indicates that"," * the job has completed or returns an error."," *"," * @private"," */","Job.pollUntilDone = function (statusFunction, pollInterval, callback) {","  pollInterval = pollInterval || DEFAULT_POLL_INTERVALL","  var timer = null","  var callbackCalled = false","  var poll = function () {","    statusFunction(function (err, done) {","      if (err || done) {","        if (timer) {","          clearInterval(timer)","        }","        if (callbackCalled === false) {","          callback(err)","          callbackCalled = true","        }","      } else if (!timer) {","        timer = setInterval(poll, pollInterval)","      }","    })","  }","  poll()","}","","/**"," * @private"," */","Job.prototype.hasCompleted = function (info) {","  return (info.status === as.jobStatus.COMPLETED)","}","","/**"," * Fetch job info once to check if the job has completed."," *"," * @private"," */","Job.prototype.checkStatus = function (callback) {","  var self = this","  this.info(function (err, info) {","    if (err) {","      callback(err)","    } else {","      var completed = self.hasCompleted(info)","      callback(null, completed)","    }","  })","}","","/**"," * @function Job#info"," *"," * @summary Check the progress of a background job running on the database."," *"," * @param {number} [pollInterval=1000] - Interval in milliseconds to use when polling the cluster nodes."," * @param {Client~InfoPolicy} [policy] - The Info Policy to use for this operation."," * @param {Job~infoCallback} callback - The function to call with the job info response."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var scan = client.scan('test', 'demo')"," *   scan.background('myUdfModule', 'myUdfFunction', (error, job) => {"," *     if (error) throw error"," *     var timer = setInterval(() => {"," *       job.info((error, info) => {"," *         if (error) throw error"," *         console.info('scan status: %d (%d%% complete, %d records scanned)', info.status, info.progressPct, info.recordsRead)"," *         if (info.status === Aerospike.jobStatus.COMPLETED) {"," *           console.info('scan completed!')"," *           clearInterval(timer)"," *           client.close()"," *         }"," *       })"," *     }, 1000)"," *   })"," * })"," */","Job.prototype.info = function (policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  }","  this.client.sendCommand('jobInfo', [this.jobID, this.module, policy], callback)","}","","/**"," * @function Job#waitUntilDone"," *"," * @summary Wait until the task has been completed."," *"," * @param {number} [pollInterval=1000] - Interval in milliseconds to use when polling the cluster nodes."," * @param {Job~doneCallback} callback - The function to call when the task has completed."," */","Job.prototype.waitUntilDone = function (pollInterval, callback) {","  if (typeof pollInterval === 'function') {","    callback = pollInterval","    pollInterval = null","  }","  var client = this.client","  var checkStatus = this.checkStatus.bind(this)","  Job.pollUntilDone(checkStatus, pollInterval, function (err) {","    client.callbackHandler(callback, err)","  })","}","","/**"," * @callback Job~doneCallback"," *"," * @summary Callback function called when a job has completed."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," */","","/**"," * @callback Job~infoCallback"," *"," * @summary The function called with the job info response."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {object} [info] - The job info."," * @param {number} [info.status] - Status of the job. See {@link module:aerospike.jobStatus}."," * @param {number} [info.progressPct] - Progress estimate for the job, as percentage."," * @param {number} [info.recordsRead] - How many records have been processed."," */","","module.exports = Job",""],"l":{"17":1,"19":1,"28":1,"29":0,"30":0,"31":0,"34":1,"35":0,"44":1,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"54":0,"55":0,"56":0,"58":0,"59":0,"63":0,"69":1,"70":0,"78":1,"79":0,"80":0,"81":0,"82":0,"84":0,"85":0,"123":1,"124":0,"125":0,"126":0,"128":0,"139":1,"140":0,"141":0,"142":0,"144":0,"145":0,"146":0,"147":0,"171":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/llist.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/llist.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":1,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":0,"50":0,"51":0,"52":1,"53":0,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":1,"61":0,"62":1,"63":0,"64":0,"65":0,"66":0,"67":0,"68":1,"69":0,"70":1,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":1,"80":0,"81":1,"82":0,"83":1,"84":0,"85":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"llistError","line":23,"loc":{"start":{"line":23,"column":0},"end":{"line":23,"column":36}}},"2":{"name":"checkArgs","line":39,"loc":{"start":{"line":39,"column":0},"end":{"line":39,"column":40}}},"3":{"name":"LargeList","line":111,"loc":{"start":{"line":111,"column":0},"end":{"line":111,"column":69}}},"4":{"name":"(anonymous_4)","line":127,"loc":{"start":{"line":127,"column":17},"end":{"line":127,"column":69}}},"5":{"name":"(anonymous_5)","line":191,"loc":{"start":{"line":191,"column":26},"end":{"line":191,"column":53}}},"6":{"name":"(anonymous_6)","line":230,"loc":{"start":{"line":230,"column":29},"end":{"line":230,"column":56}}},"7":{"name":"(anonymous_7)","line":263,"loc":{"start":{"line":263,"column":29},"end":{"line":263,"column":56}}},"8":{"name":"(anonymous_8)","line":289,"loc":{"start":{"line":289,"column":34},"end":{"line":289,"column":72}}},"9":{"name":"find","line":319,"loc":{"start":{"line":319,"column":27},"end":{"line":319,"column":69}}},"10":{"name":"(anonymous_10)","line":346,"loc":{"start":{"line":346,"column":29},"end":{"line":346,"column":61}}},"11":{"name":"(anonymous_11)","line":377,"loc":{"start":{"line":377,"column":32},"end":{"line":377,"column":82}}},"12":{"name":"(anonymous_12)","line":404,"loc":{"start":{"line":404,"column":27},"end":{"line":404,"column":47}}},"13":{"name":"(anonymous_13)","line":424,"loc":{"start":{"line":424,"column":30},"end":{"line":424,"column":50}}},"14":{"name":"(anonymous_14)","line":444,"loc":{"start":{"line":444,"column":27},"end":{"line":444,"column":47}}},"15":{"name":"(anonymous_15)","line":464,"loc":{"start":{"line":464,"column":32},"end":{"line":464,"column":52}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":66}},"2":{"start":{"line":23,"column":0},"end":{"line":37,"column":1}},"3":{"start":{"line":24,"column":2},"end":{"line":24,"column":46}},"4":{"start":{"line":25,"column":2},"end":{"line":25,"column":44}},"5":{"start":{"line":26,"column":2},"end":{"line":35,"column":3}},"6":{"start":{"line":27,"column":4},"end":{"line":27,"column":29}},"7":{"start":{"line":28,"column":4},"end":{"line":28,"column":42}},"8":{"start":{"line":29,"column":4},"end":{"line":34,"column":5}},"9":{"start":{"line":30,"column":6},"end":{"line":30,"column":27}},"10":{"start":{"line":31,"column":6},"end":{"line":31,"column":27}},"11":{"start":{"line":32,"column":6},"end":{"line":32,"column":27}},"12":{"start":{"line":33,"column":6},"end":{"line":33,"column":11}},"13":{"start":{"line":36,"column":2},"end":{"line":36,"column":14}},"14":{"start":{"line":39,"column":0},"end":{"line":63,"column":1}},"15":{"start":{"line":41,"column":2},"end":{"line":41,"column":29}},"16":{"start":{"line":45,"column":2},"end":{"line":47,"column":3}},"17":{"start":{"line":46,"column":4},"end":{"line":46,"column":74}},"18":{"start":{"line":53,"column":2},"end":{"line":60,"column":3}},"19":{"start":{"line":54,"column":4},"end":{"line":59,"column":5}},"20":{"start":{"line":55,"column":6},"end":{"line":55,"column":62}},"21":{"start":{"line":56,"column":6},"end":{"line":56,"column":40}},"22":{"start":{"line":57,"column":6},"end":{"line":57,"column":32}},"23":{"start":{"line":58,"column":6},"end":{"line":58,"column":15}},"24":{"start":{"line":62,"column":2},"end":{"line":62,"column":10}},"25":{"start":{"line":111,"column":0},"end":{"line":154,"column":1}},"26":{"start":{"line":112,"column":2},"end":{"line":112,"column":16}},"27":{"start":{"line":113,"column":2},"end":{"line":113,"column":24}},"28":{"start":{"line":114,"column":2},"end":{"line":114,"column":32}},"29":{"start":{"line":115,"column":2},"end":{"line":115,"column":34}},"30":{"start":{"line":116,"column":2},"end":{"line":116,"column":23}},"31":{"start":{"line":118,"column":2},"end":{"line":118,"column":17}},"32":{"start":{"line":127,"column":2},"end":{"line":153,"column":3}},"33":{"start":{"line":128,"column":4},"end":{"line":130,"column":5}},"34":{"start":{"line":129,"column":6},"end":{"line":129,"column":22}},"35":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"36":{"start":{"line":133,"column":6},"end":{"line":133,"column":15}},"37":{"start":{"line":135,"column":4},"end":{"line":135,"column":32}},"38":{"start":{"line":136,"column":4},"end":{"line":144,"column":5}},"39":{"start":{"line":137,"column":6},"end":{"line":143,"column":7}},"40":{"start":{"line":138,"column":8},"end":{"line":138,"column":39}},"41":{"start":{"line":139,"column":8},"end":{"line":139,"column":41}},"42":{"start":{"line":140,"column":8},"end":{"line":140,"column":37}},"43":{"start":{"line":142,"column":8},"end":{"line":142,"column":32}},"44":{"start":{"line":145,"column":4},"end":{"line":145,"column":35}},"45":{"start":{"line":146,"column":4},"end":{"line":150,"column":5}},"46":{"start":{"line":151,"column":4},"end":{"line":151,"column":41}},"47":{"start":{"line":152,"column":4},"end":{"line":152,"column":61}},"48":{"start":{"line":191,"column":0},"end":{"line":197,"column":1}},"49":{"start":{"line":192,"column":2},"end":{"line":196,"column":3}},"50":{"start":{"line":193,"column":4},"end":{"line":193,"column":41}},"51":{"start":{"line":195,"column":4},"end":{"line":195,"column":37}},"52":{"start":{"line":230,"column":0},"end":{"line":236,"column":1}},"53":{"start":{"line":231,"column":2},"end":{"line":235,"column":3}},"54":{"start":{"line":232,"column":4},"end":{"line":232,"column":44}},"55":{"start":{"line":234,"column":4},"end":{"line":234,"column":40}},"56":{"start":{"line":263,"column":0},"end":{"line":269,"column":1}},"57":{"start":{"line":264,"column":2},"end":{"line":268,"column":3}},"58":{"start":{"line":265,"column":4},"end":{"line":265,"column":44}},"59":{"start":{"line":267,"column":4},"end":{"line":267,"column":40}},"60":{"start":{"line":289,"column":0},"end":{"line":291,"column":1}},"61":{"start":{"line":290,"column":2},"end":{"line":290,"column":44}},"62":{"start":{"line":319,"column":0},"end":{"line":326,"column":1}},"63":{"start":{"line":320,"column":2},"end":{"line":320,"column":34}},"64":{"start":{"line":321,"column":2},"end":{"line":325,"column":3}},"65":{"start":{"line":322,"column":4},"end":{"line":322,"column":38}},"66":{"start":{"line":323,"column":9},"end":{"line":325,"column":3}},"67":{"start":{"line":324,"column":4},"end":{"line":324,"column":41}},"68":{"start":{"line":346,"column":0},"end":{"line":348,"column":1}},"69":{"start":{"line":347,"column":2},"end":{"line":347,"column":41}},"70":{"start":{"line":377,"column":0},"end":{"line":386,"column":1}},"71":{"start":{"line":378,"column":2},"end":{"line":378,"column":34}},"72":{"start":{"line":379,"column":2},"end":{"line":385,"column":3}},"73":{"start":{"line":380,"column":4},"end":{"line":380,"column":39}},"74":{"start":{"line":381,"column":9},"end":{"line":385,"column":3}},"75":{"start":{"line":382,"column":4},"end":{"line":382,"column":42}},"76":{"start":{"line":384,"column":4},"end":{"line":384,"column":74}},"77":{"start":{"line":404,"column":0},"end":{"line":406,"column":1}},"78":{"start":{"line":405,"column":2},"end":{"line":405,"column":36}},"79":{"start":{"line":424,"column":0},"end":{"line":426,"column":1}},"80":{"start":{"line":425,"column":2},"end":{"line":425,"column":39}},"81":{"start":{"line":444,"column":0},"end":{"line":446,"column":1}},"82":{"start":{"line":445,"column":2},"end":{"line":445,"column":36}},"83":{"start":{"line":464,"column":0},"end":{"line":466,"column":1}},"84":{"start":{"line":465,"column":2},"end":{"line":465,"column":38}},"85":{"start":{"line":494,"column":0},"end":{"line":494,"column":26}}},"branchMap":{"1":{"line":29,"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":29,"column":4}},{"start":{"line":29,"column":4},"end":{"line":29,"column":4}}]},"2":{"line":29,"type":"binary-expr","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":13}},{"start":{"line":29,"column":17},"end":{"line":29,"column":39}}]},"3":{"line":45,"type":"if","locations":[{"start":{"line":45,"column":2},"end":{"line":45,"column":2}},{"start":{"line":45,"column":2},"end":{"line":45,"column":2}}]},"4":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":2},"end":{"line":53,"column":2}},{"start":{"line":53,"column":2},"end":{"line":53,"column":2}}]},"5":{"line":54,"type":"if","locations":[{"start":{"line":54,"column":4},"end":{"line":54,"column":4}},{"start":{"line":54,"column":4},"end":{"line":54,"column":4}}]},"6":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":4},"end":{"line":128,"column":4}},{"start":{"line":128,"column":4},"end":{"line":128,"column":4}}]},"7":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"8":{"line":137,"type":"if","locations":[{"start":{"line":137,"column":6},"end":{"line":137,"column":6}},{"start":{"line":137,"column":6},"end":{"line":137,"column":6}}]},"9":{"line":192,"type":"if","locations":[{"start":{"line":192,"column":2},"end":{"line":192,"column":2}},{"start":{"line":192,"column":2},"end":{"line":192,"column":2}}]},"10":{"line":231,"type":"if","locations":[{"start":{"line":231,"column":2},"end":{"line":231,"column":2}},{"start":{"line":231,"column":2},"end":{"line":231,"column":2}}]},"11":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":2},"end":{"line":264,"column":2}},{"start":{"line":264,"column":2},"end":{"line":264,"column":2}}]},"12":{"line":321,"type":"if","locations":[{"start":{"line":321,"column":2},"end":{"line":321,"column":2}},{"start":{"line":321,"column":2},"end":{"line":321,"column":2}}]},"13":{"line":323,"type":"if","locations":[{"start":{"line":323,"column":9},"end":{"line":323,"column":9}},{"start":{"line":323,"column":9},"end":{"line":323,"column":9}}]},"14":{"line":379,"type":"if","locations":[{"start":{"line":379,"column":2},"end":{"line":379,"column":2}},{"start":{"line":379,"column":2},"end":{"line":379,"column":2}}]},"15":{"line":381,"type":"if","locations":[{"start":{"line":381,"column":9},"end":{"line":381,"column":9}},{"start":{"line":381,"column":9},"end":{"line":381,"column":9}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const LLIST_STRACE_RE = /at LargeList\\.(\\w+) \\((.*):(\\d+):(\\d+)\\)/ // pattern for parsing a line of a stack trace","","// Creates a new aerospike.error object with the given error code and message.","// The function name, file name and line number for the error are set","// automatically by inspecting the current stack trace and looking for the last","// LargeList function call on it.","function llistError (code, message) {","  var error = { code: code, message: message }","  var strace = new Error().stack.split('\\n')","  while (strace.length > 0) {","    var line = strace.shift()","    var match = LLIST_STRACE_RE.exec(line)","    if (match && match[1] !== 'execute') {","      error.func = match[1]","      error.file = match[2]","      error.line = match[3]","      break","    }","  }","  return error","}","","function checkArgs (args, expArgLength) {","  // number of arguments passed to the given function.","  var arglength = args.length","","  // last argument must always be a callback.","  // error if it is not callback type.","  if (typeof args[arglength - 1] !== 'function') {","    throw new Error('Callback function must be passed for this async API')","  }","","  // for functions requiring fixed number of arguments","  // this check is performed.","  // If function does not have fixed number of arguments","  // this check is skipped.","  if (typeof expArgLength !== 'undefined') {","    if (arglength !== expArgLength) {","      var error = llistError(2, 'Invalid number of arguments')","      var callback = args[arglength - 1]","      callback(error, undefined)","      return -1","    }","  }","","  return 0","}","","/**"," * @class LargeList"," *"," * @classdesc Create and Manage a list within a single bin."," *"," * For more information, please refer to the section on"," * <a href=\"http://www.aerospike.com/docs/guide/ldt_guide.html\" title=\"Aerospike Large Data Types\">&uArr;Large Data Types (LDT)</a>"," * in the Aerospike technical documentation."," *"," * ### Large Data Types (LDT) Are Deprecated"," *"," * The Large Data Types (LDT) functionality is deprecated and"," * should no longer be used. All code that uses these interfaces should"," * transition to the List and SortedMaps APIs. Most applications can use a"," * variety of techniques such as bucketing to provide higher performance and"," * reliability using the new APIs. Please check out the"," * <a href=\"http://www.aerospike.com/docs/guide/ldt_guide.html\">&uArr;technical documentation</a>"," * for detailed information on LDT alternatives."," *"," * The discontinuation of support for the Large Data Type (LDT) feature was"," * announced on November 14, 2016 via the following blog post:"," * <a href=\"http://www.aerospike.com/blog/aerospike-ldt/\">http://www.aerospike.com/blog/aerospike-ldt/</a>."," *"," * @param {Key} key - The key used to locate the record in the cluster."," * @param {string} binName - Name of the LDT bin."," * @param {Client~ApplyPolicy} [policy] - The Apply Policy to use for this operation."," * @param {string} [createModule] - The LUA function name that initializes the"," * list configuration parameters; pass <code>null</code> for default list."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   var key          = new Aerospike.Key('test', 'demo', 'llistKey')"," *   var binName      = 'LDTbin'"," *   var policy       = { timeout: 1000 }"," *   var createModule = 'ListInitializer'"," *   var llist = client.LargeList(key, binName, policy, createModule)"," *   // operate on large list"," *   client.close()"," * })"," *"," */","function LargeList (client, key, binName, writePolicy, createModule) {","  this.key = key","  this.binName = binName","  this.writePolicy = writePolicy","  this.createModule = createModule","  this.module = 'llist'","","  var self = this","","  // Generic function to execute any LDT function.","  // Invokes udf execute with the corresponding LDT function name, file name as","  // llist - file in which all the LDT functions are implemented. Some function","  // applies an UDF/Filter on values returned by LDT. Those values are passed","  // as {module:\" \", funcname:\" \", args: \" \"} object. Parse the above object","  // format and populate UDFArgs accordingly. Position of the UDF arguments is","  // passed to parse effectively.","  this.execute = function (ldtFunc, ldtargs, arglength, udfPosition) {","    if (typeof udfPosition === 'undefined') {","      udfPosition = -1","    }","","    if (checkArgs(ldtargs, arglength) !== 0) {","      return -1","    }","    var udfargs = [this.binName]","    for (var i = 0; i < arglength - 1; i++) {","      if (udfPosition === i) {","        udfargs.push(ldtargs[i].module)","        udfargs.push(ldtargs[i].funcname)","        udfargs.push(ldtargs[i].args)","      } else {","        udfargs.push(ldtargs[i])","      }","    }","    udfargs.push(this.createModule)","    var udf = {","      module: this.module,","      funcname: ldtFunc,","      args: udfargs","    }","    var callback = ldtargs[arglength - 1]","    client.execute(self.key, udf, self.writePolicy, callback)","  }","}","","/**"," * @function LargeList#add"," *"," * @summary Adds a single value or an array of values to an existing Large"," * List."," *"," * @description"," *"," * The operation fails if the value's key exists and the list is configured for"," * unique keys."," *"," * If the value is a map, the key is identified by the <code>key</code> entry."," * Otherwise, the value is the key. If the large list does not exist, create it"," * using the specified <code>userModule</code> configuration."," *"," * @param {(*|Array.<*>)} value - Value(s) to add"," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example <caption>Adding a single value</caption>"," *"," * llist.add({'key': 'ldt_key', 'value': 'ldtvalue'}, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," *"," * @example <caption>Adding a list of values</caption>"," *"," * var valArray = [{'key': 'ldt_key', 'value': 'ldtvalue'}, {'key': 'ldt_array', 'value': 'ldtarrayvalue'}]"," * llist.add(valArray, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.add = function (value, callback) {","  if (Array.isArray(value)) {","    this.execute('add_all', arguments, 2)","  } else {","    this.execute('add', arguments, 2)","  }","}","","/**"," * @function LargeList#update"," *"," * @summary Update/add a single value or array of values depending on if the key exists or not."," *"," * @description"," *"," * If the value is a map, the key is identified by the <code>key</code> entry."," * Otherwise, the value is the key. If the large list does not exist, create it"," * using the specified <code>userModule</code> configuration."," *"," * @param {(*|Array.<*>)} value - Value(s) to update"," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example <caption>Updating a single value</caption>"," *"," * llist.update({'key': 'ldt_key', 'value': 'ldtupdatedvalue'}, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," *"," * @example <caption>Updating a list of values</caption>"," *"," * var valArray = [{'key': 'ldt_key', 'value': 'ldtupdatevalue'}, {'key': 'ldt_array', 'value': 'ldtarrayupdatedvalue'}]"," * llist.update(valArray, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.update = function (value, callback) {","  if (Array.isArray(value)) {","    this.execute('update_all', arguments, 2)","  } else {","    this.execute('update', arguments, 2)","  }","}","","/**"," * @function LargeList#remove"," *"," * @summary Deletes a single value or a list of values from the Large list."," *"," * @param {(*|Array.<*>)} value - Value(s) to delete."," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example <caption>Removing a single value</caption>"," *"," * llist.remove({'key': 'ldt_key'}, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," *"," * @example <caption>Removing a list of values</caption>"," *"," * var valArray = [{'key': 'ldt_key'}, {'key': 'ldt_array'}]"," * llist.remove(valArray, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.remove = function (value, callback) {","  if (Array.isArray(value)) {","    this.execute('remove_all', arguments, 2)","  } else {","    this.execute('remove', arguments, 2)","  }","}","","/**"," * @function LargeList#removeRange"," *"," * @summary Removes values from the list between a given start and end value."," *"," * @param {*} valBegin - Low value of the range (inclusive)"," * @param {*} valEnd - High value of the range (inclusive)"," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * llist.remove('begin', 'end', (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.removeRange = function (valBegin, valEnd, callback) {","  this.execute('remove_range', arguments, 3)","}","","/**"," * @function LargeList#find"," *"," * @summary Select values from the list."," *"," * @param {*} value - Value to select"," * @param {Object} [filterArgs] - UDF arguments for specifying LUA file, function and function arguments."," * @param {LargeList~listCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example <caption>Selecting a single value</caption>"," *"," * llist.find('search_key', (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," *"," * @example <caption>Using a filter function</caption>"," *"," * var filter = {module: 'udf_module', funcname: 'udf_function', args: ['abc', 123, 4.5]}"," * llist.find('search_key', filter, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.find = function find (val, filterArgs, callback) {","  var arglength = arguments.length","  if (arglength === 2) {","    this.execute('find', arguments, 2)","  } else if (arglength === 3) {","    this.execute('find', arguments, 3, 1)","  }","}","","/**"," * @function LargeList#filter"," *"," * @summary Select values from the list and apply specified LUA filter."," *"," * @param {Object} filterArgs - UDF arguments for specifying LUA file, function and function arguments."," * @param {LargeList~listCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * var udfargs = {module: 'udf_module', funcname: 'udf_function', args: ['abc', 123, 4.5]}"," * llist.filter((error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.filter = function (filterArgs, callback) {","  this.execute('filter', arguments, 1, 0)","}","","/**"," * @function LargeList#findRange"," *"," * @summary Select a range of values from the Large List."," *"," * @param {*} valBegin - Low value of the range (inclusive)"," * @param {*} valEnd - High value of the range (inclusive)"," * @param {Object} [filterArgs] - UDF arguments for specifying LUA file, function and function arguments."," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example <caption>Finding a range of values</caption>"," *"," * llist.findRange('begin', 'end', (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," *"," * @example <caption>Finding a range of values then applying a filter on it</caption>"," *"," * var filter = {module: 'udf_module', funcname: 'udf_function', args: ['abc', 123, 4.5]}"," * llist.findRange('begin', 'end', filter, (error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.findRange = function (valBegin, valEnd, filterArgs, callback) {","  var arglength = arguments.length","  if (arglength === 3) {","    this.execute('range', arguments, 3)","  } else if (arglength === 4) {","    this.execute('range', arguments, 4, 2)","  } else {","    throw new Error('LargeList.findRange expects either 3 or 4 arguments')","  }","}","","/**"," * @function LargeList#scan"," *"," * @summary Select all the objects in the list."," *"," * @param {LargeList~listCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * llist.scan((error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.scan = function (callback) {","  this.execute('scan', arguments, 1)","}","","/**"," * @function LargeList#destroy"," *"," * @summary Destroy the bin containing the Large List."," *"," * @param {LargeList~doneCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * llist.destroy((error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.destroy = function (callback) {","  this.execute('destroy', arguments, 1)","}","","/**"," * @function LargeList#size"," *"," * @summary Retrieves the size of the list."," *"," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * llist.size((error, respone) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.size = function (callback) {","  this.execute('size', arguments, 1)","}","","/**"," * @function LargeList#getConfig"," *"," * @summary Retrieves the list configuration parameters."," *"," * @param {LargeList~valueCallback} callback - The function to call when the operation completes with the result of the operation."," *"," * @deprecated since v2.4.4"," *"," * @example"," *"," * llist.getConfig((error, response) => {"," *   if (error) throw error"," *   // handle success"," * })"," */","LargeList.prototype.getConfig = function (callback) {","  this.execute('config', arguments, 1)","}","","/**"," * @callback LargeList~doneCallback"," *"," * @summary Callback function called when an operation has completed."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," */","","/**"," * @callback LargeList~valueCallback"," *"," * @summary Callback function called when an operation has completed."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {*} response - Value returned by the UDF function."," */","","/**"," * @callback LargeList~listCallback"," *"," * @summary Callback function called when an operation has completed."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {Array.<*>} list - List of entries selected."," */","","module.exports = LargeList",""],"l":{"17":1,"23":1,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"36":0,"39":1,"41":0,"45":0,"46":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"62":0,"111":1,"112":0,"113":0,"114":0,"115":0,"116":0,"118":0,"127":0,"128":0,"129":0,"132":0,"133":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"142":0,"145":0,"146":0,"151":0,"152":0,"191":1,"192":0,"193":0,"195":0,"230":1,"231":0,"232":0,"234":0,"263":1,"264":0,"265":0,"267":0,"289":1,"290":0,"319":1,"320":0,"321":0,"322":0,"323":0,"324":0,"346":1,"347":0,"377":1,"378":0,"379":0,"380":0,"381":0,"382":0,"384":0,"404":1,"405":0,"424":1,"425":0,"444":1,"445":0,"464":1,"465":0,"494":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/query.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/query.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":1,"23":0,"24":0,"25":1,"26":0,"27":1,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":1,"48":1,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":1,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"Query","line":159,"loc":{"start":{"line":159,"column":0},"end":{"line":159,"column":42}}},"2":{"name":"(anonymous_2)","line":224,"loc":{"start":{"line":224,"column":25},"end":{"line":224,"column":41}}},"3":{"name":"(anonymous_3)","line":258,"loc":{"start":{"line":258,"column":24},"end":{"line":258,"column":45}}},"4":{"name":"(anonymous_4)","line":272,"loc":{"start":{"line":272,"column":25},"end":{"line":272,"column":68}}},"5":{"name":"(anonymous_5)","line":305,"loc":{"start":{"line":305,"column":26},"end":{"line":305,"column":68}}},"6":{"name":"(anonymous_6)","line":311,"loc":{"start":{"line":311,"column":16},"end":{"line":311,"column":52}}},"7":{"name":"(anonymous_7)","line":343,"loc":{"start":{"line":343,"column":24},"end":{"line":343,"column":85}}},"8":{"name":"(anonymous_8)","line":377,"loc":{"start":{"line":377,"column":29},"end":{"line":377,"column":99}}},"9":{"name":"(anonymous_9)","line":395,"loc":{"start":{"line":395,"column":89},"end":{"line":395,"column":104}}},"10":{"name":"assertValidQueryOptions","line":404,"loc":{"start":{"line":404,"column":0},"end":{"line":404,"column":43}}},"11":{"name":"(anonymous_11)","line":406,"loc":{"start":{"line":406,"column":44},"end":{"line":406,"column":59}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":28}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":47}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":32}},"5":{"start":{"line":22,"column":0},"end":{"line":22,"column":28}},"6":{"start":{"line":159,"column":0},"end":{"line":212,"column":1}},"7":{"start":{"line":160,"column":2},"end":{"line":163,"column":3}},"8":{"start":{"line":161,"column":4},"end":{"line":161,"column":17}},"9":{"start":{"line":162,"column":4},"end":{"line":162,"column":14}},"10":{"start":{"line":164,"column":2},"end":{"line":164,"column":25}},"11":{"start":{"line":165,"column":2},"end":{"line":165,"column":34}},"12":{"start":{"line":167,"column":2},"end":{"line":167,"column":22}},"13":{"start":{"line":173,"column":2},"end":{"line":173,"column":14}},"14":{"start":{"line":179,"column":2},"end":{"line":179,"column":16}},"15":{"start":{"line":192,"column":2},"end":{"line":192,"column":38}},"16":{"start":{"line":203,"column":2},"end":{"line":203,"column":32}},"17":{"start":{"line":211,"column":2},"end":{"line":211,"column":24}},"18":{"start":{"line":224,"column":0},"end":{"line":230,"column":1}},"19":{"start":{"line":225,"column":2},"end":{"line":229,"column":3}},"20":{"start":{"line":226,"column":4},"end":{"line":226,"column":24}},"21":{"start":{"line":228,"column":4},"end":{"line":228,"column":57}},"22":{"start":{"line":258,"column":0},"end":{"line":261,"column":1}},"23":{"start":{"line":259,"column":2},"end":{"line":259,"column":35}},"24":{"start":{"line":260,"column":2},"end":{"line":260,"column":30}},"25":{"start":{"line":272,"column":0},"end":{"line":278,"column":1}},"26":{"start":{"line":273,"column":2},"end":{"line":277,"column":3}},"27":{"start":{"line":305,"column":0},"end":{"line":326,"column":1}},"28":{"start":{"line":306,"column":2},"end":{"line":306,"column":44}},"29":{"start":{"line":307,"column":2},"end":{"line":307,"column":39}},"30":{"start":{"line":307,"column":14},"end":{"line":307,"column":39}},"31":{"start":{"line":308,"column":2},"end":{"line":308,"column":42}},"32":{"start":{"line":308,"column":15},"end":{"line":308,"column":42}},"33":{"start":{"line":309,"column":2},"end":{"line":309,"column":36}},"34":{"start":{"line":309,"column":13},"end":{"line":309,"column":36}},"35":{"start":{"line":310,"column":2},"end":{"line":310,"column":52}},"36":{"start":{"line":311,"column":2},"end":{"line":323,"column":3}},"37":{"start":{"line":312,"column":4},"end":{"line":321,"column":5}},"38":{"start":{"line":313,"column":6},"end":{"line":313,"column":33}},"39":{"start":{"line":314,"column":11},"end":{"line":321,"column":5}},"40":{"start":{"line":315,"column":6},"end":{"line":315,"column":24}},"41":{"start":{"line":317,"column":6},"end":{"line":319,"column":7}},"42":{"start":{"line":318,"column":8},"end":{"line":318,"column":59}},"43":{"start":{"line":320,"column":6},"end":{"line":320,"column":44}},"44":{"start":{"line":322,"column":4},"end":{"line":322,"column":26}},"45":{"start":{"line":324,"column":2},"end":{"line":324,"column":74}},"46":{"start":{"line":325,"column":2},"end":{"line":325,"column":15}},"47":{"start":{"line":328,"column":0},"end":{"line":328,"column":49}},"48":{"start":{"line":343,"column":0},"end":{"line":357,"column":1}},"49":{"start":{"line":344,"column":2},"end":{"line":350,"column":3}},"50":{"start":{"line":345,"column":4},"end":{"line":345,"column":21}},"51":{"start":{"line":346,"column":4},"end":{"line":346,"column":17}},"52":{"start":{"line":347,"column":9},"end":{"line":350,"column":3}},"53":{"start":{"line":348,"column":4},"end":{"line":348,"column":22}},"54":{"start":{"line":349,"column":4},"end":{"line":349,"column":18}},"55":{"start":{"line":351,"column":2},"end":{"line":355,"column":3}},"56":{"start":{"line":356,"column":2},"end":{"line":356,"column":84}},"57":{"start":{"line":377,"column":0},"end":{"line":400,"column":1}},"58":{"start":{"line":378,"column":2},"end":{"line":387,"column":3}},"59":{"start":{"line":379,"column":4},"end":{"line":379,"column":22}},"60":{"start":{"line":380,"column":4},"end":{"line":380,"column":18}},"61":{"start":{"line":381,"column":9},"end":{"line":387,"column":3}},"62":{"start":{"line":382,"column":4},"end":{"line":382,"column":21}},"63":{"start":{"line":383,"column":4},"end":{"line":383,"column":17}},"64":{"start":{"line":384,"column":9},"end":{"line":387,"column":3}},"65":{"start":{"line":385,"column":4},"end":{"line":385,"column":22}},"66":{"start":{"line":386,"column":4},"end":{"line":386,"column":18}},"67":{"start":{"line":388,"column":2},"end":{"line":392,"column":3}},"68":{"start":{"line":393,"column":2},"end":{"line":393,"column":44}},"69":{"start":{"line":394,"column":2},"end":{"line":394,"column":17}},"70":{"start":{"line":395,"column":2},"end":{"line":399,"column":4}},"71":{"start":{"line":396,"column":4},"end":{"line":396,"column":59}},"72":{"start":{"line":397,"column":4},"end":{"line":397,"column":51}},"73":{"start":{"line":398,"column":4},"end":{"line":398,"column":22}},"74":{"start":{"line":404,"column":0},"end":{"line":411,"column":1}},"75":{"start":{"line":405,"column":2},"end":{"line":405,"column":86}},"76":{"start":{"line":406,"column":2},"end":{"line":408,"column":4}},"77":{"start":{"line":407,"column":4},"end":{"line":407,"column":31}},"78":{"start":{"line":409,"column":2},"end":{"line":409,"column":120}},"79":{"start":{"line":410,"column":2},"end":{"line":410,"column":101}},"80":{"start":{"line":429,"column":0},"end":{"line":429,"column":22}}},"branchMap":{"1":{"line":160,"type":"if","locations":[{"start":{"line":160,"column":2},"end":{"line":160,"column":2}},{"start":{"line":160,"column":2},"end":{"line":160,"column":2}}]},"2":{"line":164,"type":"binary-expr","locations":[{"start":{"line":164,"column":12},"end":{"line":164,"column":19}},{"start":{"line":164,"column":23},"end":{"line":164,"column":25}}]},"3":{"line":192,"type":"binary-expr","locations":[{"start":{"line":192,"column":17},"end":{"line":192,"column":32}},{"start":{"line":192,"column":36},"end":{"line":192,"column":38}}]},"4":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":2},"end":{"line":225,"column":2}},{"start":{"line":225,"column":2},"end":{"line":225,"column":2}}]},"5":{"line":259,"type":"binary-expr","locations":[{"start":{"line":259,"column":17},"end":{"line":259,"column":29}},{"start":{"line":259,"column":33},"end":{"line":259,"column":35}}]},"6":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":2},"end":{"line":307,"column":2}},{"start":{"line":307,"column":2},"end":{"line":307,"column":2}}]},"7":{"line":308,"type":"if","locations":[{"start":{"line":308,"column":2},"end":{"line":308,"column":2}},{"start":{"line":308,"column":2},"end":{"line":308,"column":2}}]},"8":{"line":309,"type":"if","locations":[{"start":{"line":309,"column":2},"end":{"line":309,"column":2}},{"start":{"line":309,"column":2},"end":{"line":309,"column":2}}]},"9":{"line":310,"type":"cond-expr","locations":[{"start":{"line":310,"column":23},"end":{"line":310,"column":37}},{"start":{"line":310,"column":40},"end":{"line":310,"column":52}}]},"10":{"line":312,"type":"if","locations":[{"start":{"line":312,"column":4},"end":{"line":312,"column":4}},{"start":{"line":312,"column":4},"end":{"line":312,"column":4}}]},"11":{"line":314,"type":"if","locations":[{"start":{"line":314,"column":11},"end":{"line":314,"column":11}},{"start":{"line":314,"column":11},"end":{"line":314,"column":11}}]},"12":{"line":317,"type":"if","locations":[{"start":{"line":317,"column":6},"end":{"line":317,"column":6}},{"start":{"line":317,"column":6},"end":{"line":317,"column":6}}]},"13":{"line":344,"type":"if","locations":[{"start":{"line":344,"column":2},"end":{"line":344,"column":2}},{"start":{"line":344,"column":2},"end":{"line":344,"column":2}}]},"14":{"line":347,"type":"if","locations":[{"start":{"line":347,"column":9},"end":{"line":347,"column":9}},{"start":{"line":347,"column":9},"end":{"line":347,"column":9}}]},"15":{"line":378,"type":"if","locations":[{"start":{"line":378,"column":2},"end":{"line":378,"column":2}},{"start":{"line":378,"column":2},"end":{"line":378,"column":2}}]},"16":{"line":381,"type":"if","locations":[{"start":{"line":381,"column":9},"end":{"line":381,"column":9}},{"start":{"line":381,"column":9},"end":{"line":381,"column":9}}]},"17":{"line":384,"type":"if","locations":[{"start":{"line":384,"column":9},"end":{"line":384,"column":9}},{"start":{"line":384,"column":9},"end":{"line":384,"column":9}}]},"18":{"line":393,"type":"binary-expr","locations":[{"start":{"line":393,"column":12},"end":{"line":393,"column":19}},{"start":{"line":393,"column":23},"end":{"line":393,"column":44}}]},"19":{"line":396,"type":"cond-expr","locations":[{"start":{"line":396,"column":43},"end":{"line":396,"column":50}},{"start":{"line":396,"column":53},"end":{"line":396,"column":59}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const Job = require('./job')","const Key = require('./key')","const RecordStream = require('./record_stream')","","const assert = require('assert')","const util = require('util')","","/**"," * @class Query"," * @classdesc The query object created by calling {@link Client#query} is used"," * for executing queries on the specified namespace and set (optional). Queries"," * perform value-based searches on secondary indexes. Queries can return a set"," * of records as a {@link RecordStream} or be processed using Aeorspike UDFs"," * (user-defined functions) before returning to the client."," *"," * For more information, please refer to the section on"," * <a href=\"http://www.aerospike.com/docs/guide/query.html\" title=\"Aerospike Queries\">&uArr;Queries</a>"," * in the Aerospike technical documentation."," *"," * #### Filter Predicates"," *"," * Filter predicates can be applied to queries using {@link Query#where} and"," * can further limit the number of records returned. Supported filter predicates include"," *   - [equal()]{@link module:aerospike/filter.eqal}, to match on integer or string equality,"," *   - [range()]{@link module:aerospike/filter.range}, to match on an integer range,"," *   - [contains()]{@link module:aerospike/filter.contains}, to match on list/map membership,"," *   - various geospatial filters, e.g. [geoWithinRadius()]{@link module:aerospike/filter.geoWithinRadius}"," *"," * See {@link module:aerospike/filter} for a list of all supported filter predicates."," *"," * Before a filter predicate can be applied, a secondary index needs to be"," * created on the bins which the predicate matches on. Using the Node.js"," * client, a secondary index can be created using {@link Client#createIndex}."," *"," * Currently, a single filter predicate is supported. To do more advanced"," * filtering, you need to use a user-defined function (UDF) to process the"," * result set on the server."," *"," * To scan _all_ the records in a given namespace and set without applying a"," * filter predicate, you can use {@link Scan} operations instead, which provide"," * more fine-grained control over execution priority, concurrency, etc."," *"," * #### Selecting Bins"," *"," * Using {@link Query#select} it is possible to select a subset of bins which"," * should be returned by the query. If no bins are selected, then the whole"," * record will be returned."," *"," * #### Executing a Query"," *"," * A query is executed using {@link Query#foreach}. The method returns a {@link"," * RecordStream} which emits a <code>data</code> event for each record returned"," * by the query. The query can be aborted at any time by calling"," * {@link RecordStream#abort}."," *"," * #### Applying User-Defined Functions"," *"," * User-defined functions (UDFs) can be used to filter, transform, and"," * aggregate query results. Stream UDFs can process a stream of data by"," * defining a sequence of operations to perform. Stream UDFs perform read-only"," * operations on a collection of records. Use {@link Query#setUdf} to set the"," * UDF parameters (module name, function name and optional list of arguments)"," * before executing the query using {@link Query#foreach}."," *"," * The feature guides on"," * <a href=\"http://www.aerospike.com/docs/guide/udf.html\">&uArr;User-Defined Functions</a> and"," * <a href=\"http://www.aerospike.com/docs/guide/stream_udf.html\">&uArr;Stream UDFs</a>"," * contain more detailed information and examples."," *"," * #### Query Aggregation using Stream UDFs"," *"," * Use Aerospike Stream UDFs to aggregate query results using {@link"," * Query#apply}. Aggregation queries work similar to a MapReduce system and"," * return a single result value instead of stream of records. Aggregation"," * results can be basic data types (string, number, byte array) or collection"," * types (list, map)."," *"," * Please refer to the technical documentation on"," * <a href=\"http://www.aerospike.com/docs/guide/aggregation.html\">&uArr;Aggregation</a>"," * for more information."," *"," * #### Executing Record UDFs using Background Queries"," *"," * Record UDFs perform operations on a single record such as updating records"," * based on a set of parameters. Using {@link Query#background} you can run a"," * Record UDF on the result set of a query. Queries using Records UDFs are run"," * in the background on the server and do not return the records to the client."," *"," * For additional information please refer to the section on"," * <a href=\"http://www.aerospike.com/docs/guide/record_udf.html\">&uArr;Record UDFs</a>"," * in the Aerospike technical documentation."," *"," * @param {Client} client - A client instance."," * @param {string} ns - The namescape."," * @param {string} set - The name of a set."," * @param {object} [options] - Query parameters."," * @param {FilterPredicate[]} [options.filters] - List of filter predicates to"," * apply to the query. See {@link Query#where}."," * @param {string[]} [options.select] - List of bin names to select. See"," * {@link Query#select}."," *"," * @see {@link Client#query} to create new instances of this class."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const namespace = 'test'"," * const set = 'demo'"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   var index = {"," *     ns: namespace,"," *     set: set,"," *     bin: 'tags',"," *     index: 'tags_idx',"," *     type: Aerospike.indexType.LIST,"," *     datatype: Aerospike.indexDataType.STRING"," *   }"," *   client.createIndex(index, (error, job) => {"," *     if (error) throw error"," *     job.waitUntilDone((error) => {"," *       if (error) throw error"," *"," *       var query = client.query('test', 'demo')"," *       query.select('id', 'tags')"," *       query.where(Aerospike.filter.contains('tags', 'green', Aerospike.indexType.LIST))"," *       var stream = query.foreach()"," *       stream.on('error', (error) => {"," *         console.error(error)"," *         throw error"," *       })"," *       stream.on('data', (record) => {"," *         console.info(record)"," *       })"," *       stream.on('end', () => {"," *         client.close()"," *       })"," *     })"," *   })"," * })"," */","function Query (client, ns, set, options) {","  if (typeof set === 'object') {","    options = set","    set = null","  }","  options = options || {}","  assertValidQueryOptions(options)","","  this.client = client","","  /**","   * Namespace to query.","   * @member {string} Query#ns","   */","  this.ns = ns","","  /**","   * Name of the set to query.","   * @member {string} Query#set","   */","  this.set = set","","  /**","   * Filters to apply to the query.","   *","   * *Note:* Currently, a single filter predicate is supported. To do more","   * advanced filtering, you need to use a user-defined function (UDF) to","   * process the result set on the server.","   *","   * @member {FilterPredicate[]} Query#filters","   *","   * @see Use {@link Query#where} to add filter predicates to a query.","   */","  this.filters = options.filters || []","","  /**","   * List of bin names to be selected by the query. If a query specifies bins to","   * be selected, then only those bins will be returned. If no bins are","   * selected, then all bins will be returned.","   *","   * @member {string[]} Query#selected","   *","   * @see Use {@link Query#select} to specify the bins to select.","   */","  this.selected = options.select","","  /**","   * User-defined function parameters to be applied to the query executed using","   * {@link Query#foreach}.","   *","   * @member {Object} Query#udf","   */","  this.udf = options.udf","}","","/**"," * @function Query#select"," *"," * @summary Specify the names of bins to be selected by the query."," *"," * @description If a query specifies bins to be selected, then only those bins"," * will be returned. If no bins are selected, then all bins will be returned."," *"," * @param {...string} bins - List of bin names to return."," */","Query.prototype.select = function (bins) {","  if (Array.isArray(bins)) {","    this.selected = bins","  } else {","    this.selected = Array.prototype.slice.call(arguments)","  }","}","","/**"," * @function Query#where"," *"," * @summary Adds a filter predicate to the query."," *"," * @description *Note:* Currently, a single filter predicate is supported. To"," * do more advanced filtering, you can apply a User-Defined Function (UDF) to"," * filter, transform and aggregate the query results. See {@link Query#foreach}"," * for further information."," *"," * @param {FilterPredicate} predicate - The filter predicate to apply to the function."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   var query = client.query('test', 'demo')"," *   // start a background job to add a new tag 'green' to all records that have the tag 'blue'"," *   query.where(Aerospike.filter.contains('tags', 'blue', Aerospike.indexType.LIST))"," *   query.background('myUdfModule', 'addTag', ['green'], (error, job) => {"," *     if (error) throw error"," *     client.close()"," *   })"," * })"," */","Query.prototype.where = function (predicate) {","  this.filters = this.filters || []","  this.filters.push(predicate)","}","","/**"," * @function Query#setUdf"," *"," * @summary Set user-defined function parameters to be applied to the query."," *"," * @param {string} udfModule - UDF module name."," * @param {string} udfFunction - UDF function name."," * @param {Array<*>} [udfArgs] - Arguments for the function."," */","Query.prototype.setUdf = function (udfModule, udfFunction, udfArgs) {","  this.udf = {","    module: udfModule,","    funcname: udfFunction,","    args: udfArgs","  }","}","","/**"," * @function Query#foreach"," *"," * @summary Asynchronously executes the query and returns each result item"," * through the stream."," *"," * @description"," *"," * *Applying a Stream UDF to the query results*"," *"," * A stream UDF can be applied to the query to filter, transform and aggregate"," * the query results. The UDF parameters need to be set on the query object"," * using {@link Query#setUdf} before the query is executed."," *"," * If a UDF is applied to the query, the resulting stream will return"," * the results of the UDF stream function. Record meta data and the record keys"," * will not be returned."," *"," * For aggregation queries that return a single result value instead of a"," * stream of values, you should use the {@link Query#apply} method instead."," *"," * @param {Client~QueryPolicy} [policy] - The Query Policy to use for this operation."," *"," * @returns {RecordStream}"," */","Query.prototype.foreach = function (policy, dataCb, errorCb, endCb) {","  var stream = new RecordStream(this.client)","  if (dataCb) stream.on('data', dataCb)","  if (errorCb) stream.on('error', errorCb)","  if (endCb) stream.on('end', endCb)","  var cmd = this.udf ? 'queryForeach' : 'queryAsync'","  var queryCb = function (error, record, meta, key) {","    if (error) {","      stream.emit('error', error)","    } else if (record === null) {","      stream.emit('end')","    } else {","      if (key) {","        key = new Key(key.ns, key.set, key.key, key.digest)","      }","      stream.emit('data', record, meta, key)","    }","    return !stream.aborted","  }","  this.client.sendCommand(cmd, [this.ns, this.set, this, policy], queryCb)","  return stream","}","","Query.prototype.execute = Query.prototype.foreach // alias for backwards compatibility","","/**"," * @function Query#apply"," *"," * @summary Applies a user-defined function (UDF) to aggregate the query results."," *"," * @description The aggregation function is called on both server and client (final reduce). Therefore, the Lua script files must also reside on both server and client."," *"," * @param {string} udfModule - UDF module name."," * @param {string} udfFunction - UDF function name."," * @param {Array<*>} [udfArgs] - Arguments for the function."," * @param {Client~QueryPolicy} [policy] - The Query Policy to use for this operation."," * @param {Query~aggregationResultCallback} callback - The function to call when the operation completes."," */","Query.prototype.apply = function (udfModule, udfFunction, udfArgs, policy, callback) {","  if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof udfArgs === 'function') {","    callback = udfArgs","    udfArgs = null","  }","  this.udf = {","    module: udfModule,","    funcname: udfFunction,","    args: udfArgs","  }","  this.client.sendCommand('queryApply', [this.ns, this.set, this, policy], callback)","}","","/**"," * @function Query#background"," *"," * @summary Applies a user-defined function (UDF) on records that match the query filter."," * Records are not returned to the client."," *"," * @description When a background query is initiated, the client will not wait"," * for results from the database. Instead a {@link Job} instance will be"," * returned, which can be used to query the query status on the database."," *"," * @param {string} udfModule - UDF module name."," * @param {string} udfFunction - UDF function name."," * @param {Array<*>} [udfArgs] - Arguments for the function."," * @param {Client~QueryPolicy} [policy] - The Query Policy to use for this operation."," * @param {number} [queryID] - Job ID to use for the query; will be assigned"," * randomly if zero or undefined."," * @param {Client~jobCallback} callback - The function to call when the operation completes."," */","Query.prototype.background = function (udfModule, udfFunction, udfArgs, policy, queryID, callback) {","  if (typeof udfArgs === 'function') {","    callback = udfArgs","    udfArgs = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof queryID === 'function') {","    callback = queryID","    queryID = null","  }","  this.udf = {","    module: udfModule,","    funcname: udfFunction,","    args: udfArgs","  }","  queryID = queryID || Job.safeRandomJobID()","  var self = this","  this.client.sendCommand('queryBackground', [this.ns, this.set, this, policy, queryID], function (err) {","    var module = self.filters.length > 0 ? 'query' : 'scan'","    var job = new Job(self.client, queryID, module)","    callback(err, job)","  })","}","","// In the v1 client the query() method was used for both Query and Scan","// operations. Since v2, Scan operations should use the scan() method instead.","function assertValidQueryOptions (options) {","  var scanOptions = new Set(['UDF', 'concurrent', 'percentage', 'nobins', 'priority'])","  var invalid = Object.keys(options).filter(function (key) {","    return scanOptions.has(key)","  })","  assert(invalid.length === 0, util.format('Invalid query arguments: %s. Use Client#scan instead.', invalid.toString()))","  assert(!options.aggregationUDF, 'Invalid query arguments: Pass UDF params to Query#apply instead.')","}","","/**"," * @callback Query~aggregationResultCallback"," *"," * @summary Callback function returning the aggregation result for a query."," *"," * @description"," *"," * If the operation was successful, <code>null</code> will be returned for the"," * error parameter. If there was an error, <code>result</code> will be"," * <code>undefined</code> and the <code>error</code> paramter will provide more"," * information about the error."," *"," * @param {?AerospikeError} error - The error code and message or <code>null</code> if the operation was successful."," * @param {(number|string|Array<*>|Object)} [result] - The aggregation result."," */","","module.exports = Query",""],"l":{"17":1,"18":1,"19":1,"21":1,"22":1,"159":1,"160":0,"161":0,"162":0,"164":0,"165":0,"167":0,"173":0,"179":0,"192":0,"203":0,"211":0,"224":1,"225":0,"226":0,"228":0,"258":1,"259":0,"260":0,"272":1,"273":0,"305":1,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"317":0,"318":0,"320":0,"322":0,"324":0,"325":0,"328":1,"343":1,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"351":0,"356":0,"377":1,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"388":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"404":1,"405":0,"406":0,"407":0,"409":0,"410":0,"429":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/key.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/key.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":1,"21":0,"22":1,"23":0,"24":1,"25":0,"26":1,"27":0,"28":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0],"13":[0,0,0],"14":[0,0,0,0,0],"15":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"Key","line":29,"loc":{"start":{"line":29,"column":0},"end":{"line":29,"column":36}}},"2":{"name":"isSet","line":66,"loc":{"start":{"line":66,"column":0},"end":{"line":66,"column":23}}},"3":{"name":"isValidNamespace","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":31}}},"4":{"name":"isValidSetName","line":76,"loc":{"start":{"line":76,"column":0},"end":{"line":76,"column":30}}},"5":{"name":"isValidKey","line":82,"loc":{"start":{"line":82,"column":0},"end":{"line":82,"column":26}}},"6":{"name":"isValidDigest","line":88,"loc":{"start":{"line":88,"column":0},"end":{"line":88,"column":32}}}},"statementMap":{"1":{"start":{"line":29,"column":0},"end":{"line":64,"column":1}},"2":{"start":{"line":31,"column":2},"end":{"line":33,"column":3}},"3":{"start":{"line":32,"column":4},"end":{"line":32,"column":76}},"4":{"start":{"line":34,"column":2},"end":{"line":34,"column":14}},"5":{"start":{"line":37,"column":2},"end":{"line":39,"column":3}},"6":{"start":{"line":38,"column":4},"end":{"line":38,"column":70}},"7":{"start":{"line":40,"column":2},"end":{"line":40,"column":16}},"8":{"start":{"line":43,"column":2},"end":{"line":43,"column":25}},"9":{"start":{"line":44,"column":2},"end":{"line":46,"column":3}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":67}},"11":{"start":{"line":47,"column":2},"end":{"line":47,"column":16}},"12":{"start":{"line":55,"column":2},"end":{"line":55,"column":31}},"13":{"start":{"line":56,"column":2},"end":{"line":58,"column":3}},"14":{"start":{"line":57,"column":4},"end":{"line":57,"column":58}},"15":{"start":{"line":59,"column":2},"end":{"line":59,"column":30}},"16":{"start":{"line":61,"column":2},"end":{"line":63,"column":3}},"17":{"start":{"line":62,"column":4},"end":{"line":62,"column":59}},"18":{"start":{"line":66,"column":0},"end":{"line":68,"column":1}},"19":{"start":{"line":67,"column":2},"end":{"line":67,"column":55}},"20":{"start":{"line":70,"column":0},"end":{"line":74,"column":1}},"21":{"start":{"line":71,"column":2},"end":{"line":73,"column":21}},"22":{"start":{"line":76,"column":0},"end":{"line":80,"column":1}},"23":{"start":{"line":77,"column":2},"end":{"line":79,"column":22}},"24":{"start":{"line":82,"column":0},"end":{"line":86,"column":1}},"25":{"start":{"line":83,"column":2},"end":{"line":85,"column":56}},"26":{"start":{"line":88,"column":0},"end":{"line":90,"column":1}},"27":{"start":{"line":89,"column":2},"end":{"line":89,"column":58}},"28":{"start":{"line":92,"column":0},"end":{"line":92,"column":20}}},"branchMap":{"1":{"line":31,"type":"if","locations":[{"start":{"line":31,"column":2},"end":{"line":31,"column":2}},{"start":{"line":31,"column":2},"end":{"line":31,"column":2}}]},"2":{"line":37,"type":"if","locations":[{"start":{"line":37,"column":2},"end":{"line":37,"column":2}},{"start":{"line":37,"column":2},"end":{"line":37,"column":2}}]},"3":{"line":37,"type":"binary-expr","locations":[{"start":{"line":37,"column":6},"end":{"line":37,"column":16}},{"start":{"line":37,"column":20},"end":{"line":37,"column":40}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"5":{"line":44,"type":"binary-expr","locations":[{"start":{"line":44,"column":6},"end":{"line":44,"column":12}},{"start":{"line":44,"column":16},"end":{"line":44,"column":32}}]},"6":{"line":56,"type":"if","locations":[{"start":{"line":56,"column":2},"end":{"line":56,"column":2}},{"start":{"line":56,"column":2},"end":{"line":56,"column":2}}]},"7":{"line":56,"type":"binary-expr","locations":[{"start":{"line":56,"column":6},"end":{"line":56,"column":15}},{"start":{"line":56,"column":19},"end":{"line":56,"column":41}}]},"8":{"line":59,"type":"binary-expr","locations":[{"start":{"line":59,"column":16},"end":{"line":59,"column":22}},{"start":{"line":59,"column":26},"end":{"line":59,"column":30}}]},"9":{"line":61,"type":"if","locations":[{"start":{"line":61,"column":2},"end":{"line":61,"column":2}},{"start":{"line":61,"column":2},"end":{"line":61,"column":2}}]},"10":{"line":61,"type":"binary-expr","locations":[{"start":{"line":61,"column":8},"end":{"line":61,"column":14}},{"start":{"line":61,"column":18},"end":{"line":61,"column":27}}]},"11":{"line":67,"type":"binary-expr","locations":[{"start":{"line":67,"column":9},"end":{"line":67,"column":37}},{"start":{"line":67,"column":41},"end":{"line":67,"column":55}}]},"12":{"line":71,"type":"binary-expr","locations":[{"start":{"line":71,"column":10},"end":{"line":71,"column":32}},{"start":{"line":72,"column":5},"end":{"line":72,"column":18}},{"start":{"line":73,"column":5},"end":{"line":73,"column":20}}]},"13":{"line":77,"type":"binary-expr","locations":[{"start":{"line":77,"column":10},"end":{"line":77,"column":33}},{"start":{"line":78,"column":5},"end":{"line":78,"column":19}},{"start":{"line":79,"column":5},"end":{"line":79,"column":21}}]},"14":{"line":83,"type":"binary-expr","locations":[{"start":{"line":83,"column":10},"end":{"line":83,"column":33}},{"start":{"line":83,"column":37},"end":{"line":83,"column":51}},{"start":{"line":84,"column":5},"end":{"line":84,"column":26}},{"start":{"line":85,"column":5},"end":{"line":85,"column":25}},{"start":{"line":85,"column":29},"end":{"line":85,"column":55}}]},"15":{"line":89,"type":"binary-expr","locations":[{"start":{"line":89,"column":10},"end":{"line":89,"column":33}},{"start":{"line":89,"column":37},"end":{"line":89,"column":57}}]}},"code":["/**"," * @class Key"," *"," * @summary A key uniquely identifies a record in the Aerospike database within a given namespace."," *"," * @description"," *"," * ###### Key Digests"," * In your application, you must specify the namespace, set and the key itself"," * to read and write records. When a key is sent to the database, the key value"," * and its set are hashed into a 160-bit digest. When a database operation"," * returns a key (e.g. Query or Scan operations) it might contain either the"," * set and key value, or just the digest."," *"," * @param {string} ns - The Namespace to which the key belongs."," * @param {string} set - The Set to which the key belongs."," * @param {(string|number|Buffer)} key - The unique key value. Keys can be"," * strings, integers or an instance of the Buffer class."," *"," * @example <caption>Creating a new {@link Key} instance</caption>"," *"," * const Aerospike = require('aerospike')"," * const Key = Aerospike.Key"," *"," * var key1 = new Key('test', 'demo', 12345)"," * var key2 = new Key('test', 'demo', 'abcde')"," * var key3 = new Key('test', 'demo', Buffer.from([0x62,0x75,0x66,0x66,0x65,0x72]))"," */","function Key (ns, set, key, digest) {","  /** @member {string} Key#ns */","  if (!isValidNamespace(ns)) {","    throw new TypeError('Namespace must be a valid string (max. length 32)')","  }","  this.ns = ns","","  /** @member {string} [Key#set] */","  if (isSet(set) && !isValidSetName(set)) {","    throw new TypeError('Set must be a valid string (max. length 64)')","  }","  this.set = set","","  /** @member {(string|integer|Buffer)} [Key#key] */","  var hasKey = isSet(key)","  if (hasKey && !isValidKey(key)) {","    throw new TypeError('Key must be a string, integer, or Buffer')","  }","  this.key = key","","  /**","   * @member {Buffer} [Key#digest]","   *","   * @summary The 160-bit digest used by the Aerospike server to uniquely","   * identify a record within a namespace.","   */","  var hasDigest = isSet(digest)","  if (hasDigest && !isValidDigest(digest)) {","    throw new TypeError('Digest must be a 20-byte Buffer')","  }","  this.digest = digest || null","","  if (!(hasKey || hasDigest)) {","    throw new TypeError('Either key or digest must be set')","  }","}","","function isSet (value) {","  return typeof value !== 'undefined' && value !== null","}","","function isValidNamespace (ns) {","  return (typeof ns === 'string') &&","    (ns.length > 0) &&","    (ns.length <= 32)","}","","function isValidSetName (set) {","  return (typeof set === 'string') &&","    (set.length > 0) &&","    (set.length <= 64)","}","","function isValidKey (key) {","  return (typeof key === 'string' && key.length > 0) ||","    (Number.isInteger(key)) ||","    (Buffer.isBuffer(key) && Buffer.byteLength(key) > 0)","}","","function isValidDigest (digest) {","  return (Buffer.isBuffer(digest) && digest.length === 20)","}","","module.exports = Key",""],"l":{"29":1,"31":0,"32":0,"34":0,"37":0,"38":0,"40":0,"43":0,"44":0,"45":0,"47":0,"55":0,"56":0,"57":0,"59":0,"61":0,"62":0,"66":1,"67":0,"70":1,"71":0,"76":1,"77":0,"82":1,"83":0,"88":1,"89":0,"92":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/record_stream.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/record_stream.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":1},"b":{"1":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"RecordStream","line":64,"loc":{"start":{"line":64,"column":0},"end":{"line":64,"column":31}}},"2":{"name":"(anonymous_2)","line":84,"loc":{"start":{"line":84,"column":31},"end":{"line":84,"column":43}}},"3":{"name":"(anonymous_3)","line":95,"loc":{"start":{"line":95,"column":31},"end":{"line":95,"column":43}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":32}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":41}},"3":{"start":{"line":64,"column":0},"end":{"line":78,"column":1}},"4":{"start":{"line":70,"column":2},"end":{"line":70,"column":22}},"5":{"start":{"line":77,"column":2},"end":{"line":77,"column":22}},"6":{"start":{"line":80,"column":0},"end":{"line":80,"column":30}},"7":{"start":{"line":82,"column":0},"end":{"line":82,"column":39}},"8":{"start":{"line":83,"column":0},"end":{"line":83,"column":38}},"9":{"start":{"line":84,"column":0},"end":{"line":84,"column":45}},"10":{"start":{"line":95,"column":0},"end":{"line":99,"column":1}},"11":{"start":{"line":96,"column":2},"end":{"line":96,"column":26}},"12":{"start":{"line":96,"column":20},"end":{"line":96,"column":26}},"13":{"start":{"line":97,"column":2},"end":{"line":97,"column":21}},"14":{"start":{"line":98,"column":2},"end":{"line":98,"column":47}},"15":{"start":{"line":120,"column":0},"end":{"line":120,"column":29}}},"branchMap":{"1":{"line":96,"type":"if","locations":[{"start":{"line":96,"column":2},"end":{"line":96,"column":2}},{"start":{"line":96,"column":2},"end":{"line":96,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const stream = require('stream')","const inherits = require('util').inherits","","/**"," * @class RecordStream"," * @classdesc Stream of database records (full or partial) returned by {@link Query} or {@link Scan} operations."," *"," * *Note:* Record stream currently does not support Node.js'"," * <code>Stream#pause</code> and <code>Stream#resume</code> methods, i.e. it"," * always operates in flowing mode. That means data is read from the Aerospike"," * database and provided to your application as fast as possible. If no data"," * event handlers are attached, then data will be lost."," *"," * #### Aborting a Query/Scan"," *"," * A query or scan operation can be aborted by calling the {@link"," * RecordStream#abort} method at any time. It is no possible to continue a"," * record stream, once aborted."," *"," * @extends stream"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   var recordsSeen = 0"," *   var scan = client.scan('test', 'demo')"," *   var stream = scan.foreach()"," *"," *   stream.on('error', (error) => {"," *     console.error(error)"," *     throw error"," *   })"," *   stream.on('data', (record) => {"," *     recordsSeen++"," *     console.log(record)"," *     if (recordsSeen > 1000) {"," *       stream.abort() // We've seen enough!"," *     }"," *   })"," *   stream.on('end', () => {"," *     console.info(stream.aborted ? 'scan aborted' : 'scan completed')"," *     client.close()"," *   })"," * })"," */","function RecordStream (client) {","  /**","   * <code>true</code> if the scan has been aborted by the user; <code>false</code> otherwise.","   * @member {boolean} RecordStream#aborted","   * @see {@link RecordStream#abort}","   */","  this.aborted = false","","  // Keep a reference to the client instance even though it's not actually","  // needed to process the stream. This is to prevent situations where the","  // client object goes out of scope while the stream is still being processed","  // and the memory for the C++ client instance and dependent objects gets","  // free'd.","  this.client = client","}","","inherits(RecordStream, stream)","","RecordStream.prototype.writable = false","RecordStream.prototype.readable = true","RecordStream.prototype._read = function () {}","","/**"," * @function RecordStream#abort"," *"," * @summary Aborts the query/scan operation."," *"," * Once aborted, it is not possible to resume the stream."," *"," * @since v2.0"," */","RecordStream.prototype.abort = function () {","  if (this.aborted) return","  this.aborted = true","  process.nextTick(this.emit.bind(this, 'end'))","}","","/**"," * @event RecordStream#data"," * @param {?object} bins - The record bins; may be <code>null</code> if {@link Scan#nobins} is used."," * @param {?object} meta - Record meta data, e.g. ttl, generation, etc."," * @param {?Key} key - The record's key. By default the server only stores the"," * key digest unless <code>Aerospike.policy.key.SEND</code> is used; so the"," * <code>key</code> property of the returned Key object might be"," * undefined and only <code>digest</code> will be populated."," */","","/**"," * @event RecordStream#error"," * @type {AerospikeError}"," */","","/**"," * @event RecordStream#end"," */","","module.exports = RecordStream",""],"l":{"17":1,"18":1,"64":1,"70":0,"77":0,"80":1,"82":1,"83":1,"84":1,"95":1,"96":0,"97":0,"98":0,"120":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/scan.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/scan.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":1,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":1,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":1,"62":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"Scan","line":99,"loc":{"start":{"line":99,"column":0},"end":{"line":99,"column":41}}},"2":{"name":"(anonymous_2)","line":173,"loc":{"start":{"line":173,"column":24},"end":{"line":173,"column":40}}},"3":{"name":"(anonymous_3)","line":199,"loc":{"start":{"line":199,"column":28},"end":{"line":199,"column":97}}},"4":{"name":"(anonymous_4)","line":219,"loc":{"start":{"line":219,"column":87},"end":{"line":219,"column":102}}},"5":{"name":"(anonymous_5)","line":236,"loc":{"start":{"line":236,"column":25},"end":{"line":236,"column":67}}},"6":{"name":"(anonymous_6)","line":243,"loc":{"start":{"line":243,"column":15},"end":{"line":243,"column":51}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":28}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":47}},"4":{"start":{"line":99,"column":0},"end":{"line":160,"column":1}},"5":{"start":{"line":100,"column":2},"end":{"line":103,"column":3}},"6":{"start":{"line":101,"column":4},"end":{"line":101,"column":17}},"7":{"start":{"line":102,"column":4},"end":{"line":102,"column":14}},"8":{"start":{"line":105,"column":2},"end":{"line":105,"column":22}},"9":{"start":{"line":111,"column":2},"end":{"line":111,"column":14}},"10":{"start":{"line":117,"column":2},"end":{"line":117,"column":16}},"11":{"start":{"line":129,"column":2},"end":{"line":129,"column":32}},"12":{"start":{"line":138,"column":2},"end":{"line":138,"column":34}},"13":{"start":{"line":145,"column":2},"end":{"line":145,"column":32}},"14":{"start":{"line":152,"column":2},"end":{"line":152,"column":30}},"15":{"start":{"line":159,"column":2},"end":{"line":159,"column":38}},"16":{"start":{"line":173,"column":0},"end":{"line":179,"column":1}},"17":{"start":{"line":174,"column":2},"end":{"line":178,"column":3}},"18":{"start":{"line":175,"column":4},"end":{"line":175,"column":24}},"19":{"start":{"line":177,"column":4},"end":{"line":177,"column":57}},"20":{"start":{"line":199,"column":0},"end":{"line":223,"column":1}},"21":{"start":{"line":200,"column":2},"end":{"line":211,"column":3}},"22":{"start":{"line":201,"column":4},"end":{"line":201,"column":22}},"23":{"start":{"line":202,"column":4},"end":{"line":202,"column":18}},"24":{"start":{"line":203,"column":9},"end":{"line":211,"column":3}},"25":{"start":{"line":204,"column":4},"end":{"line":204,"column":21}},"26":{"start":{"line":205,"column":4},"end":{"line":205,"column":17}},"27":{"start":{"line":206,"column":9},"end":{"line":211,"column":3}},"28":{"start":{"line":207,"column":4},"end":{"line":207,"column":21}},"29":{"start":{"line":208,"column":4},"end":{"line":208,"column":17}},"30":{"start":{"line":209,"column":9},"end":{"line":211,"column":3}},"31":{"start":{"line":210,"column":4},"end":{"line":210,"column":65}},"32":{"start":{"line":212,"column":2},"end":{"line":216,"column":3}},"33":{"start":{"line":217,"column":2},"end":{"line":217,"column":42}},"34":{"start":{"line":218,"column":2},"end":{"line":218,"column":17}},"35":{"start":{"line":219,"column":2},"end":{"line":222,"column":4}},"36":{"start":{"line":220,"column":4},"end":{"line":220,"column":50}},"37":{"start":{"line":221,"column":4},"end":{"line":221,"column":22}},"38":{"start":{"line":236,"column":0},"end":{"line":259,"column":1}},"39":{"start":{"line":237,"column":2},"end":{"line":237,"column":88}},"40":{"start":{"line":237,"column":16},"end":{"line":237,"column":88}},"41":{"start":{"line":238,"column":2},"end":{"line":238,"column":44}},"42":{"start":{"line":239,"column":2},"end":{"line":239,"column":39}},"43":{"start":{"line":239,"column":14},"end":{"line":239,"column":39}},"44":{"start":{"line":240,"column":2},"end":{"line":240,"column":42}},"45":{"start":{"line":240,"column":15},"end":{"line":240,"column":42}},"46":{"start":{"line":241,"column":2},"end":{"line":241,"column":36}},"47":{"start":{"line":241,"column":13},"end":{"line":241,"column":36}},"48":{"start":{"line":242,"column":2},"end":{"line":242,"column":36}},"49":{"start":{"line":243,"column":2},"end":{"line":255,"column":3}},"50":{"start":{"line":244,"column":4},"end":{"line":253,"column":5}},"51":{"start":{"line":245,"column":6},"end":{"line":245,"column":33}},"52":{"start":{"line":246,"column":11},"end":{"line":253,"column":5}},"53":{"start":{"line":247,"column":6},"end":{"line":247,"column":24}},"54":{"start":{"line":249,"column":6},"end":{"line":251,"column":7}},"55":{"start":{"line":250,"column":8},"end":{"line":250,"column":59}},"56":{"start":{"line":252,"column":6},"end":{"line":252,"column":44}},"57":{"start":{"line":254,"column":4},"end":{"line":254,"column":26}},"58":{"start":{"line":256,"column":2},"end":{"line":256,"column":89}},"59":{"start":{"line":257,"column":2},"end":{"line":257,"column":51}},"60":{"start":{"line":258,"column":2},"end":{"line":258,"column":15}},"61":{"start":{"line":261,"column":0},"end":{"line":261,"column":47}},"62":{"start":{"line":263,"column":0},"end":{"line":263,"column":21}}},"branchMap":{"1":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":2}},{"start":{"line":100,"column":2},"end":{"line":100,"column":2}}]},"2":{"line":174,"type":"if","locations":[{"start":{"line":174,"column":2},"end":{"line":174,"column":2}},{"start":{"line":174,"column":2},"end":{"line":174,"column":2}}]},"3":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":2},"end":{"line":200,"column":2}},{"start":{"line":200,"column":2},"end":{"line":200,"column":2}}]},"4":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":9},"end":{"line":203,"column":9}},{"start":{"line":203,"column":9},"end":{"line":203,"column":9}}]},"5":{"line":206,"type":"if","locations":[{"start":{"line":206,"column":9},"end":{"line":206,"column":9}},{"start":{"line":206,"column":9},"end":{"line":206,"column":9}}]},"6":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":9},"end":{"line":209,"column":9}},{"start":{"line":209,"column":9},"end":{"line":209,"column":9}}]},"7":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":11},"end":{"line":217,"column":17}},{"start":{"line":217,"column":21},"end":{"line":217,"column":42}}]},"8":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":2},"end":{"line":237,"column":2}},{"start":{"line":237,"column":2},"end":{"line":237,"column":2}}]},"9":{"line":239,"type":"if","locations":[{"start":{"line":239,"column":2},"end":{"line":239,"column":2}},{"start":{"line":239,"column":2},"end":{"line":239,"column":2}}]},"10":{"line":240,"type":"if","locations":[{"start":{"line":240,"column":2},"end":{"line":240,"column":2}},{"start":{"line":240,"column":2},"end":{"line":240,"column":2}}]},"11":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":2},"end":{"line":241,"column":2}},{"start":{"line":241,"column":2},"end":{"line":241,"column":2}}]},"12":{"line":244,"type":"if","locations":[{"start":{"line":244,"column":4},"end":{"line":244,"column":4}},{"start":{"line":244,"column":4},"end":{"line":244,"column":4}}]},"13":{"line":246,"type":"if","locations":[{"start":{"line":246,"column":11},"end":{"line":246,"column":11}},{"start":{"line":246,"column":11},"end":{"line":246,"column":11}}]},"14":{"line":249,"type":"if","locations":[{"start":{"line":249,"column":6},"end":{"line":249,"column":6}},{"start":{"line":249,"column":6},"end":{"line":249,"column":6}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const Job = require('./job')","const Key = require('./key')","const RecordStream = require('./record_stream')","","/**"," * @class Scan"," * @classdesc The scan object created by calling {@link Client#scan} is used"," * for executing record scans on the specified namespace and set (optional)."," * Scans can return a set of records as a {@link RecordStream} or apply an"," * Aerospike UDF (user-defined function) on each of the records on the server."," *"," * For more information, please refer to the section on"," * <a href=\"http://www.aerospike.com/docs/guide/scan.html\">&uArr;Scans</a>"," * in the Aerospike technical documentation."," *"," * #### Selecting Bins"," *"," * Using {@link Scan#select} it is possible to select a subset of bins which"," * should be returned by the query. If no bins are selected, then the whole"," * record will be returned. If the {@link Scan#nobins} property is set to"," * <code>true</code> the only the record meta data (ttl, generation, etc.) will"," * be returned."," *"," * #### Executing a Scan"," *"," * A scan is executed using {@link Scan#foreach}. The method returns a {@link"," * RecordStream} which emits a <code>data</code> event for each record returned"," * by the scan. The scan can be aborted at any time by calling"," * {@link RecordStream#abort}."," *"," * #### Executing Record UDFs using Background Scans"," *"," * Record UDFs perform operations on a single record such as updating records"," * based on a set of parameters. Using {@link Scan#background} you can run a"," * Record UDF on the result set of a scan. Scans using Records UDFs are run"," * in the background on the server and do not return the records to the client."," *"," * For additional information please refer to the section on"," * <a href=\"http://www.aerospike.com/docs/guide/record_udf.html\">&uArr;Record UDFs</a>"," * in the Aerospike technical documentation."," *"," * @param {Client} client - A client instance."," * @param {string} ns - The namescape."," * @param {string} set - The name of a set."," * @param {object} [options] - Scan parameters."," * @param {Array<string>} [options.select] - List of bin names to select. See"," * {@link Scan#select}."," * @param {number} [options.priority] - Priority level at which the scan will"," * be executed. See {@link Scan#priority}."," * @param {number} [options.percent=100] - Percentage of records to scan. See"," * {@link Scan#percent}."," * @param {boolean} [options.nobins=false] - Whether only meta data should be"," * returned. See {@link Scan#nobins}."," * @param {boolean} [options.concurrent=false] - Whether all cluster nodes"," * should be scanned concurrently. See {@link Scan#concurrent}."," *"," * @see {@link Client#scan} to create new instances of this class."," *"," * @since v2.0"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   var scan = client.scan('test', 'demo')"," *   scan.priority = Aerospike.scanPriority.LOW"," *   scan.percent = 50 // scan only 50% of all records in the set"," *"," *   var recordsSeen = 0"," *   var stream = scan.foreach()"," *   stream.on('error', (error) => { throw error })"," *   stream.on('end', () => client.close())"," *   stream.on('data', (record) => {"," *     console.log(record)"," *     recordsSeen++"," *     if (recordsSeen > 100) stream.abort() // We've seen enough!"," *   })"," * })"," */","function Scan (client, ns, set, options) {","  if (typeof set === 'object') {","    options = set","    set = null","  }","","  this.client = client","","  /**","   * Namespace to scan.","   * @member {string} Scan#ns","   */","  this.ns = ns","","  /**","   * Name of the set to scan.","   * @member {string} Scan#set","   */","  this.set = set","","  /**","   * List of bin names to be selected by the scan. If a scan specifies bins to","   * be selected, then only those bins will be returned. If no bins are","   * selected, then all bins will be returned (unless {@link Scan#nobins} is","   * set to <code>true</code>).","   *","   * @member {string[]} Scan#selected","   *","   * @see Use {@link Scan#select} to specify the bins to select.","   */","  this.selected = options.select","","  /**","   * Priority level at which the scan will be executed.","   *","   * @member {number} Scan#priority","   *","   * @see {@link module:aerospike.scanPriority} for enumeration of allowed values.","   */","  this.priority = options.priority","","  /**","   * Percentage of records in the cluster to scan.","   *","   * @member {number} Scan#percent","   */","  this.percent = options.percent","","  /**","   * If set to <code>true</code>, the scan will return only meta data, and exclude bins.","   *","   * @member {boolean} Scan#nobins","   */","  this.nobins = options.nobins","","  /**","   * If set to <code>true</code>, all cluster nodes will be scanned in parallel.","   *","   * @member {boolean} Scan#concurrent.","   */","  this.concurrent = options.concurrent","}","","/**"," * @function Scan#select"," *"," * @summary Specify the names of bins to be selected by the scan."," *"," * If a scan specifies bins to be selected, then only those bins will be"," * returned. If no bins are selected, then all bins will be returned. (Unless"," * {@link Scan#nobins} is set to <code>true</code>.)"," *"," * @param {...string} bins - List of bin names to return."," */","Scan.prototype.select = function (bins) {","  if (Array.isArray(bins)) {","    this.selected = bins","  } else {","    this.selected = Array.prototype.slice.call(arguments)","  }","}","","/**"," * @function Scan#background"," *"," * @summary Perform a read-write background scan and apply a Lua user-defined"," * function (UDF) to each record."," *"," * @description When a background scan is initiated, the client will not wait"," * for results from the database. Instead a {@link Job} instance will be"," * returned, which can be used to query the scan status on the database."," *"," * @param {string} udfModule - UDF module name."," * @param {string} udfFunction - UDF function name."," * @param {Array<*>} [udfArgs] - Arguments for the function."," * @param {Client~ScanPolicy} [policy] - The Scan Policy to use for this operation."," * @param {number} [scanID] - Job ID to use for the scan; will be assigned"," * randomly if zero or undefined."," * @param {Client~jobCallback} callback - The function to call when the operation completes."," */","Scan.prototype.background = function (udfModule, udfFunction, udfArgs, policy, scanID, callback) {","  if (typeof udfArgs === 'function') {","    callback = udfArgs","    udfArgs = null","  } else if (typeof policy === 'function') {","    callback = policy","    policy = null","  } else if (typeof scanID === 'function') {","    callback = scanID","    scanID = null","  } else if (typeof callback !== 'function') {","    throw new TypeError('\"callback\" argument must be a function')","  }","  this.udf = {","    module: udfModule,","    funcname: udfFunction,","    args: udfArgs","  }","  scanID = scanID || Job.safeRandomJobID()","  var self = this","  this.client.sendCommand('scanBackground', [this.ns, this.set, this, policy, scanID], function (err) {","    var job = new Job(self.client, scanID, 'scan')","    callback(err, job)","  })","}","","/**"," * @function Scan#foreach"," *"," * @summary Performs a read-only scan on each node in the cluster. As the scan"," * iterates through each partition, it returns the current version of each"," * record to the client."," *"," * @param {Client~ScanPolicy} [policy] - The Scan Policy to use for this operation."," *"," * @returns {RecordStream}"," */","Scan.prototype.foreach = function (policy, dataCb, errorCb, endCb) {","  if (this.udf) throw new Error('Record UDF can only be applied using background scan.')","  var stream = new RecordStream(this.client)","  if (dataCb) stream.on('data', dataCb)","  if (errorCb) stream.on('error', errorCb)","  if (endCb) stream.on('end', endCb)","  var scanID = Job.safeRandomJobID()","  var scanCb = function (error, record, meta, key) {","    if (error) {","      stream.emit('error', error)","    } else if (record === null) {","      stream.emit('end')","    } else {","      if (key) {","        key = new Key(key.ns, key.set, key.key, key.digest)","      }","      stream.emit('data', record, meta, key)","    }","    return !stream.aborted","  }","  this.client.sendCommand('scanAsync', [this.ns, this.set, this, policy, scanID], scanCb)","  stream.job = new Job(this.client, scanID, 'scan')","  return stream","}","","Scan.prototype.execute = Scan.prototype.foreach // alias for backwards compatibility","","module.exports = Scan",""],"l":{"17":1,"18":1,"19":1,"99":1,"100":0,"101":0,"102":0,"105":0,"111":0,"117":0,"129":0,"138":0,"145":0,"152":0,"159":0,"173":1,"174":0,"175":0,"177":0,"199":1,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"212":0,"217":0,"218":0,"219":0,"220":0,"221":0,"236":1,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"249":0,"250":0,"252":0,"254":0,"256":0,"257":0,"258":0,"261":1,"263":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/event_loop.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/event_loop.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":0,"11":1,"12":0,"13":0,"14":0,"15":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"releaseEventLoop","line":67,"loc":{"start":{"line":67,"column":0},"end":{"line":67,"column":29}}},"2":{"name":"eventLoopReleased","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":30}}},"3":{"name":"registerASEventLoop","line":86,"loc":{"start":{"line":86,"column":0},"end":{"line":86,"column":32}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":53}},"2":{"start":{"line":25,"column":0},"end":{"line":25,"column":30}},"3":{"start":{"line":33,"column":0},"end":{"line":33,"column":33}},"4":{"start":{"line":67,"column":0},"end":{"line":74,"column":1}},"5":{"start":{"line":68,"column":2},"end":{"line":68,"column":27}},"6":{"start":{"line":69,"column":2},"end":{"line":73,"column":3}},"7":{"start":{"line":70,"column":4},"end":{"line":70,"column":35}},"8":{"start":{"line":72,"column":4},"end":{"line":72,"column":30}},"9":{"start":{"line":79,"column":0},"end":{"line":81,"column":1}},"10":{"start":{"line":80,"column":2},"end":{"line":80,"column":27}},"11":{"start":{"line":86,"column":0},"end":{"line":91,"column":1}},"12":{"start":{"line":87,"column":2},"end":{"line":90,"column":3}},"13":{"start":{"line":88,"column":4},"end":{"line":88,"column":31}},"14":{"start":{"line":89,"column":4},"end":{"line":89,"column":32}},"15":{"start":{"line":93,"column":0},"end":{"line":97,"column":1}}},"branchMap":{"1":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":2},"end":{"line":69,"column":2}},{"start":{"line":69,"column":2},"end":{"line":69,"column":2}}]},"2":{"line":87,"type":"if","locations":[{"start":{"line":87,"column":2},"end":{"line":87,"column":2}},{"start":{"line":87,"column":2},"end":{"line":87,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const as = require('../build/Release/aerospike.node')","","/**"," * Whether event loop resources have been released"," *"," * @type {boolean}"," * @private"," */","var _eventLoopReleased = false","","/**"," * Whether event loop resources have been created"," *"," * @type {boolean}"," * @private"," */","var _eventLoopInitialized = false","","/**"," * @memberof! module:aerospike"," *"," * @summary Release event loop resources."," *"," * @description This method releases the event loop resources held by the"," * Aerospike C client library. It is normally called automatically when the"," * Aerospike Node.js client instance is closed. However, when the application"," * needs to create multiple client instances, then `releaseEventLoop = false`"," * needs to be passed in the {@link Client#close} method and the event loop"," * resources need to be released explicitly by calling this method."," *"," * @example <caption>Working with multiple client instances.</caption>"," *"," * const Aerospike = require('aerospike')"," *"," * // called one or more times to handle a new work request"," * function handleRequest (request) {"," *   Aerospike.connect(function (err, client) {"," *     if (err) {"," *       // handle error"," *     }"," *     // handle request"," *     client.close(false) // do not release event loop"," *   })"," * }"," *"," * // called when application shuts down"," * function shutdown () {"," *   Aerospike.releaseEventLoop()"," * }"," */","function releaseEventLoop () {","  _eventLoopReleased = true","  if (as.get_cluster_count() > 0) {","    setTimeout(releaseEventLoop, 5)","  } else {","    as.release_as_event_loop()","  }","}","","/**"," * @private"," */","function eventLoopReleased () {","  return _eventLoopReleased","}","","/**"," * @private"," */","function registerASEventLoop () {","  if (!_eventLoopInitialized) {","    as.register_as_event_loop()","    _eventLoopInitialized = true","  }","}","","module.exports = {","  releaseEventLoop: releaseEventLoop,","  eventLoopReleased: eventLoopReleased,","  registerASEventLoop: registerASEventLoop","}",""],"l":{"17":1,"25":1,"33":1,"67":1,"68":0,"69":0,"70":0,"72":0,"79":1,"80":0,"86":1,"87":0,"88":0,"89":0,"93":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/operations.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/operations.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"Operation","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":29}}},"2":{"name":"read","line":69,"loc":{"start":{"line":69,"column":8},"end":{"line":69,"column":28}}},"3":{"name":"write","line":80,"loc":{"start":{"line":80,"column":9},"end":{"line":80,"column":37}}},"4":{"name":"incr","line":96,"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":35}}},"5":{"name":"append","line":112,"loc":{"start":{"line":112,"column":10},"end":{"line":112,"column":39}}},"6":{"name":"prepend","line":128,"loc":{"start":{"line":128,"column":11},"end":{"line":128,"column":41}}},"7":{"name":"touch","line":146,"loc":{"start":{"line":146,"column":9},"end":{"line":146,"column":30}}}},"statementMap":{"1":{"start":{"line":50,"column":0},"end":{"line":50,"column":53}},"2":{"start":{"line":51,"column":0},"end":{"line":51,"column":25}},"3":{"start":{"line":56,"column":0},"end":{"line":59,"column":1}},"4":{"start":{"line":57,"column":2},"end":{"line":57,"column":14}},"5":{"start":{"line":58,"column":2},"end":{"line":58,"column":16}},"6":{"start":{"line":61,"column":0},"end":{"line":151,"column":1}},"7":{"start":{"line":70,"column":4},"end":{"line":70,"column":39}},"8":{"start":{"line":81,"column":4},"end":{"line":81,"column":42}},"9":{"start":{"line":82,"column":4},"end":{"line":82,"column":20}},"10":{"start":{"line":83,"column":4},"end":{"line":83,"column":13}},"11":{"start":{"line":97,"column":4},"end":{"line":97,"column":41}},"12":{"start":{"line":98,"column":4},"end":{"line":98,"column":20}},"13":{"start":{"line":99,"column":4},"end":{"line":99,"column":13}},"14":{"start":{"line":113,"column":4},"end":{"line":113,"column":43}},"15":{"start":{"line":114,"column":4},"end":{"line":114,"column":20}},"16":{"start":{"line":115,"column":4},"end":{"line":115,"column":13}},"17":{"start":{"line":129,"column":4},"end":{"line":129,"column":44}},"18":{"start":{"line":130,"column":4},"end":{"line":130,"column":20}},"19":{"start":{"line":131,"column":4},"end":{"line":131,"column":13}},"20":{"start":{"line":147,"column":4},"end":{"line":147,"column":37}},"21":{"start":{"line":148,"column":4},"end":{"line":148,"column":16}},"22":{"start":{"line":149,"column":4},"end":{"line":149,"column":13}}},"branchMap":{},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @module aerospike/operations"," *"," * @description This module provides functions to easily define operations to"," * be performed on a record via the {@link Client#operate} command."," *"," * @see {@link Client#operate}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const op = Aerospike.operations"," * const key = new Aerospike.Key('test', 'demo', 'mykey1')"," *"," * var ops = ["," *   op.append('a', 'xyz'),"," *   op.incr('b', 10),"," *   op.read('b')"," * ]"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   client.put(key, { a: 'abc', b: 42 }, (error) => {"," *     if (error) throw error"," *     client.operate(key, ops, (error, record) => {"," *       if (error) throw error"," *       console.log(record) // => { b: 52 }"," *       client.close()"," *     })"," *   })"," * })"," */","","const as = require('../build/Release/aerospike.node')","const ops = as.operations","","/**"," * @private"," */","function Operation (op, bin) {","  this.op = op","  this.bin = bin","}","","module.exports = {","","  /**","   * @summary Read the value of the bin.","   *","   * @param {string} bin - The name of the bin.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  read: function read (bin) {","    return new Operation(ops.READ, bin)","  },","","  /**","   * @summary Update the value of the bin.","   *","   * @param {string} bin - The name of the bin.","   * @param {any} value - The value to set the bin to.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  write: function write (bin, value) {","    var op = new Operation(ops.WRITE, bin)","    op.value = value","    return op","  },","","  /**","   * @summary Increment the value of the bin by the given value.","   *","   * @description The bin must contain either an Integer or a Double, and the","   * value must be of the same type.","   *","   * @param {string} bin - The name of the bin.","   * @param {(number|Double)} value - The value to increment the bin by.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  incr: function incr (bin, value) {","    var op = new Operation(ops.INCR, bin)","    op.value = value","    return op","  },","","  /**","   * @summary Append the value to the bin.","   *","   * @description The bin must contain either String or a Byte Array, and the","   * value must be of the same type.","   *","   * @param {string} bin - The name of the bin.","   * @param {(string|Buffer)} value - The value to append to the bin.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  append: function append (bin, value) {","    var op = new Operation(ops.APPEND, bin)","    op.value = value","    return op","  },","","  /**","   * @summary Prepend the value to the bin.","   *","   * @description The bin must contain either String or a Byte Array, and the","   * value must be of the same type.","   *","   * @param {string} bin - The name of the bin.","   * @param {(string|Buffer)} value - The value to prepend to the bin.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  prepend: function prepend (bin, value) {","    var op = new Operation(ops.PREPEND, bin)","    op.value = value","    return op","  },","","  /**","   * @summary Update the TTL (time-to-live) for a record.","   *","   * @description If the optional `ttl` parameter is not specified, the server","   * will reset the record's TTL value to the default TTL value for the","   * namespace.","   *","   * @param {number} [ttl=Aerospike.ttl.NAMESPACE_DEFAULT] - The new, relative TTL to set for the record, when it is touched.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @see {@link module:aerospike.ttl} for \"special\" TTL values.","   */","  touch: function touch (ttl) {","    var op = new Operation(ops.TOUCH)","    op.ttl = ttl","    return op","  }","}",""],"l":{"50":1,"51":1,"56":1,"57":0,"58":0,"61":1,"70":0,"81":0,"82":0,"83":0,"97":0,"98":0,"99":0,"113":0,"114":0,"115":0,"129":0,"130":0,"131":0,"147":0,"148":0,"149":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/utils.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/utils.js","s":{"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":1,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"fnMap":{"1":{"name":"parseHostString","line":19,"loc":{"start":{"line":19,"column":0},"end":{"line":19,"column":38}}},"2":{"name":"parseHostsString","line":35,"loc":{"start":{"line":35,"column":0},"end":{"line":35,"column":32}}},"3":{"name":"(anonymous_3)","line":38,"loc":{"start":{"line":38,"column":11},"end":{"line":38,"column":26}}},"4":{"name":"(anonymous_4)","line":39,"loc":{"start":{"line":39,"column":14},"end":{"line":39,"column":27}}},"5":{"name":"print","line":43,"loc":{"start":{"line":43,"column":0},"end":{"line":43,"column":30}}},"6":{"name":"(anonymous_6)","line":49,"loc":{"start":{"line":49,"column":14},"end":{"line":49,"column":30}}},"7":{"name":"kvlistToMap","line":56,"loc":{"start":{"line":56,"column":0},"end":{"line":56,"column":46}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":114}},"2":{"start":{"line":19,"column":0},"end":{"line":33,"column":1}},"3":{"start":{"line":20,"column":2},"end":{"line":20,"column":39}},"4":{"start":{"line":21,"column":2},"end":{"line":23,"column":3}},"5":{"start":{"line":22,"column":4},"end":{"line":22,"column":58}},"6":{"start":{"line":24,"column":2},"end":{"line":24,"column":15}},"7":{"start":{"line":25,"column":2},"end":{"line":25,"column":22}},"8":{"start":{"line":26,"column":2},"end":{"line":26,"column":24}},"9":{"start":{"line":27,"column":2},"end":{"line":29,"column":3}},"10":{"start":{"line":28,"column":4},"end":{"line":28,"column":22}},"11":{"start":{"line":30,"column":2},"end":{"line":30,"column":21}},"12":{"start":{"line":31,"column":2},"end":{"line":31,"column":53}},"13":{"start":{"line":32,"column":2},"end":{"line":32,"column":13}},"14":{"start":{"line":35,"column":0},"end":{"line":41,"column":1}},"15":{"start":{"line":36,"column":2},"end":{"line":40,"column":27}},"16":{"start":{"line":38,"column":28},"end":{"line":38,"column":46}},"17":{"start":{"line":39,"column":29},"end":{"line":39,"column":40}},"18":{"start":{"line":43,"column":0},"end":{"line":54,"column":1}},"19":{"start":{"line":44,"column":2},"end":{"line":53,"column":3}},"20":{"start":{"line":45,"column":4},"end":{"line":45,"column":30}},"21":{"start":{"line":47,"column":4},"end":{"line":51,"column":8}},"22":{"start":{"line":50,"column":8},"end":{"line":50,"column":42}},"23":{"start":{"line":52,"column":4},"end":{"line":52,"column":60}},"24":{"start":{"line":56,"column":0},"end":{"line":65,"column":1}},"25":{"start":{"line":57,"column":2},"end":{"line":57,"column":40}},"26":{"start":{"line":58,"column":2},"end":{"line":58,"column":32}},"27":{"start":{"line":59,"column":2},"end":{"line":63,"column":3}},"28":{"start":{"line":60,"column":4},"end":{"line":60,"column":23}},"29":{"start":{"line":61,"column":4},"end":{"line":61,"column":29}},"30":{"start":{"line":62,"column":4},"end":{"line":62,"column":23}},"31":{"start":{"line":64,"column":2},"end":{"line":64,"column":12}},"32":{"start":{"line":67,"column":0},"end":{"line":72,"column":1}}},"branchMap":{"1":{"line":21,"type":"if","locations":[{"start":{"line":21,"column":2},"end":{"line":21,"column":2}},{"start":{"line":21,"column":2},"end":{"line":21,"column":2}}]},"2":{"line":27,"type":"if","locations":[{"start":{"line":27,"column":2},"end":{"line":27,"column":2}},{"start":{"line":27,"column":2},"end":{"line":27,"column":2}}]},"3":{"line":31,"type":"cond-expr","locations":[{"start":{"line":31,"column":21},"end":{"line":31,"column":46}},{"start":{"line":31,"column":49},"end":{"line":31,"column":53}}]},"4":{"line":44,"type":"if","locations":[{"start":{"line":44,"column":2},"end":{"line":44,"column":2}},{"start":{"line":44,"column":2},"end":{"line":44,"column":2}}]},"5":{"line":57,"type":"binary-expr","locations":[{"start":{"line":57,"column":19},"end":{"line":57,"column":33}},{"start":{"line":57,"column":37},"end":{"line":57,"column":40}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","const HOST_RE = /^(\\[[0-9a-f:]+]|(?:\\d{1,3}\\.){3}\\d{1,3}|[a-z][a-z0-9\\-.]+)(?::([a-z][a-z0-9\\-.]+))?(?::(\\d+))?$/i","","function parseHostString (hostString) {","  var parts = hostString.match(HOST_RE)","  if (!parts) {","    throw new Error('Invalid host address: ' + hostString)","  }","  var host = {}","  host.addr = parts[1]","  var tlsName = parts[2]","  if (tlsName) {","    host.tls = tlsName","  }","  var port = parts[3]","  host.port = port ? Number.parseInt(port, 10) : 3000","  return host","}","","function parseHostsString (str) {","  return str","      .split(',')","      .map(function (str) { return str.trim() })","      .filter(function (x) { return !!x })","      .map(parseHostString)","}","","function print (err, results) {","  if (err) {","    console.error(err.message)","  } else {","    results = Array.from(arguments)","      .slice(1)","      .filter(function (elem) {","        return typeof elem !== 'undefined'","      })","    console.info.apply(null, ['Response: '].concat(results))","  }","}","","function kvlistToMap (kvList, MapConstructor) {","  MapConstructor = MapConstructor || Map","  var map = new MapConstructor()","  for (var i = 0; i < kvList.length; i = i + 2) {","    var key = kvList[i]","    var value = kvList[i + 1]","    map.set(key, value)","  }","  return map","}","","module.exports = {","  parseHostString: parseHostString,","  parseHostsString: parseHostsString,","  print: print,","  kvlistToMap: kvlistToMap","}",""],"l":{"17":1,"19":1,"20":0,"21":0,"22":0,"24":0,"25":0,"26":0,"27":0,"28":0,"30":0,"31":0,"32":0,"35":1,"36":0,"38":0,"39":0,"43":1,"44":0,"45":0,"47":0,"50":0,"52":0,"56":1,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"64":0,"67":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/double.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/double.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":1,"8":0,"9":1},"b":{"1":[0,0],"2":[0,0]},"f":{"1":0,"2":0},"fnMap":{"1":{"name":"Double","line":62,"loc":{"start":{"line":62,"column":0},"end":{"line":62,"column":24}}},"2":{"name":"(anonymous_2)","line":78,"loc":{"start":{"line":78,"column":25},"end":{"line":78,"column":37}}}},"statementMap":{"1":{"start":{"line":62,"column":0},"end":{"line":71,"column":1}},"2":{"start":{"line":63,"column":2},"end":{"line":70,"column":3}},"3":{"start":{"line":64,"column":4},"end":{"line":64,"column":35}},"4":{"start":{"line":65,"column":4},"end":{"line":67,"column":5}},"5":{"start":{"line":66,"column":6},"end":{"line":66,"column":53}},"6":{"start":{"line":69,"column":4},"end":{"line":69,"column":28}},"7":{"start":{"line":78,"column":0},"end":{"line":80,"column":1}},"8":{"start":{"line":79,"column":2},"end":{"line":79,"column":20}},"9":{"start":{"line":82,"column":0},"end":{"line":82,"column":23}}},"branchMap":{"1":{"line":63,"type":"if","locations":[{"start":{"line":63,"column":2},"end":{"line":63,"column":2}},{"start":{"line":63,"column":2},"end":{"line":63,"column":2}}]},"2":{"line":65,"type":"if","locations":[{"start":{"line":65,"column":4},"end":{"line":65,"column":4}},{"start":{"line":65,"column":4},"end":{"line":65,"column":4}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @class Double"," *"," * @classdesc All the decimal values with valid fractions (e.g. 123.45) will be"," * stored as double data type in aerospike. To store decimal values with 0"," * fraction as double, the value needs to be wrapped in a `Double` class"," * instance"," *"," * @summary Creates a new Double instance."," *"," * @description Note: The use of the `Double` function without the `new`"," * keyword is deprecated in version 2.0."," *"," * @param {number} value - The value of the double."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const Double = Aerospike.Double"," * const client = Aerospike.client().connect((error) => {"," *   if (error) throw error"," * })"," * const key = new Aerospike.Key('test', 'demo', 'myDouble')"," *"," * var record = { d: 3.1415 }"," * client.put(key, record, (error) => {"," *   if (error) throw error"," * })"," *"," * function incr (value) {"," *   // wrap value in Double since we can't be sure it would be converted to"," *   // double automatically, e.g. 1.0"," *   client.operate(key, [Aerospike.operations.incr('d', new Double(value))], (error) => {"," *     if (error) throw error"," *   })"," * }"," *"," * incr(6.283)"," * incr(1.0)"," *"," * client.get(key, (error, record) => {"," *   console.log(record)"," *   client.close()"," * })"," */","function Double (value) {","  if (this instanceof Double) {","    this.Double = parseFloat(value)","    if (isNaN(this.Double)) {","      throw new TypeError('Not a valid Double value')","    }","  } else {","    return new Double(value)","  }","}","","/**"," * @function Double#value"," *"," * @return {number} value of the Double"," */","Double.prototype.value = function () {","  return this.Double","}","","module.exports = Double",""],"l":{"62":1,"63":0,"64":0,"65":0,"66":0,"69":0,"78":1,"79":0,"82":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/geojson.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/geojson.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":1,"13":0,"14":0,"15":1,"16":0,"17":1,"18":0,"19":1,"20":0,"21":1},"b":{"1":[0,0],"2":[0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},"fnMap":{"1":{"name":"GeoJSON","line":50,"loc":{"start":{"line":50,"column":0},"end":{"line":50,"column":24}}},"2":{"name":"(anonymous_2)","line":84,"loc":{"start":{"line":84,"column":16},"end":{"line":84,"column":36}}},"3":{"name":"(anonymous_3)","line":105,"loc":{"start":{"line":105,"column":18},"end":{"line":105,"column":41}}},"4":{"name":"(anonymous_4)","line":115,"loc":{"start":{"line":115,"column":27},"end":{"line":115,"column":39}}},"5":{"name":"(anonymous_5)","line":124,"loc":{"start":{"line":124,"column":29},"end":{"line":124,"column":41}}},"6":{"name":"(anonymous_6)","line":133,"loc":{"start":{"line":133,"column":26},"end":{"line":133,"column":38}}}},"statementMap":{"1":{"start":{"line":50,"column":0},"end":{"line":65,"column":1}},"2":{"start":{"line":51,"column":2},"end":{"line":64,"column":3}},"3":{"start":{"line":52,"column":4},"end":{"line":61,"column":5}},"4":{"start":{"line":54,"column":8},"end":{"line":54,"column":23}},"5":{"start":{"line":55,"column":8},"end":{"line":55,"column":13}},"6":{"start":{"line":57,"column":8},"end":{"line":57,"column":39}},"7":{"start":{"line":58,"column":8},"end":{"line":58,"column":13}},"8":{"start":{"line":60,"column":8},"end":{"line":60,"column":56}},"9":{"start":{"line":63,"column":4},"end":{"line":63,"column":28}},"10":{"start":{"line":84,"column":0},"end":{"line":86,"column":1}},"11":{"start":{"line":85,"column":2},"end":{"line":85,"column":62}},"12":{"start":{"line":105,"column":0},"end":{"line":108,"column":1}},"13":{"start":{"line":106,"column":2},"end":{"line":106,"column":53}},"14":{"start":{"line":107,"column":2},"end":{"line":107,"column":67}},"15":{"start":{"line":115,"column":0},"end":{"line":117,"column":1}},"16":{"start":{"line":116,"column":2},"end":{"line":116,"column":29}},"17":{"start":{"line":124,"column":0},"end":{"line":126,"column":1}},"18":{"start":{"line":125,"column":2},"end":{"line":125,"column":17}},"19":{"start":{"line":133,"column":0},"end":{"line":135,"column":1}},"20":{"start":{"line":134,"column":2},"end":{"line":134,"column":22}},"21":{"start":{"line":137,"column":0},"end":{"line":137,"column":24}}},"branchMap":{"1":{"line":51,"type":"if","locations":[{"start":{"line":51,"column":2},"end":{"line":51,"column":2}},{"start":{"line":51,"column":2},"end":{"line":51,"column":2}}]},"2":{"line":52,"type":"switch","locations":[{"start":{"line":53,"column":6},"end":{"line":55,"column":13}},{"start":{"line":56,"column":6},"end":{"line":58,"column":13}},{"start":{"line":59,"column":6},"end":{"line":60,"column":56}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @class GeoJSON"," *"," * @classdesc Representation of a GeoJSON value. Since GeoJSON values are JSON"," * objects they need to be wrapped in the <code>GeoJSON</code> class so that"," * the client can distinguish them from other types of objects."," *"," * For more information, please refer to the section on"," * <a href=\"http://www.aerospike.com/docs/guide/geospatial.html\" title=\"Aerospike Geospatial Data Type\">&uArr;Geospatial Data Type</a>"," * in the Aerospike technical documentation."," *"," * @summary Creates a new GeoJSON instance."," *"," * @param {(Object|string)} value - GeoJSON value; the constructor accepts"," * either a string representation of the JSON object, or a JS object."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const GeoJSON = Aerospike.GeoJSON"," * const Key = Aerospike.Key"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   var key = new Key('test', 'demo', 'bob')"," *   var location = new GeoJSON({type: 'Point', coordinates: [103.913, 1.308]})"," *   client.put(key, {loc: location}, (error) => {"," *     if (error) throw error"," *     client.close()"," *   })"," * })"," *"," */","function GeoJSON (json) {","  if (this instanceof GeoJSON) {","    switch (typeof json) {","      case 'string':","        this.str = json","        break","      case 'object':","        this.str = JSON.stringify(json)","        break","      default:","        throw new TypeError('Not a valid GeoJSON value')","    }","  } else {","    return new GeoJSON(json)","  }","}","","/**"," * @function GeoJSON.Point"," *"," * @summary Helper function to create a new GeoJSON object representing the"," * point with the given coordinates."," *"," * @param {number} lng - Longitude"," * @param {number} lat - Latitude"," * @returns {GeoJSON} a GeoJSON representation of the point"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const GeoJSON = Aerospike.GeoJSON"," *"," * var point = GeoJSON.Point(103.913, 1.308)"," */","GeoJSON.Point = function (lng, lat) {","  return new GeoJSON({type: 'Point', coordinates: [lng, lat]})","}","","/**"," * @function GeoJSON.Polygon"," *"," * @summary Helper function to create a new GeoJSON object representing the"," * polygon with the given coordinates."," *"," * @param {...number[]} coordinates - one or more coordinate pairs (lng, lat)"," * describing the polygon."," * @returns {GeoJSON} a GeoJSON representation of the polygon."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const GeoJSON = Aerospike.GeoJSON"," *"," * var polygon = GeoJSON.Polygon([102.913, 0.308], [102.913, 2.308], [104.913, 2.308], [104.913, 0.308], [102.913, 0.308])"," */","GeoJSON.Polygon = function (coordinates) {","  coordinates = Array.prototype.slice.call(arguments)","  return new GeoJSON({type: 'Polygon', coordinates: [coordinates]})","}","","/**"," * Returns the GeoJSON value as a JS object."," *"," * @return {Object}"," */","GeoJSON.prototype.toJSON = function () {","  return JSON.parse(this.str)","}","","/**"," * Returns the GeoJSON value as a string"," *"," * @return {string}"," */","GeoJSON.prototype.toString = function () {","  return this.str","}","","/**"," * Alias for {@link GeoJSON#toJSON}. Returns the GeoJSON value as a JS object."," *"," * @return {Object}"," */","GeoJSON.prototype.value = function () {","  return this.toJSON()","}","","module.exports = GeoJSON",""],"l":{"50":1,"51":0,"52":0,"54":0,"55":0,"57":0,"58":0,"60":0,"63":0,"84":1,"85":0,"105":1,"106":0,"107":0,"115":1,"116":0,"124":1,"125":0,"133":1,"134":0,"137":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/filter.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/filter.js","s":{"1":1,"2":0,"3":0,"4":0,"5":0,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":1,"17":0,"18":0,"19":0,"20":0,"21":1,"22":0,"23":0,"24":1,"25":1,"26":0,"27":0,"28":0,"29":1,"30":1,"31":0,"32":0,"33":1,"34":1,"35":0,"36":0,"37":1,"38":0,"39":0,"40":1,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":0,"52":1,"53":0,"54":0,"55":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"FilterPredicate","line":44,"loc":{"start":{"line":44,"column":0},"end":{"line":44,"column":63}}},"2":{"name":"typeOf","line":70,"loc":{"start":{"line":70,"column":0},"end":{"line":70,"column":24}}},"3":{"name":"dataTypeOf","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":28}}},"4":{"name":"EqualPredicate","line":91,"loc":{"start":{"line":91,"column":0},"end":{"line":91,"column":58}}},"5":{"name":"RangePredicate","line":97,"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":61}}},"6":{"name":"GeoPredicate","line":104,"loc":{"start":{"line":104,"column":0},"end":{"line":104,"column":46}}},"7":{"name":"equalFilter","line":110,"loc":{"start":{"line":110,"column":0},"end":{"line":110,"column":34}}},"8":{"name":"rangeFilter","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":48}}},"9":{"name":"containsFilter","line":120,"loc":{"start":{"line":120,"column":0},"end":{"line":120,"column":48}}},"10":{"name":"geoJSONFilter","line":125,"loc":{"start":{"line":125,"column":0},"end":{"line":125,"column":47}}},"11":{"name":"geoWithinRadiusFilter","line":134,"loc":{"start":{"line":134,"column":0},"end":{"line":134,"column":66}}},"12":{"name":"geoContainsPointFilter","line":139,"loc":{"start":{"line":139,"column":0},"end":{"line":139,"column":59}}}},"statementMap":{"1":{"start":{"line":44,"column":0},"end":{"line":49,"column":1}},"2":{"start":{"line":45,"column":2},"end":{"line":45,"column":28}},"3":{"start":{"line":46,"column":2},"end":{"line":46,"column":16}},"4":{"start":{"line":47,"column":2},"end":{"line":47,"column":26}},"5":{"start":{"line":48,"column":2},"end":{"line":48,"column":47}},"6":{"start":{"line":64,"column":0},"end":{"line":64,"column":53}},"7":{"start":{"line":65,"column":0},"end":{"line":65,"column":36}},"8":{"start":{"line":67,"column":0},"end":{"line":67,"column":28}},"9":{"start":{"line":70,"column":0},"end":{"line":77,"column":1}},"10":{"start":{"line":71,"column":2},"end":{"line":71,"column":35}},"11":{"start":{"line":71,"column":22},"end":{"line":71,"column":35}},"12":{"start":{"line":72,"column":2},"end":{"line":72,"column":30}},"13":{"start":{"line":73,"column":2},"end":{"line":75,"column":3}},"14":{"start":{"line":74,"column":4},"end":{"line":74,"column":52}},"15":{"start":{"line":76,"column":2},"end":{"line":76,"column":18}},"16":{"start":{"line":79,"column":0},"end":{"line":89,"column":1}},"17":{"start":{"line":80,"column":2},"end":{"line":88,"column":3}},"18":{"start":{"line":82,"column":6},"end":{"line":82,"column":36}},"19":{"start":{"line":85,"column":6},"end":{"line":85,"column":37}},"20":{"start":{"line":87,"column":6},"end":{"line":87,"column":64}},"21":{"start":{"line":91,"column":0},"end":{"line":94,"column":1}},"22":{"start":{"line":92,"column":2},"end":{"line":92,"column":75}},"23":{"start":{"line":93,"column":2},"end":{"line":93,"column":18}},"24":{"start":{"line":95,"column":0},"end":{"line":95,"column":46}},"25":{"start":{"line":97,"column":0},"end":{"line":101,"column":1}},"26":{"start":{"line":98,"column":2},"end":{"line":98,"column":75}},"27":{"start":{"line":99,"column":2},"end":{"line":99,"column":16}},"28":{"start":{"line":100,"column":2},"end":{"line":100,"column":16}},"29":{"start":{"line":102,"column":0},"end":{"line":102,"column":46}},"30":{"start":{"line":104,"column":0},"end":{"line":107,"column":1}},"31":{"start":{"line":105,"column":2},"end":{"line":105,"column":95}},"32":{"start":{"line":106,"column":2},"end":{"line":106,"column":18}},"33":{"start":{"line":108,"column":0},"end":{"line":108,"column":44}},"34":{"start":{"line":110,"column":0},"end":{"line":113,"column":1}},"35":{"start":{"line":111,"column":2},"end":{"line":111,"column":34}},"36":{"start":{"line":112,"column":2},"end":{"line":112,"column":49}},"37":{"start":{"line":115,"column":0},"end":{"line":118,"column":1}},"38":{"start":{"line":116,"column":2},"end":{"line":116,"column":41}},"39":{"start":{"line":117,"column":2},"end":{"line":117,"column":63}},"40":{"start":{"line":120,"column":0},"end":{"line":123,"column":1}},"41":{"start":{"line":121,"column":2},"end":{"line":121,"column":34}},"42":{"start":{"line":122,"column":2},"end":{"line":122,"column":60}},"43":{"start":{"line":125,"column":0},"end":{"line":132,"column":1}},"44":{"start":{"line":126,"column":2},"end":{"line":130,"column":3}},"45":{"start":{"line":127,"column":4},"end":{"line":127,"column":28}},"46":{"start":{"line":128,"column":9},"end":{"line":130,"column":3}},"47":{"start":{"line":129,"column":4},"end":{"line":129,"column":33}},"48":{"start":{"line":131,"column":2},"end":{"line":131,"column":48}},"49":{"start":{"line":134,"column":0},"end":{"line":137,"column":1}},"50":{"start":{"line":135,"column":2},"end":{"line":135,"column":82}},"51":{"start":{"line":136,"column":2},"end":{"line":136,"column":59}},"52":{"start":{"line":139,"column":0},"end":{"line":142,"column":1}},"53":{"start":{"line":140,"column":2},"end":{"line":140,"column":67}},"54":{"start":{"line":141,"column":2},"end":{"line":141,"column":59}},"55":{"start":{"line":144,"column":0},"end":{"line":287,"column":1}}},"branchMap":{"1":{"line":48,"type":"binary-expr","locations":[{"start":{"line":48,"column":14},"end":{"line":48,"column":23}},{"start":{"line":48,"column":27},"end":{"line":48,"column":47}}]},"2":{"line":71,"type":"if","locations":[{"start":{"line":71,"column":2},"end":{"line":71,"column":2}},{"start":{"line":71,"column":2},"end":{"line":71,"column":2}}]},"3":{"line":73,"type":"if","locations":[{"start":{"line":73,"column":2},"end":{"line":73,"column":2}},{"start":{"line":73,"column":2},"end":{"line":73,"column":2}}]},"4":{"line":80,"type":"switch","locations":[{"start":{"line":81,"column":4},"end":{"line":82,"column":36}},{"start":{"line":83,"column":4},"end":{"line":83,"column":18}},{"start":{"line":84,"column":4},"end":{"line":85,"column":37}},{"start":{"line":86,"column":4},"end":{"line":87,"column":64}}]},"5":{"line":126,"type":"if","locations":[{"start":{"line":126,"column":2},"end":{"line":126,"column":2}},{"start":{"line":126,"column":2},"end":{"line":126,"column":2}}]},"6":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":9},"end":{"line":128,"column":9}},{"start":{"line":128,"column":9},"end":{"line":128,"column":9}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","// Defining this before the @module so that it's not included in the module.","/**"," * @class FilterPredicate"," * @classdesc Filter predicate to limit the scope of a {@link Query}."," *"," * Filter predicates must be instantiated using the methods in the {@link"," * module:aerospike/filter} module."," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *"," *   // find any records that have a recent location within 1000m radius of the specified coordinates"," *   var statement = {"," *     filters: [ Aerospike.filter.geoWithinRadius('recent', 103.8, 1.305, 1000, Aerospike.indexType.LIST) ]"," *   }"," *   var query = client.query('test', 'demo', statement)"," *"," *   var stream = query.execute()"," *   stream.on('error', (error) => { throw error })"," *   stream.on('data', (record) => console.log(record.bins.recent))"," *   stream.on('end', () => client.close())"," * })"," *"," */","function FilterPredicate (predicate, bin, dataType, indexType) {","  this.predicate = predicate","  this.bin = bin","  this.datatype = dataType","  this.type = indexType || as.indexType.DEFAULT","}","","/**"," * @module aerospike/filter"," *"," * @description This module provides function to specify filter predicates for"," * use in query operations via the {@link Client#query} command."," *"," * **Note:** Currently, queries only support a single filter predicate. To do"," * more advanced filtering, you can use a UDF to process the result set on the"," * server."," *"," * @see {@link Query}"," */","","const as = require('../build/Release/aerospike.node')","const GeoJSON = require('./geojson')","","const util = require('util')","","// Helper function to determine the type of a primitive or Object","function typeOf (value) {","  if (value === null) return 'null'","  var valueType = typeof value","  if (valueType === 'object') {","    valueType = value.constructor.name.toLowerCase()","  }","  return valueType","}","","function dataTypeOf (value) {","  switch (typeOf(value)) {","    case 'string':","      return as.indexDataType.STRING","    case 'number':","    case 'double':","      return as.indexDataType.NUMERIC","    default:","      throw new TypeError('Unknown data type for filter value.')","  }","}","","function EqualPredicate (bin, value, dataType, indexType) {","  FilterPredicate.call(this, as.predicates.EQUAL, bin, dataType, indexType)","  this.val = value","}","util.inherits(EqualPredicate, FilterPredicate)","","function RangePredicate (bin, min, max, dataType, indexType) {","  FilterPredicate.call(this, as.predicates.RANGE, bin, dataType, indexType)","  this.min = min","  this.max = max","}","util.inherits(RangePredicate, FilterPredicate)","","function GeoPredicate (bin, value, indexType) {","  FilterPredicate.call(this, as.predicates.RANGE, bin, as.indexDataType.GEO2DSPHERE, indexType)","  this.val = value","}","util.inherits(GeoPredicate, FilterPredicate)","","function equalFilter (bin, value) {","  var dataType = dataTypeOf(value)","  return new EqualPredicate(bin, value, dataType)","}","","function rangeFilter (bin, min, max, indexType) {","  var dataType = as.indexDataType.NUMERIC","  return new RangePredicate(bin, min, max, dataType, indexType)","}","","function containsFilter (bin, value, indexType) {","  var dataType = dataTypeOf(value)","  return new EqualPredicate(bin, value, dataType, indexType)","}","","function geoJSONFilter (bin, value, indexType) {","  if (value instanceof GeoJSON) {","    value = value.toString()","  } else if (typeof value === 'object') {","    value = JSON.stringify(value)","  }","  return new GeoPredicate(bin, value, indexType)","}","","function geoWithinRadiusFilter (bin, lon, lat, radius, indexType) {","  var value = new GeoJSON({type: 'AeroCircle', coordinates: [[lon, lat], radius]})","  return new GeoPredicate(bin, value.toString(), indexType)","}","","function geoContainsPointFilter (bin, lon, lat, indexType) {","  var value = new GeoJSON({type: 'Point', coordinates: [lon, lat]})","  return new GeoPredicate(bin, value.toString(), indexType)","}","","module.exports = {","  /**","   * @function equal","   * @static","   *","   * String/integer equality filter. The filter matches records with a bin that","   * matches a specified string or integer value.","   *","   * @param {string} bin - The name of the bin.","   * @param {string} value - The filter value.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   */","  equal: equalFilter,","","  /**","   * @function contains","   * @static","   *","   * Filter for list/map membership. The filter matches records with a bin that","   * has a list or map value that contain the given string or integer.","   *","   * @param {string} bin - The name of the bin.","   * @param {(string|integer)} value - The value that should be a member of the","   * list or map in the bin.","   * @param {number} indexType - One of {@link module:aerospike.indexType},","   * i.e. LIST, MAPVALUES or MAPKEYS.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   *","   * @since v2.0","   */","  contains: containsFilter,","","  /**","   * @function range","   * @static","   *","   * Integer range filter. The filter matches records with a bin value in the","   * given integer range. The filter can also be used to match for integer","   * values within the given range that are contained with a list or map by","   * specifying the appropriate index type.","   *","   * @param {string} bin - The name of the bin.","   * @param {number} min - Lower end of the range (inclusive).","   * @param {number} max - Upper end of the range (inclusive).","   * @param {number} [indexType=Aerospike.indexType.DEFAULT] - One of {@link","   * module:aerospike.indexType}, i.e. LIST or MAPVALUES.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   */","  range: rangeFilter,","","  /**","   * @function geoWithin","   * @static","   *","   * @deprecated since v2.0 - use geoWithinGeoJSONRegion() instead.","   */","  geoWithin: geoJSONFilter,","","  /**","   * @function geoWithinGeoJSONRegion","   * @static","   *","   * Geospatial filter that matches points within a given GeoJSON region.","   * Depending on the index type, the filter will match GeoJSON values","   * contained in list or map values as well (requires Aerospike server","   * version >= 3.8).","   *","   * @param {string} bin - The name of the bin.","   * @param {GeoJSON} value - GeoJSON region value.","   * @param {number} [indexType=Aerospike.indexType.DEFAULT] - One of {@link","   * module:aerospike.indexType}, i.e. LIST or MAPVALUES.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   *","   * @since v2.0","   */","  geoWithinGeoJSONRegion: geoJSONFilter,","","  /**","   * @function geoWithinRadius","   * @static","   *","   * Geospatial filter that matches points within a radius from a given point.","   * Depending on the index type, the filter will match GeoJSON values","   * contained in list or map values as well (requires Aerospike server","   * version >= 3.8).","   *","   * @param {string} bin - The name of the bin.","   * @param {number} lng - Longitude of the center point.","   * @param {number} lat - Latitude of the center point.","   * @param {number} radius - Radius in meters.","   * @param {number} [indexType=Aerospike.indexType.DEFAULT] - One of {@link","   * module:aerospike.indexType}, i.e. LIST or MAPVALUES.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   *","   * @since v2.0","   */","  geoWithinRadius: geoWithinRadiusFilter,","","  /**","   * @function geoContains","   * @static","   *","   * @deprecated since v2.0 - use geoContainsGeoJSONPoint() instead.","   */","  geoContains: geoJSONFilter,","","  /**","   * @function geoContainsGeoJSONPoint","   * @static","   *","   * Geospatial filter that matches regions that contain a given GeoJSON point.","   * Depending on the index type, the filter will match GeoJSON regions within","   * list or map values as well (requires Aerospike server version >= 3.8).","   *","   * @param {string} bin - The name of the bin.","   * @param {GeoJSON} value - GeoJSON point value.","   * @param {number} [indexType=Aerospike.indexType.DEFAULT] - One of {@link","   * module:aerospike.indexType}, i.e. LIST or MAPVALUES.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   *","   * @since v2.0","   */","  geoContainsGeoJSONPoint: geoJSONFilter,","","  /**","   * @function geoContainsPoint","   * @static","   *","   * Geospatial filter that matches regions that contain a given lng/lat","   * coordinate. Depending on the index type, the filter will match GeoJSON","   * regions within list or map values as well (requires Aerospike server","   * version >= 3.8).","   *","   * @param {string} bin - The name of the bin.","   * @param {number} lng - Longitude of the point.","   * @param {number} lat - Latitude of the point.","   * @param {number} [indexType=Aerospike.indexType.DEFAULT] - One of {@link","   * module:aerospike.indexType}, i.e. LIST or MAPVALUES.","   * @returns {FilterPredicate} Filter predicate that can be passed to the {@link Client#query} command.","   *","   * @since v2.0","   */","  geoContainsPoint: geoContainsPointFilter","}",""],"l":{"44":1,"45":0,"46":0,"47":0,"48":0,"64":1,"65":1,"67":1,"70":1,"71":0,"72":0,"73":0,"74":0,"76":0,"79":1,"80":0,"82":0,"85":0,"87":0,"91":1,"92":0,"93":0,"95":1,"97":1,"98":0,"99":0,"100":0,"102":1,"104":1,"105":0,"106":0,"108":1,"110":1,"111":0,"112":0,"115":1,"116":0,"117":0,"120":1,"121":0,"122":0,"125":1,"126":0,"127":0,"128":0,"129":0,"131":0,"134":1,"135":0,"136":0,"139":1,"140":0,"141":0,"144":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/lists.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/lists.js","s":{"1":1,"2":1,"3":1,"4":0,"5":0,"6":1,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"fnMap":{"1":{"name":"ListOperation","line":54,"loc":{"start":{"line":54,"column":0},"end":{"line":54,"column":33}}},"2":{"name":"append","line":92,"loc":{"start":{"line":92,"column":10},"end":{"line":92,"column":39}}},"3":{"name":"appendItems","line":129,"loc":{"start":{"line":129,"column":15},"end":{"line":129,"column":48}}},"4":{"name":"insert","line":167,"loc":{"start":{"line":167,"column":10},"end":{"line":167,"column":46}}},"5":{"name":"insertItems","line":206,"loc":{"start":{"line":206,"column":15},"end":{"line":206,"column":55}}},"6":{"name":"pop","line":246,"loc":{"start":{"line":246,"column":7},"end":{"line":246,"column":33}}},"7":{"name":"popRange","line":286,"loc":{"start":{"line":286,"column":12},"end":{"line":286,"column":50}}},"8":{"name":"remove","line":325,"loc":{"start":{"line":325,"column":10},"end":{"line":325,"column":39}}},"9":{"name":"removeRange","line":364,"loc":{"start":{"line":364,"column":15},"end":{"line":364,"column":56}}},"10":{"name":"clear","line":402,"loc":{"start":{"line":402,"column":9},"end":{"line":402,"column":30}}},"11":{"name":"set","line":439,"loc":{"start":{"line":439,"column":7},"end":{"line":439,"column":40}}},"12":{"name":"trim","line":479,"loc":{"start":{"line":479,"column":8},"end":{"line":479,"column":42}}},"13":{"name":"get","line":518,"loc":{"start":{"line":518,"column":7},"end":{"line":518,"column":33}}},"14":{"name":"getRange","line":557,"loc":{"start":{"line":557,"column":12},"end":{"line":557,"column":50}}},"15":{"name":"size","line":637,"loc":{"start":{"line":637,"column":8},"end":{"line":637,"column":28}}}},"statementMap":{"1":{"start":{"line":48,"column":0},"end":{"line":48,"column":53}},"2":{"start":{"line":49,"column":0},"end":{"line":49,"column":29}},"3":{"start":{"line":54,"column":0},"end":{"line":57,"column":1}},"4":{"start":{"line":55,"column":2},"end":{"line":55,"column":14}},"5":{"start":{"line":56,"column":2},"end":{"line":56,"column":16}},"6":{"start":{"line":59,"column":0},"end":{"line":640,"column":1}},"7":{"start":{"line":93,"column":4},"end":{"line":93,"column":56}},"8":{"start":{"line":94,"column":4},"end":{"line":94,"column":20}},"9":{"start":{"line":95,"column":4},"end":{"line":95,"column":13}},"10":{"start":{"line":130,"column":4},"end":{"line":130,"column":62}},"11":{"start":{"line":131,"column":4},"end":{"line":131,"column":18}},"12":{"start":{"line":132,"column":4},"end":{"line":132,"column":13}},"13":{"start":{"line":168,"column":4},"end":{"line":168,"column":56}},"14":{"start":{"line":169,"column":4},"end":{"line":169,"column":20}},"15":{"start":{"line":170,"column":4},"end":{"line":170,"column":20}},"16":{"start":{"line":171,"column":4},"end":{"line":171,"column":13}},"17":{"start":{"line":207,"column":4},"end":{"line":207,"column":62}},"18":{"start":{"line":208,"column":4},"end":{"line":208,"column":20}},"19":{"start":{"line":209,"column":4},"end":{"line":209,"column":18}},"20":{"start":{"line":210,"column":4},"end":{"line":210,"column":13}},"21":{"start":{"line":247,"column":4},"end":{"line":247,"column":53}},"22":{"start":{"line":248,"column":4},"end":{"line":248,"column":20}},"23":{"start":{"line":249,"column":4},"end":{"line":249,"column":13}},"24":{"start":{"line":287,"column":4},"end":{"line":287,"column":59}},"25":{"start":{"line":288,"column":4},"end":{"line":288,"column":20}},"26":{"start":{"line":289,"column":4},"end":{"line":289,"column":20}},"27":{"start":{"line":290,"column":4},"end":{"line":290,"column":13}},"28":{"start":{"line":326,"column":4},"end":{"line":326,"column":56}},"29":{"start":{"line":327,"column":4},"end":{"line":327,"column":20}},"30":{"start":{"line":328,"column":4},"end":{"line":328,"column":13}},"31":{"start":{"line":365,"column":4},"end":{"line":365,"column":62}},"32":{"start":{"line":366,"column":4},"end":{"line":366,"column":20}},"33":{"start":{"line":367,"column":4},"end":{"line":367,"column":20}},"34":{"start":{"line":368,"column":4},"end":{"line":368,"column":13}},"35":{"start":{"line":403,"column":4},"end":{"line":403,"column":53}},"36":{"start":{"line":440,"column":4},"end":{"line":440,"column":53}},"37":{"start":{"line":441,"column":4},"end":{"line":441,"column":20}},"38":{"start":{"line":442,"column":4},"end":{"line":442,"column":20}},"39":{"start":{"line":443,"column":4},"end":{"line":443,"column":13}},"40":{"start":{"line":480,"column":4},"end":{"line":480,"column":54}},"41":{"start":{"line":481,"column":4},"end":{"line":481,"column":20}},"42":{"start":{"line":482,"column":4},"end":{"line":482,"column":20}},"43":{"start":{"line":483,"column":4},"end":{"line":483,"column":13}},"44":{"start":{"line":519,"column":4},"end":{"line":519,"column":53}},"45":{"start":{"line":520,"column":4},"end":{"line":520,"column":20}},"46":{"start":{"line":521,"column":4},"end":{"line":521,"column":13}},"47":{"start":{"line":558,"column":4},"end":{"line":558,"column":59}},"48":{"start":{"line":559,"column":4},"end":{"line":559,"column":20}},"49":{"start":{"line":560,"column":4},"end":{"line":560,"column":20}},"50":{"start":{"line":561,"column":4},"end":{"line":561,"column":13}},"51":{"start":{"line":638,"column":4},"end":{"line":638,"column":52}}},"branchMap":{},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @module aerospike/lists"," *"," * @description This module defines operations on the List data type. Create"," * list operations used by the {@link Client#operate} command."," *"," * For more information, please refer to the"," * <a href=\"http://www.aerospike.com/docs/guide/cdt-list.html\">&uArr;Lists</a>"," * documentation in the Aerospike Feature Guide."," *"," * #### List Index"," *"," * List operations support negative indexing.  If the index is negative, the"," * resolved index starts backwards from end of list."," *"," * Index/Range examples:"," *"," *  - Index 0: First item in list."," *  - Index 4: Fifth item in list."," *  - Index -1: Last item in list."," *  - Index -3: Third to last item in list."," *  - Index 1 Count 2: Second and third items in list."," *  - Index -3 Count 3: Last three items in list."," *  - Index -5 Count 4: Range between fifth to last item to second to last item inclusive."," *"," * If an index is out of bounds, a parameter error will be returned. If a range"," * is partially out of bounds, the valid part of the range will be returned."," *"," * @see {@link Client#operate}"," */","","const as = require('../build/Release/aerospike.node')","const opcodes = as.operations","","/**"," * @private"," */","function ListOperation (op, bin) {","  this.op = op","  this.bin = bin","}","","module.exports = {","","  /**","   * Appends an element to the end of a list.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {any} value - The value to be appended.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const op = Aerospike.operator","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.append('tags', 'orange'),","   *   op.read('tags')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error, result) => {","   *       if (error) throw error","   *       console.log(result.tags) // => [ 'blue', 'yellow', 'pink', 'orange' ]","   *       client.close()","   *     })","   *   })","   * })","   */","  append: function append (bin, value) {","    var op = new ListOperation(opcodes.LIST_APPEND, bin)","    op.value = value","    return op","  },","","  /**","   * Appends a list of elements to the end of a list.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {Array<any>} list - Array of elements to be appended.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const op = Aerospike.operator","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.appendItems('tags', ['orange', 'green']),","   *   op.read('tags')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error, result) => {","   *       if (error) throw error","   *       console.log(result.tags) // => [ 'blue', 'yellow', 'pink', 'orange', 'green' ]","   *       client.close()","   *     })","   *   })","   * })","   */","  appendItems: function appendItems (bin, list) {","    var op = new ListOperation(opcodes.LIST_APPEND_ITEMS, bin)","    op.list = list","    return op","  },","","  /**","   * Inserts an element at the specified index.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - List index at which the new element should be inserted.","   * @param {any} value - The value to be appended.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const op = Aerospike.operator","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.insert('tags', 2, 'orange'),","   *   op.read('tags')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error, result) => {","   *       if (error) throw error","   *       console.log(result.tags) // => [ 'blue', 'yellow', 'orange', 'pink' ]","   *       client.close()","   *     })","   *   })","   * })","   */","  insert: function insert (bin, index, value) {","    var op = new ListOperation(opcodes.LIST_INSERT, bin)","    op.index = index","    op.value = value","    return op","  },","","  /**","   * Inserts a list of element at the specified index.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - List index at which the new element should be inserted.","   * @param {Array<any>} list - Array of elements to be appended.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const op = Aerospike.operator","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.insertItems('tags', 2, ['orange', 'green']),","   *   op.read('tags')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error, result) => {","   *       if (error) throw error","   *       console.log(result.tags) // => [ 'blue', 'yellow', 'orange', 'green', 'pink' ]","   *       client.close()","   *     })","   *   })","   * })","   */","  insertItems: function insertItems (bin, index, list) {","    var op = new ListOperation(opcodes.LIST_INSERT_ITEMS, bin)","    op.index = index","    op.list = list","    return op","  },","","  /**","   * Removes and returns the list element at the specified index.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - List index of the element to be removed.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const op = Aerospike.operator","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.pop('tags', 1)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error, result) => {","   *       if (error) throw error","   *       console.log(result.tags) // => [ 'yellow' ]","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'blue', 'pink' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  pop: function pop (bin, index) {","    var op = new ListOperation(opcodes.LIST_POP, bin)","    op.index = index","    return op","  },","","  /**","   * Removes and returns the list elements at the specified range.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the first element in the range.","   * @param {number} [count] - Number of elements in the range; if not specified, the range extends to the end of the list.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.popRange('tags', 0, 2)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error, result) => {","   *       if (error) throw error","   *       console.log(result.tags) // => [ 'blue', 'yellow' ]","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'pink' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  popRange: function popRange (bin, index, count) {","    var op = new ListOperation(opcodes.LIST_POP_RANGE, bin)","    op.index = index","    op.count = count","    return op","  },","","  /**","   * Removes the list element at the specified index.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the element to be removed","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.remove('tags', 1)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'blue', 'pink' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  remove: function remove (bin, index) {","    var op = new ListOperation(opcodes.LIST_REMOVE, bin)","    op.index = index","    return op","  },","","  /**","   * Removes the list elements at the specified range.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the first element in the range.","   * @param {number} [count] - Number of elements in the range; if not specified, the range extends to the end of the list.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.removeRange('tags', 0, 2)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'pink' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  removeRange: function removeRange (bin, index, count) {","    var op = new ListOperation(opcodes.LIST_REMOVE_RANGE, bin)","    op.index = index","    op.count = count","    return op","  },","","  /**","   * Removes all the elements from the list.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.clear('tags')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  clear: function clear (bin) {","    return new ListOperation(opcodes.LIST_CLEAR, bin)","  },","","  /**","   * Sets the list element at the specified index to a new value.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the element to be replaced.","   * @param {any} value - The new value to assigned to the list element.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.set('tags', 1, 'green')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'blue', 'green', 'pink' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  set: function set (bin, index, value) {","    var op = new ListOperation(opcodes.LIST_SET, bin)","    op.index = index","    op.value = value","    return op","  },","","  /**","   * Removes all list elements **not** within the specified range.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the first element in the range.","   * @param {number} [count] - Number of elements in the range; if not specified, the range extends to the end of the list.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.trim('tags', 1, 1)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'yellow' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  trim: function trim (bin, index, count) {","    var op = new ListOperation(opcodes.LIST_TRIM, bin)","    op.index = index","    op.count = count","    return op","  },","","  /**","   * Returns the list element at the specified index.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the element to be returned.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.get('tags', 0)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: 'blue' }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  get: function get (bin, index) {","    var op = new ListOperation(opcodes.LIST_GET, bin)","    op.index = index","    return op","  },","","  /**","   * Returns the list element at the specified range.","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @param {number} index - Index of the first element in the range.","   * @param {number} [count] - Number of elements in the range; if not specified, the range extends to the end of the list.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.getRange('tags', 1)","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       client.get(key, (error, record) => {","   *         if (error) throw error","   *         console.log(record) // => { tags: [ 'yellow', 'pink' ] }","   *         client.close()","   *       })","   *     })","   *   })","   * })","   */","  getRange: function getRange (bin, index, count) {","    var op = new ListOperation(opcodes.LIST_GET_RANGE, bin)","    op.index = index","    op.count = count","    return op","  },","","// pending server-side support for list increment operation [AER-5149]","//","//  /**","//   * Increments the value at the given list index and returns the final result.","//   *","//   * @param {string} bin - The name of the bin. The bin must contain a List value.","//   * @param {number} index - Index of the list element to increment.","//   * @param {number} value - Value to increment the element by.","//   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","//   *","//   * @since v2.4","//   *","//   * @example","//   *","//   * const Aerospike = require('aerospike')","//   * const lists = Aerospike.lists","//   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","//   *","//   * var ops = [","//   *   lists.increment('counters', 1, 3)","//   * ]","//   *","//   * Aerospike.client().connect((error, client) => {","//   *   if (error) throw error","//   *   client.put(key, { counters: [1, 2, 3] }, (error) => {","//   *     if (error) throw error","//   *     client.operate(key, ops, (error, result) => {","//   *       if (error) throw error","//   *       console.log(result['counters']) => 5","//   *       client.get(key, (error, record) => {","//   *         if (error) throw error","//   *         console.log(record) // => { counters: [1, 5, 3] }","//   *         client.close()","//   *       })","//   *     })","//   *   })","//   * })","//   */","//  increment: function increment (bin, index, value) {","//    var op = new ListOperation(opcodes.LIST_INCREMENT, bin)","//    op.index = index","//    op.value = value","//    return op","//  },","","  /**","   * Returns the element count of the list","   *","   * @param {string} bin - The name of the bin. The bin must contain a List value.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   *","   * @example","   *","   * const Aerospike = require('aerospike')","   * const lists = Aerospike.lists","   * const key = new Aerospike.Key('test', 'demo', 'mykey1')","   *","   * var ops = [","   *   lists.size('tags')","   * ]","   *","   * Aerospike.client().connect((error, client) => {","   *   if (error) throw error","   *   client.put(key, { tags: ['blue', 'yellow', 'pink'] }, (error) => {","   *     if (error) throw error","   *     client.operate(key, ops, (error) => {","   *       if (error) throw error","   *       console.log(record) // => { tags: 3 }","   *       client.close()","   *     })","   *   })","   * })","   */","  size: function size (bin) {","    return new ListOperation(opcodes.LIST_SIZE, bin)","  }","}",""],"l":{"48":1,"49":1,"54":1,"55":0,"56":0,"59":1,"93":0,"94":0,"95":0,"130":0,"131":0,"132":0,"168":0,"169":0,"170":0,"171":0,"207":0,"208":0,"209":0,"210":0,"247":0,"248":0,"249":0,"287":0,"288":0,"289":0,"290":0,"326":0,"327":0,"328":0,"365":0,"366":0,"367":0,"368":0,"403":0,"440":0,"441":0,"442":0,"443":0,"480":0,"481":0,"482":0,"483":0,"519":0,"520":0,"521":0,"558":0,"559":0,"560":0,"561":0,"638":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/maps.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/lib/maps.js","s":{"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":1,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0},"b":{},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0},"fnMap":{"1":{"name":"MapOperation","line":102,"loc":{"start":{"line":102,"column":0},"end":{"line":102,"column":32}}},"2":{"name":"setPolicy","line":186,"loc":{"start":{"line":186,"column":13},"end":{"line":186,"column":46}}},"3":{"name":"put","line":208,"loc":{"start":{"line":208,"column":7},"end":{"line":208,"column":46}}},"4":{"name":"putItems","line":232,"loc":{"start":{"line":232,"column":12},"end":{"line":232,"column":51}}},"5":{"name":"increment","line":258,"loc":{"start":{"line":258,"column":13},"end":{"line":258,"column":57}}},"6":{"name":"decrement","line":285,"loc":{"start":{"line":285,"column":13},"end":{"line":285,"column":57}}},"7":{"name":"clear","line":303,"loc":{"start":{"line":303,"column":9},"end":{"line":303,"column":30}}},"8":{"name":"removeByKey","line":318,"loc":{"start":{"line":318,"column":15},"end":{"line":318,"column":59}}},"9":{"name":"removeByKeyList","line":336,"loc":{"start":{"line":336,"column":19},"end":{"line":336,"column":68}}},"10":{"name":"removeByKeyRange","line":359,"loc":{"start":{"line":359,"column":20},"end":{"line":359,"column":76}}},"11":{"name":"removeByValue","line":378,"loc":{"start":{"line":378,"column":17},"end":{"line":378,"column":65}}},"12":{"name":"removeByValueList","line":396,"loc":{"start":{"line":396,"column":21},"end":{"line":396,"column":74}}},"13":{"name":"removeByValueRange","line":419,"loc":{"start":{"line":419,"column":22},"end":{"line":419,"column":80}}},"14":{"name":"removeByIndex","line":438,"loc":{"start":{"line":438,"column":17},"end":{"line":438,"column":65}}},"15":{"name":"removeByIndexRange","line":458,"loc":{"start":{"line":458,"column":22},"end":{"line":458,"column":82}}},"16":{"name":"removeByRank","line":477,"loc":{"start":{"line":477,"column":16},"end":{"line":477,"column":62}}},"17":{"name":"removeByRankRange","line":497,"loc":{"start":{"line":497,"column":21},"end":{"line":497,"column":79}}},"18":{"name":"size","line":511,"loc":{"start":{"line":511,"column":8},"end":{"line":511,"column":28}}},"19":{"name":"getByKey","line":526,"loc":{"start":{"line":526,"column":12},"end":{"line":526,"column":53}}},"20":{"name":"getByKeyRange","line":549,"loc":{"start":{"line":549,"column":17},"end":{"line":549,"column":70}}},"21":{"name":"getByValue","line":568,"loc":{"start":{"line":568,"column":14},"end":{"line":568,"column":59}}},"22":{"name":"getByValueRange","line":591,"loc":{"start":{"line":591,"column":19},"end":{"line":591,"column":74}}},"23":{"name":"getByIndex","line":610,"loc":{"start":{"line":610,"column":14},"end":{"line":610,"column":59}}},"24":{"name":"getByIndexRange","line":630,"loc":{"start":{"line":630,"column":19},"end":{"line":630,"column":76}}},"25":{"name":"getByRank","line":649,"loc":{"start":{"line":649,"column":13},"end":{"line":649,"column":56}}},"26":{"name":"getByRankRange","line":669,"loc":{"start":{"line":669,"column":18},"end":{"line":669,"column":73}}}},"statementMap":{"1":{"start":{"line":95,"column":0},"end":{"line":95,"column":53}},"2":{"start":{"line":96,"column":0},"end":{"line":96,"column":29}},"3":{"start":{"line":97,"column":0},"end":{"line":97,"column":32}},"4":{"start":{"line":102,"column":0},"end":{"line":105,"column":1}},"5":{"start":{"line":103,"column":2},"end":{"line":103,"column":14}},"6":{"start":{"line":104,"column":2},"end":{"line":104,"column":16}},"7":{"start":{"line":107,"column":0},"end":{"line":678,"column":1}},"8":{"start":{"line":187,"column":4},"end":{"line":187,"column":58}},"9":{"start":{"line":188,"column":4},"end":{"line":188,"column":22}},"10":{"start":{"line":189,"column":4},"end":{"line":189,"column":13}},"11":{"start":{"line":209,"column":4},"end":{"line":209,"column":51}},"12":{"start":{"line":210,"column":4},"end":{"line":210,"column":16}},"13":{"start":{"line":211,"column":4},"end":{"line":211,"column":20}},"14":{"start":{"line":212,"column":4},"end":{"line":212,"column":22}},"15":{"start":{"line":213,"column":4},"end":{"line":213,"column":13}},"16":{"start":{"line":233,"column":4},"end":{"line":233,"column":57}},"17":{"start":{"line":234,"column":4},"end":{"line":234,"column":20}},"18":{"start":{"line":235,"column":4},"end":{"line":235,"column":22}},"19":{"start":{"line":236,"column":4},"end":{"line":236,"column":13}},"20":{"start":{"line":259,"column":4},"end":{"line":259,"column":57}},"21":{"start":{"line":260,"column":4},"end":{"line":260,"column":16}},"22":{"start":{"line":261,"column":4},"end":{"line":261,"column":18}},"23":{"start":{"line":262,"column":4},"end":{"line":262,"column":22}},"24":{"start":{"line":263,"column":4},"end":{"line":263,"column":13}},"25":{"start":{"line":286,"column":4},"end":{"line":286,"column":57}},"26":{"start":{"line":287,"column":4},"end":{"line":287,"column":16}},"27":{"start":{"line":288,"column":4},"end":{"line":288,"column":18}},"28":{"start":{"line":289,"column":4},"end":{"line":289,"column":22}},"29":{"start":{"line":290,"column":4},"end":{"line":290,"column":13}},"30":{"start":{"line":304,"column":4},"end":{"line":304,"column":51}},"31":{"start":{"line":319,"column":4},"end":{"line":319,"column":61}},"32":{"start":{"line":320,"column":4},"end":{"line":320,"column":16}},"33":{"start":{"line":321,"column":4},"end":{"line":321,"column":30}},"34":{"start":{"line":322,"column":4},"end":{"line":322,"column":13}},"35":{"start":{"line":337,"column":4},"end":{"line":337,"column":66}},"36":{"start":{"line":338,"column":4},"end":{"line":338,"column":18}},"37":{"start":{"line":339,"column":4},"end":{"line":339,"column":30}},"38":{"start":{"line":340,"column":4},"end":{"line":340,"column":13}},"39":{"start":{"line":360,"column":4},"end":{"line":360,"column":67}},"40":{"start":{"line":361,"column":4},"end":{"line":361,"column":20}},"41":{"start":{"line":362,"column":4},"end":{"line":362,"column":16}},"42":{"start":{"line":363,"column":4},"end":{"line":363,"column":30}},"43":{"start":{"line":364,"column":4},"end":{"line":364,"column":13}},"44":{"start":{"line":379,"column":4},"end":{"line":379,"column":63}},"45":{"start":{"line":380,"column":4},"end":{"line":380,"column":20}},"46":{"start":{"line":381,"column":4},"end":{"line":381,"column":30}},"47":{"start":{"line":382,"column":4},"end":{"line":382,"column":13}},"48":{"start":{"line":397,"column":4},"end":{"line":397,"column":68}},"49":{"start":{"line":398,"column":4},"end":{"line":398,"column":22}},"50":{"start":{"line":399,"column":4},"end":{"line":399,"column":30}},"51":{"start":{"line":400,"column":4},"end":{"line":400,"column":13}},"52":{"start":{"line":420,"column":4},"end":{"line":420,"column":69}},"53":{"start":{"line":421,"column":4},"end":{"line":421,"column":20}},"54":{"start":{"line":422,"column":4},"end":{"line":422,"column":16}},"55":{"start":{"line":423,"column":4},"end":{"line":423,"column":30}},"56":{"start":{"line":424,"column":4},"end":{"line":424,"column":13}},"57":{"start":{"line":439,"column":4},"end":{"line":439,"column":63}},"58":{"start":{"line":440,"column":4},"end":{"line":440,"column":20}},"59":{"start":{"line":441,"column":4},"end":{"line":441,"column":30}},"60":{"start":{"line":442,"column":4},"end":{"line":442,"column":13}},"61":{"start":{"line":459,"column":4},"end":{"line":459,"column":69}},"62":{"start":{"line":460,"column":4},"end":{"line":460,"column":20}},"63":{"start":{"line":461,"column":4},"end":{"line":461,"column":20}},"64":{"start":{"line":462,"column":4},"end":{"line":462,"column":30}},"65":{"start":{"line":463,"column":4},"end":{"line":463,"column":13}},"66":{"start":{"line":478,"column":4},"end":{"line":478,"column":62}},"67":{"start":{"line":479,"column":4},"end":{"line":479,"column":18}},"68":{"start":{"line":480,"column":4},"end":{"line":480,"column":30}},"69":{"start":{"line":481,"column":4},"end":{"line":481,"column":13}},"70":{"start":{"line":498,"column":4},"end":{"line":498,"column":68}},"71":{"start":{"line":499,"column":4},"end":{"line":499,"column":18}},"72":{"start":{"line":500,"column":4},"end":{"line":500,"column":20}},"73":{"start":{"line":501,"column":4},"end":{"line":501,"column":30}},"74":{"start":{"line":502,"column":4},"end":{"line":502,"column":13}},"75":{"start":{"line":512,"column":4},"end":{"line":512,"column":50}},"76":{"start":{"line":527,"column":4},"end":{"line":527,"column":58}},"77":{"start":{"line":528,"column":4},"end":{"line":528,"column":16}},"78":{"start":{"line":529,"column":4},"end":{"line":529,"column":30}},"79":{"start":{"line":530,"column":4},"end":{"line":530,"column":13}},"80":{"start":{"line":550,"column":4},"end":{"line":550,"column":64}},"81":{"start":{"line":551,"column":4},"end":{"line":551,"column":20}},"82":{"start":{"line":552,"column":4},"end":{"line":552,"column":16}},"83":{"start":{"line":553,"column":4},"end":{"line":553,"column":30}},"84":{"start":{"line":554,"column":4},"end":{"line":554,"column":13}},"85":{"start":{"line":569,"column":4},"end":{"line":569,"column":60}},"86":{"start":{"line":570,"column":4},"end":{"line":570,"column":20}},"87":{"start":{"line":571,"column":4},"end":{"line":571,"column":30}},"88":{"start":{"line":572,"column":4},"end":{"line":572,"column":13}},"89":{"start":{"line":592,"column":4},"end":{"line":592,"column":66}},"90":{"start":{"line":593,"column":4},"end":{"line":593,"column":20}},"91":{"start":{"line":594,"column":4},"end":{"line":594,"column":16}},"92":{"start":{"line":595,"column":4},"end":{"line":595,"column":30}},"93":{"start":{"line":596,"column":4},"end":{"line":596,"column":13}},"94":{"start":{"line":611,"column":4},"end":{"line":611,"column":60}},"95":{"start":{"line":612,"column":4},"end":{"line":612,"column":20}},"96":{"start":{"line":613,"column":4},"end":{"line":613,"column":30}},"97":{"start":{"line":614,"column":4},"end":{"line":614,"column":13}},"98":{"start":{"line":631,"column":4},"end":{"line":631,"column":66}},"99":{"start":{"line":632,"column":4},"end":{"line":632,"column":20}},"100":{"start":{"line":633,"column":4},"end":{"line":633,"column":20}},"101":{"start":{"line":634,"column":4},"end":{"line":634,"column":30}},"102":{"start":{"line":635,"column":4},"end":{"line":635,"column":13}},"103":{"start":{"line":650,"column":4},"end":{"line":650,"column":59}},"104":{"start":{"line":651,"column":4},"end":{"line":651,"column":18}},"105":{"start":{"line":652,"column":4},"end":{"line":652,"column":30}},"106":{"start":{"line":653,"column":4},"end":{"line":653,"column":13}},"107":{"start":{"line":670,"column":4},"end":{"line":670,"column":65}},"108":{"start":{"line":671,"column":4},"end":{"line":671,"column":18}},"109":{"start":{"line":672,"column":4},"end":{"line":672,"column":20}},"110":{"start":{"line":673,"column":4},"end":{"line":673,"column":30}},"111":{"start":{"line":674,"column":4},"end":{"line":674,"column":13}}},"branchMap":{},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","/**"," * @module aerospike/maps"," *"," * @description This module defines operations on the Sorted Map data type that"," * can be used with the {@link Client#operate} command. Operations on Sorted"," * Maps require Aerospike Server"," * <a href=\"http://www.aerospike.com/download/server/notes.html#3.8.4\">&uArr;version 3.8.4</a>"," * or later."," *"," * For more information, please refer to the"," * <a href=\"http://www.aerospike.com/docs/guide/cdt-map.html\">&uArr;Maps</a>"," * documentation in the Aerospike Feature Guide."," *"," * #### Sorted Maps"," *"," * The Map data type supports both unordered and ordered maps. Maps can be"," * ordered by key, or by key and value. By default, maps are unordered. The map"," * order is controlled through the map policy and can be set either when the"," * map is created through the {@link module:aerospike/maps.put|put} or {@link"," * module:aerospike/maps.putItems|putItems} operations or later on through the"," * {@link module:aerospike/maps.setPolicy|setPolicy} operation."," *"," * All maps maintain an index and a rank. The index is the item offset from the"," * start of the map, for both unordered and ordered maps. The rank is the"," * sorted index of the value component. Map supports negative indexing for"," * index and rank."," *"," * Index examples:"," *"," *  - Index 0: First item in map."," *  - Index 4: Fifth item in map."," *  - Index -1: Last item in map."," *  - Index -3: Third to last item in map."," *  - Index 1 Count 2: Second and third items in map."," *  - Index -3 Count 3: Last three items in map."," *  - Index -5 Count 4: Range between fifth to last item to second to last item inclusive."," *"," * Rank examples:"," *"," *  - Rank 0: Item with lowest value rank in map."," *  - Rank 4: Fifth lowest ranked item in map."," *  - Rank -1: Item with highest ranked value in map."," *  - Rank -3: Item with third highest ranked value in map."," *  - Rank 1 Count 2: Second and third lowest ranked items in map."," *  - Rank -3 Count 3: Top three ranked items in map."," *"," * @see {@link Client#operate}"," *"," * @example"," *"," * const Aerospike = require('aerospike')"," * const maps = Aerospike.maps"," * const key = new Aerospike.Key('test', 'demo', 'key1')"," *"," * var keyOrderedPolicy = { order: maps.order.KEY_ORDERED }"," * var createOnlyPolicy = { writeMode: maps.writeMode.CREATE_ONLY }"," * var ops = ["," *   maps.put('map', 'e', 5, keyOrderedPolicy),                    // => { map: { e: 5 } }"," *   maps.putItems('map', { d: 4, b: 2, c: 3 }),                   // => { map: { b: 2, c: 3, d: 4, e: 5 } }"," *   maps.putItems('map', { c: 99, a: 1 }, createOnlyPolicy),      // => { map: { a: 1, b: 2, c: 3, d: 4, e: 5 } }"," *   maps.removeByValue('map', 3),                                 // => { map: { a: 1, b: 2, d: 4, e: 5 } }"," *   maps.removeByIndexRange('map', -2, 2, maps.returnType.KEY)    // => { map: { a: 1, b: 2 } }"," * ]"," *"," * Aerospike.connect((error, client) => {"," *   if (error) throw error"," *   client.operate(key, ops, (error, result) => {"," *     if (error) throw error"," *     console.log(result)                                         // => { map: ['d', 'e'] }"," *     client.get(key, (error, record) => {"," *       if (error) throw error"," *       console.log(record)                                       // => { map: { a: 1, b: 2 } }"," *       client.close()"," *     })"," *   })"," * })"," */","","const as = require('../build/Release/aerospike.node')","const opcodes = as.operations","const utils = require('./utils')","","/**"," * @private"," */","function MapOperation (op, bin) {","  this.op = op","  this.bin = bin","}","","module.exports = {","","  /**","   * @typedef {Object} module:aerospike/maps~MapPolicy","   *","   * A policy affecting the behavior of map operations.","   *","   * @property order - Sort order for the map. See {@link","   * module:aerospike/maps.order} for possible values; default is","   * <code>UNORDERED</code>.","   *","   * @property writeMode - Specifies the behavior when replacing or inserting","   * map items. See {@link module:aerospike/maps.writeMode} for possible","   * values; default is <code>UPDATE</code>.","   */","","  /**","   * Map order. The order determine what kind of index the Aerospike server","   * maintains for the map.","   *","   * @member {Object} order","   * @readonly","   * @static","   *","   * @property UNORDERED - Map is not ordered. This is the default.","   * @property KEY_ORDERED - Order map by key.","   * @property KEY_VALUE_ORDERED - Order map by key, then value.","   */","","  /**","   * Map write mode. The write mode determines whether a write operation","   * succeeds, depending on whether the map key(s) to be written already exist.","   * It also determines whether a new map will be created automatically if the","   * record bin, which the map operation is targeting, is currently empty.","   *","   * @member {Object} writeMode","   * @readonly","   * @static","   *","   * @property UPDATE - If the key already exists, the item will be","   * overwritten. If the key does not exist, a new item will be created. This","   * is the default write mode.","   * @property UPDATE_ONLY - If the key already exists, the item will be","   * overwritten. If the key does not exist, the write will fail.","   * @property CREATE_ONLY - If the key already exists, the write will fail. If","   * the key does not exist, a new item will be created.","   */","","  /**","   * Map return type. The return type determines what data of the selected","   * items the get and remove operations return in the result of the {@link","   * Client#operate} command. It is optional to specify the return type for","   * remove operations; default is <code>NONE</code>. For get operations the","   * return type parameter is required.","   *","   * @member {Object} returnType","   * @readonly","   * @static","   *","   * @property NONE - Do not return a result; this is the default.","   * @property INDEX - Return key index order. (0 = first key, 1 = second key, ...)","   * @property REVERSE_INDEX - Return reverse key order. (0 = last key, -1 = second last key, ...)","   * @property RANK - Return value order. (0 = smallest value, 1 = second smallest value, ...)","   * @property REVERSE_RANK - Return reverse value order. (0 = largest value, -1 = second largest value, ...)","   * @property COUNT - Return count of items selected.","   * @property KEY - Return key for single key read and key list for range read.","   * @property VALUE - Return value for single key read and value list for range read.","   * @property KEY_VALUE - Return map items keys and values as an Array, i.e. [key1, value1, key2, value2, ...].","   */","","  /**","   * Sets map policy attributes.","   *","   * This operation does not return any result.","   *","   * @param {string} bin - The name of the bin. The bin must contain a Map value.","   * @param {module:aerospike/maps~MapPolicy} policy - The map policy.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  setPolicy: function setPolicy (bin, policy) {","    var op = new MapOperation(opcodes.MAP_SET_POLICY, bin)","    op.policy = policy","    return op","  },","","  /**","   * Writes a key/value item to the map. Depending on the map policy and","   * whether an entry with the same key already exists in the map, a new key","   * will be added to the map or the existing entry with the same key will be","   * updated. If the bin does not yet contain a map value, a new map may be created.","   *","   * This operation returns the new size of the map.","   *","   * @param {string} bin - The name of the bin. If the bin exists, it must","   * contain a Map value; if it does not yet exist, a new Map may be created","   * depending on the map policy's write mode.","   * @param {any} key - Map key to write.","   * @param {any} value - Map value to write.","   * @param {module:aerospike/maps~MapPolicy} [policy] - The map policy.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  put: function put (bin, key, value, policy) {","    var op = new MapOperation(opcodes.MAP_PUT, bin)","    op.key = key","    op.value = value","    op.policy = policy","    return op","  },","","  /**","   * Writes each entry of the given map to the map bin on the server. Depending","   * on the map policy and whether an entry with the same key already exists in","   * the map, a new entry will be added to the map or the existing entry with","   * the same key will be updated. If the bin does not yet contain a map value,","   * a new map may be created.","   *","   * This operation returns the new size of the map.","   *","   * @param {string} bin - The name of the bin. If the bin exists, it must","   * contain a Map value; if it does not yet exist, a new Map may be created","   * depending on the map policy's write mode.","   * @param {object} items - One or more key value pairs to write to the map.","   * @param {module:aerospike/maps~MapPolicy} [policy] - The map policy.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  putItems: function putItems (bin, items, policy) {","    var op = new MapOperation(opcodes.MAP_PUT_ITEMS, bin)","    op.items = items","    op.policy = policy","    return op","  },","","  /**","   * Increments the map entry identified by the given key by the value","   * <code>incr</code>. Valid only for numeric values.","   *","   * If a map entry with the given key does not exist, the map policy's write","   * mode determines whether a new entry will be created same as for the","   * {@link module:aerospike/maps.put|put} command. This operation may create a","   * new map if the map bin is currently empty.","   *","   * This operation returns the new value of the map entry.","   *","   * @param {string} bin - The name of the bin. If the bin exists, it must","   * contain a Map value; if it does not yet exist, a new Map may be created","   * depending on the map policy's write mode.","   * @param {any} key - The map key.","   * @param {number} incr - The value to increment the map entry by.","   * @param {module:aerospike/maps~MapPolicy} [policy] - The map policy.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  increment: function increment (bin, key, incr, policy) {","    var op = new MapOperation(opcodes.MAP_INCREMENT, bin)","    op.key = key","    op.incr = incr","    op.policy = policy","    return op","  },","","  /**","   * Decrements the map entry identified by the given key by the value","   * <code>decr</code>. Valid only for numeric values.","   *","   * If a map entry with the given key does not exist, the map policy's write","   * mode determines whether a new entry will be created same as for the","   * {@link module:aerospike/maps.put|put} command. This operation may create a","   * new map if the map bin is currently empty.","   *","   * This operation returns the new value of the map entry.","   *","   * @param {string} bin - The name of the bin. If the bin exists, it must","   * contain a Map value; if it does not yet exist, a new Map may be created","   * depending on the map policy's write mode.","   * @param {any} key - The map key.","   * @param {number} decr - The value to decrement the map entry by.","   * @param {module:aerospike/maps~MapPolicy} [policy] - The map policy.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  decrement: function decrement (bin, key, decr, policy) {","    var op = new MapOperation(opcodes.MAP_DECREMENT, bin)","    op.key = key","    op.decr = decr","    op.policy = policy","    return op","  },","","  /**","   * Removes all items in the map.","   *","   * This operation does not return any result.","   *","   * @param {string} bin - The name of the bin. If the bin exists, it must","   * contain a Map value; if it does not yet exist, a new Map may be created","   * depending on the map policy's write mode.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  clear: function clear (bin) {","    return new MapOperation(opcodes.MAP_CLEAR, bin)","  },","","  /**","   * Removes a single item identified by key from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {any} key - The map key.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByKey: function removeByKey (bin, key, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_KEY, bin)","    op.key = key","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items identified by key from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {Array<any>} keys - An array of map keys.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByKeyList: function removeByKeyList (bin, keys, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_KEY_LIST, bin)","    op.keys = keys","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items identified by a range of keys from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {?any} begin - Start key in the range (inclusive). If set to","   * <code>null</code>, the range includes all keys less than the","   * <code>end</code> key.","   * @param {?any} end - End key in the range (exclusive). If set to","   * <code>null</code>, the range includes all keys greater than or equal to the","   * <code>begin</code> key.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByKeyRange: function removeByKeyRange (bin, begin, end, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_KEY_RANGE, bin)","    op.begin = begin","    op.end = end","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items identified by a single value from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {any} value - The map value.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByValue: function removeByValue (bin, value, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_VALUE, bin)","    op.value = value","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items identified by a list of values from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {Array<any>} values - An array of map values.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByValueList: function removeByValueList (bin, values, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_VALUE_LIST, bin)","    op.values = values","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items identified by a range of values from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {?any} begin - Start values in the range (inclusive). If set to","   * <code>null</code>, the range includes all values less than the","   * <code>end</code> value.","   * @param {?any} end - End value in the range (exclusive). If set to","   * <code>null</code>, the range includes all values greater than or equal to the","   * <code>begin</code> value.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByValueRange: function removeByValueRange (bin, begin, end, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_VALUE_RANGE, bin)","    op.begin = begin","    op.end = end","    op.returnType = returnType","    return op","  },","","  /**","   * Removes a single item identified by it's index value from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} index - Index of the entry to remove.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByIndex: function removeByIndex (bin, index, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_INDEX, bin)","    op.index = index","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items in the specified index range from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} index - Starting index.","   * @param {?number} count - Number of items to delete; if not specified, the","   * range includes all items starting from <code>index</code>.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByIndexRange: function removeByIndexRange (bin, index, count, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_INDEX_RANGE, bin)","    op.index = index","    op.count = count","    op.returnType = returnType","    return op","  },","","  /**","   * Removes a single item identified by it's rank value from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} rank - Rank of the entry to remove.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByRank: function removeByRank (bin, rank, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_RANK, bin)","    op.rank = rank","    op.returnType = returnType","    return op","  },","","  /**","   * Removes one or more items in the specified rank range from the map.","   *","   * This operation returns the removed data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} index - Starting rank.","   * @param {?number} count - Number of items to delete; if not specified, the","   * range includes all items starting from <code>rank</code>.","   * @param {number} [returnType] - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  removeByRankRange: function removeByRankRange (bin, rank, count, returnType) {","    var op = new MapOperation(opcodes.MAP_REMOVE_BY_RANK_RANGE, bin)","    op.rank = rank","    op.count = count","    op.returnType = returnType","    return op","  },","","  /**","   * Returns the size of the map.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  size: function size (bin) {","    return new MapOperation(opcodes.MAP_SIZE, bin)","  },","","  /**","   * Retrieves a single item identified by key from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {any} key - The map key.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByKey: function getByKey (bin, key, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_KEY, bin)","    op.key = key","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves one or more items identified by a range of keys from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {?any} begin - Start key in the range (inclusive). If set to","   * <code>null</code>, the range includes all keys less than the","   * <code>end</code> key.","   * @param {?any} end - End key in the range (exclusive). If set to","   * <code>null</code>, the range includes all keys greater than or equal to the","   * <code>begin</code> key.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByKeyRange: function getByKeyRange (bin, begin, end, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_KEY_RANGE, bin)","    op.begin = begin","    op.end = end","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves one or more items identified by a single value from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {any} value - The map value.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByValue: function getByValue (bin, value, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_VALUE, bin)","    op.value = value","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves one or more items identified by a range of values from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {?any} begin - Start values in the range (inclusive). If set to","   * <code>null</code>, the range includes all values less than the","   * <code>end</code> value.","   * @param {?any} end - End value in the range (exclusive). If set to","   * <code>null</code>, the range includes all values greater than or equal to the","   * <code>begin</code> value.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByValueRange: function getByValueRange (bin, begin, end, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_VALUE_RANGE, bin)","    op.begin = begin","    op.end = end","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves a single item identified by it's index value from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} index - Index of the entry to remove.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByIndex: function getByIndex (bin, index, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_INDEX, bin)","    op.index = index","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves one or more items in the specified index range from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} index - Starting index.","   * @param {?number} count - Number of items to delete; if not specified, the","   * range includes all items starting from <code>index</code>.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByIndexRange: function getByIndexRange (bin, index, count, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_INDEX_RANGE, bin)","    op.index = index","    op.count = count","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves a single item identified by it's rank value from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} rank - Rank of the entry to remove.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByRank: function getByRank (bin, rank, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_RANK, bin)","    op.rank = rank","    op.returnType = returnType","    return op","  },","","  /**","   * Retrieves one or more items in the specified rank range from the map.","   *","   * This operation returns the data specified by <code>returnType</code>.","   *","   * @param {string} bin - The name of the bin, which must contain a Map value.","   * @param {number} index - Starting rank.","   * @param {?number} count - Number of items to delete; if not specified, the","   * range includes all items starting from <code>rank</code>.","   * @param {number} returnType - The return type indicating what data of the","   * removed item(s) to return (if any); see {@link module:aerospike/maps.returnType} for possible values.","   * @returns {Object} Operation that can be passed to the {@link Client#operate} command.","   */","  getByRankRange: function getByRankRange (bin, rank, count, returnType) {","    var op = new MapOperation(opcodes.MAP_GET_BY_RANK_RANGE, bin)","    op.rank = rank","    op.count = count","    op.returnType = returnType","    return op","  },","","  kvlistToMap: utils.kvlistToMap","}",""],"l":{"95":1,"96":1,"97":1,"102":1,"103":0,"104":0,"107":1,"187":0,"188":0,"189":0,"209":0,"210":0,"211":0,"212":0,"213":0,"233":0,"234":0,"235":0,"236":0,"259":0,"260":0,"261":0,"262":0,"263":0,"286":0,"287":0,"288":0,"289":0,"290":0,"304":0,"319":0,"320":0,"321":0,"322":0,"337":0,"338":0,"339":0,"340":0,"360":0,"361":0,"362":0,"363":0,"364":0,"379":0,"380":0,"381":0,"382":0,"397":0,"398":0,"399":0,"400":0,"420":0,"421":0,"422":0,"423":0,"424":0,"439":0,"440":0,"441":0,"442":0,"459":0,"460":0,"461":0,"462":0,"463":0,"478":0,"479":0,"480":0,"481":0,"498":0,"499":0,"500":0,"501":0,"502":0,"512":0,"527":0,"528":0,"529":0,"530":0,"550":0,"551":0,"552":0,"553":0,"554":0,"569":0,"570":0,"571":0,"572":0,"592":0,"593":0,"594":0,"595":0,"596":0,"611":0,"612":0,"613":0,"614":0,"631":0,"632":0,"633":0,"634":0,"635":0,"650":0,"651":0,"652":0,"653":0,"670":0,"671":0,"672":0,"673":0,"674":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/alerts.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/alerts.js","s":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":1},"b":{"1":[0,0],"2":[0,0],"3":[0,0,0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0]},"f":{"1":0,"2":0,"3":0},"fnMap":{"1":{"name":"setupAlertSystem","line":40,"loc":{"start":{"line":40,"column":0},"end":{"line":40,"column":34}}},"2":{"name":"handleAlert","line":61,"loc":{"start":{"line":61,"column":0},"end":{"line":61,"column":38}}},"3":{"name":"(anonymous_3)","line":92,"loc":{"start":{"line":92,"column":34},"end":{"line":92,"column":57}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":11}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":14}},"3":{"start":{"line":19,"column":0},"end":{"line":19,"column":15}},"4":{"start":{"line":21,"column":0},"end":{"line":25,"column":1}},"5":{"start":{"line":27,"column":0},"end":{"line":31,"column":1}},"6":{"start":{"line":33,"column":0},"end":{"line":33,"column":22}},"7":{"start":{"line":34,"column":0},"end":{"line":34,"column":19}},"8":{"start":{"line":39,"column":0},"end":{"line":39,"column":13}},"9":{"start":{"line":40,"column":0},"end":{"line":59,"column":1}},"10":{"start":{"line":41,"column":2},"end":{"line":58,"column":3}},"11":{"start":{"line":42,"column":4},"end":{"line":42,"column":38}},"12":{"start":{"line":43,"column":4},"end":{"line":49,"column":6}},"13":{"start":{"line":50,"column":4},"end":{"line":50,"column":26}},"14":{"start":{"line":52,"column":4},"end":{"line":52,"column":32}},"15":{"start":{"line":53,"column":4},"end":{"line":56,"column":5}},"16":{"start":{"line":54,"column":6},"end":{"line":54,"column":70}},"17":{"start":{"line":55,"column":6},"end":{"line":55,"column":48}},"18":{"start":{"line":57,"column":4},"end":{"line":57,"column":26}},"19":{"start":{"line":61,"column":0},"end":{"line":103,"column":1}},"20":{"start":{"line":62,"column":2},"end":{"line":62,"column":27}},"21":{"start":{"line":63,"column":2},"end":{"line":82,"column":3}},"22":{"start":{"line":65,"column":6},"end":{"line":65,"column":26}},"23":{"start":{"line":66,"column":6},"end":{"line":66,"column":11}},"24":{"start":{"line":68,"column":6},"end":{"line":68,"column":22}},"25":{"start":{"line":69,"column":6},"end":{"line":71,"column":7}},"26":{"start":{"line":70,"column":8},"end":{"line":70,"column":28}},"27":{"start":{"line":72,"column":6},"end":{"line":72,"column":11}},"28":{"start":{"line":74,"column":6},"end":{"line":74,"column":19}},"29":{"start":{"line":75,"column":6},"end":{"line":77,"column":7}},"30":{"start":{"line":76,"column":8},"end":{"line":76,"column":28}},"31":{"start":{"line":78,"column":6},"end":{"line":78,"column":11}},"32":{"start":{"line":81,"column":6},"end":{"line":81,"column":11}},"33":{"start":{"line":83,"column":2},"end":{"line":102,"column":3}},"34":{"start":{"line":84,"column":4},"end":{"line":99,"column":5}},"35":{"start":{"line":86,"column":6},"end":{"line":91,"column":7}},"36":{"start":{"line":92,"column":6},"end":{"line":96,"column":8}},"37":{"start":{"line":93,"column":8},"end":{"line":95,"column":9}},"38":{"start":{"line":94,"column":10},"end":{"line":94,"column":28}},"39":{"start":{"line":97,"column":11},"end":{"line":99,"column":5}},"40":{"start":{"line":98,"column":6},"end":{"line":98,"column":29}},"41":{"start":{"line":105,"column":0},"end":{"line":110,"column":1}}},"branchMap":{"1":{"line":41,"type":"if","locations":[{"start":{"line":41,"column":2},"end":{"line":41,"column":2}},{"start":{"line":41,"column":2},"end":{"line":41,"column":2}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":53,"column":4}},{"start":{"line":53,"column":4},"end":{"line":53,"column":4}}]},"3":{"line":63,"type":"switch","locations":[{"start":{"line":64,"column":4},"end":{"line":66,"column":11}},{"start":{"line":67,"column":4},"end":{"line":72,"column":11}},{"start":{"line":73,"column":4},"end":{"line":78,"column":11}},{"start":{"line":79,"column":4},"end":{"line":81,"column":11}}]},"4":{"line":69,"type":"if","locations":[{"start":{"line":69,"column":6},"end":{"line":69,"column":6}},{"start":{"line":69,"column":6},"end":{"line":69,"column":6}}]},"5":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":6},"end":{"line":75,"column":6}},{"start":{"line":75,"column":6},"end":{"line":75,"column":6}}]},"6":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":2},"end":{"line":83,"column":2}},{"start":{"line":83,"column":2},"end":{"line":83,"column":2}}]},"7":{"line":84,"type":"if","locations":[{"start":{"line":84,"column":4},"end":{"line":84,"column":4}},{"start":{"line":84,"column":4},"end":{"line":84,"column":4}}]},"8":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":8},"end":{"line":93,"column":8}},{"start":{"line":93,"column":8},"end":{"line":93,"column":8}}]},"9":{"line":97,"type":"if","locations":[{"start":{"line":97,"column":11},"end":{"line":97,"column":11}},{"start":{"line":97,"column":11},"end":{"line":97,"column":11}}]},"10":{"line":97,"type":"binary-expr","locations":[{"start":{"line":97,"column":15},"end":{"line":97,"column":35}},{"start":{"line":97,"column":39},"end":{"line":97,"column":62}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","var winston","var nodemailer","var transporter","","var severity = {","  HIGH: 0,","  MEDIUM: 1,","  LOW: 2","}","","var action = {","  SENDEMAIL: 0,","  PRINTCONSOLE: 1,","  PRINTFILE: 2","}","","var mediumSevCount = 0","var lowSevCount = 0","","// setup winston logger to log it to file or console","// Setup node mailers to generate email alerts to","// send emails in case of errors.","var alertMode","function setupAlertSystem (alert) {","  if (alert.mode === 'EMAIL') {","    nodemailer = require('nodemailer')","    transporter = nodemailer.createTransport({","      service: 'Gmail',","      auth: {","        user: 'gmail account',","        pass: 'password'","      }","    })","    alertMode = alert.mode","  } else {","    winston = require('winston')","    if (alert.mode === 'FILE') {","      winston.add(winston.transports.file, {filename: alert.filename})","      winston.remove(winston.transports.Console)","    }","    alertMode = alert.mode","  }","}","","function handleAlert (alertInfo, sev) {","  var generateAlert = false","  switch (sev) {","    case severity.HIGH:","      generateAlert = true","      break","    case severity.MEDIUM:","      mediumSevCount++","      if (mediumSevCount % 3 === 0) {","        generateAlert = true","      }","      break","    case severity.LOW:","      lowSevCount++","      if (lowSevCount % 6 === 0) {","        generateAlert = true","      }","      break","    default:","      // do nothing","      break","  }","  if (generateAlert) {","    if (alertMode === 'EMAIL') {","      // send an email.","      var email = {","        from: 'Aerospike alert account',","        to: 'gayathri@aerospike.com',","        subject: 'Nodejs Longevity Alert',","        text: JSON.stringify(alertInfo)","      }","      transporter.sendMail(email, function (error, info) {","        if (error) {","          console.log(error)","        }","      })","    } else if (alertMode === 'FILE' || alertMode === 'CONSOLE') {","      winston.info(alertInfo)","    }","  } else {","    // should we store the temporary information in some structure.","  }","}","","module.exports = {","  handleAlert: handleAlert,","  setupAlertSystem: setupAlertSystem,","  severity: severity,","  action: action","}",""],"l":{"17":1,"18":1,"19":1,"21":1,"27":1,"33":1,"34":1,"39":1,"40":1,"41":0,"42":0,"43":0,"50":0,"52":0,"53":0,"54":0,"55":0,"57":0,"61":1,"62":0,"63":0,"65":0,"66":0,"68":0,"69":0,"70":0,"72":0,"74":0,"75":0,"76":0,"78":0,"81":0,"83":0,"84":0,"86":0,"92":0,"93":0,"94":0,"97":0,"98":0,"105":1}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/inspect.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/inspect.js","s":{"1":2,"2":2,"3":2,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":1,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":1,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0,0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"fnMap":{"1":{"name":"reportStep","line":121,"loc":{"start":{"line":121,"column":0},"end":{"line":121,"column":52}}},"2":{"name":"(anonymous_2)","line":153,"loc":{"start":{"line":153,"column":31},"end":{"line":153,"column":44}}},"3":{"name":"reportFinal","line":162,"loc":{"start":{"line":162,"column":0},"end":{"line":162,"column":24}}},"4":{"name":"(anonymous_4)","line":167,"loc":{"start":{"line":167,"column":31},"end":{"line":167,"column":46}}},"5":{"name":"(anonymous_5)","line":175,"loc":{"start":{"line":175,"column":18},"end":{"line":175,"column":33}}},"6":{"name":"(anonymous_6)","line":197,"loc":{"start":{"line":197,"column":18},"end":{"line":197,"column":33}}},"7":{"name":"(anonymous_7)","line":229,"loc":{"start":{"line":229,"column":18},"end":{"line":229,"column":33}}},"8":{"name":"exec","line":241,"loc":{"start":{"line":241,"column":0},"end":{"line":241,"column":24}}},"9":{"name":"(anonymous_9)","line":257,"loc":{"start":{"line":257,"column":25},"end":{"line":257,"column":41}}},"10":{"name":"(anonymous_10)","line":261,"loc":{"start":{"line":261,"column":25},"end":{"line":261,"column":41}}},"11":{"name":"(anonymous_11)","line":265,"loc":{"start":{"line":265,"column":19},"end":{"line":265,"column":35}}},"12":{"name":"step","line":271,"loc":{"start":{"line":271,"column":0},"end":{"line":271,"column":24}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":42}},"2":{"start":{"line":23,"column":0},"end":{"line":23,"column":32}},"3":{"start":{"line":24,"column":0},"end":{"line":24,"column":28}},"4":{"start":{"line":25,"column":0},"end":{"line":25,"column":22}},"5":{"start":{"line":26,"column":0},"end":{"line":26,"column":30}},"6":{"start":{"line":32,"column":0},"end":{"line":84,"column":4}},"7":{"start":{"line":86,"column":0},"end":{"line":86,"column":20}},"8":{"start":{"line":88,"column":0},"end":{"line":91,"column":1}},"9":{"start":{"line":89,"column":2},"end":{"line":89,"column":17}},"10":{"start":{"line":90,"column":2},"end":{"line":90,"column":16}},"11":{"start":{"line":93,"column":0},"end":{"line":96,"column":1}},"12":{"start":{"line":94,"column":2},"end":{"line":94,"column":59}},"13":{"start":{"line":95,"column":2},"end":{"line":95,"column":16}},"14":{"start":{"line":102,"column":0},"end":{"line":102,"column":20}},"15":{"start":{"line":104,"column":0},"end":{"line":104,"column":13}},"16":{"start":{"line":105,"column":0},"end":{"line":105,"column":23}},"17":{"start":{"line":106,"column":0},"end":{"line":106,"column":14}},"18":{"start":{"line":107,"column":0},"end":{"line":107,"column":13}},"19":{"start":{"line":108,"column":0},"end":{"line":108,"column":13}},"20":{"start":{"line":109,"column":0},"end":{"line":109,"column":14}},"21":{"start":{"line":110,"column":0},"end":{"line":110,"column":13}},"22":{"start":{"line":111,"column":0},"end":{"line":111,"column":15}},"23":{"start":{"line":112,"column":0},"end":{"line":112,"column":14}},"24":{"start":{"line":118,"column":0},"end":{"line":118,"column":16}},"25":{"start":{"line":119,"column":0},"end":{"line":119,"column":15}},"26":{"start":{"line":121,"column":0},"end":{"line":160,"column":1}},"27":{"start":{"line":122,"column":2},"end":{"line":122,"column":89}},"28":{"start":{"line":124,"column":2},"end":{"line":124,"column":15}},"29":{"start":{"line":126,"column":2},"end":{"line":126,"column":12}},"30":{"start":{"line":128,"column":2},"end":{"line":157,"column":3}},"31":{"start":{"line":129,"column":4},"end":{"line":129,"column":31}},"32":{"start":{"line":131,"column":4},"end":{"line":131,"column":41}},"33":{"start":{"line":132,"column":4},"end":{"line":136,"column":5}},"34":{"start":{"line":138,"column":4},"end":{"line":138,"column":34}},"35":{"start":{"line":139,"column":4},"end":{"line":143,"column":5}},"36":{"start":{"line":145,"column":4},"end":{"line":145,"column":32}},"37":{"start":{"line":146,"column":4},"end":{"line":146,"column":64}},"38":{"start":{"line":148,"column":4},"end":{"line":148,"column":36}},"39":{"start":{"line":149,"column":4},"end":{"line":149,"column":67}},"40":{"start":{"line":151,"column":4},"end":{"line":151,"column":24}},"41":{"start":{"line":153,"column":4},"end":{"line":155,"column":6}},"42":{"start":{"line":154,"column":6},"end":{"line":154,"column":37}},"43":{"start":{"line":156,"column":4},"end":{"line":156,"column":40}},"44":{"start":{"line":159,"column":2},"end":{"line":159,"column":15}},"45":{"start":{"line":162,"column":0},"end":{"line":239,"column":1}},"46":{"start":{"line":163,"column":2},"end":{"line":163,"column":15}},"47":{"start":{"line":164,"column":2},"end":{"line":164,"column":24}},"48":{"start":{"line":165,"column":2},"end":{"line":165,"column":15}},"49":{"start":{"line":167,"column":2},"end":{"line":173,"column":4}},"50":{"start":{"line":168,"column":4},"end":{"line":168,"column":28}},"51":{"start":{"line":169,"column":4},"end":{"line":172,"column":81}},"52":{"start":{"line":175,"column":2},"end":{"line":193,"column":4}},"53":{"start":{"line":176,"column":4},"end":{"line":180,"column":5}},"54":{"start":{"line":181,"column":4},"end":{"line":185,"column":5}},"55":{"start":{"line":186,"column":4},"end":{"line":190,"column":5}},"56":{"start":{"line":191,"column":4},"end":{"line":191,"column":34}},"57":{"start":{"line":192,"column":4},"end":{"line":192,"column":63}},"58":{"start":{"line":195,"column":2},"end":{"line":195,"column":19}},"59":{"start":{"line":197,"column":2},"end":{"line":202,"column":4}},"60":{"start":{"line":198,"column":4},"end":{"line":198,"column":42}},"61":{"start":{"line":199,"column":4},"end":{"line":199,"column":37}},"62":{"start":{"line":200,"column":4},"end":{"line":200,"column":19}},"63":{"start":{"line":201,"column":4},"end":{"line":201,"column":25}},"64":{"start":{"line":204,"column":2},"end":{"line":204,"column":15}},"65":{"start":{"line":205,"column":2},"end":{"line":205,"column":15}},"66":{"start":{"line":206,"column":2},"end":{"line":224,"column":3}},"67":{"start":{"line":207,"column":4},"end":{"line":207,"column":25}},"68":{"start":{"line":208,"column":4},"end":{"line":208,"column":36}},"69":{"start":{"line":209,"column":4},"end":{"line":223,"column":5}},"70":{"start":{"line":210,"column":6},"end":{"line":210,"column":21}},"71":{"start":{"line":211,"column":6},"end":{"line":222,"column":7}},"72":{"start":{"line":225,"column":2},"end":{"line":225,"column":15}},"73":{"start":{"line":227,"column":2},"end":{"line":227,"column":18}},"74":{"start":{"line":229,"column":2},"end":{"line":232,"column":4}},"75":{"start":{"line":230,"column":4},"end":{"line":230,"column":42}},"76":{"start":{"line":231,"column":4},"end":{"line":231,"column":42}},"77":{"start":{"line":234,"column":2},"end":{"line":234,"column":15}},"78":{"start":{"line":235,"column":2},"end":{"line":235,"column":51}},"79":{"start":{"line":236,"column":2},"end":{"line":236,"column":53}},"80":{"start":{"line":238,"column":2},"end":{"line":238,"column":15}},"81":{"start":{"line":241,"column":0},"end":{"line":269,"column":1}},"82":{"start":{"line":242,"column":2},"end":{"line":242,"column":29}},"83":{"start":{"line":243,"column":2},"end":{"line":243,"column":29}},"84":{"start":{"line":245,"column":2},"end":{"line":245,"column":19}},"85":{"start":{"line":247,"column":2},"end":{"line":253,"column":3}},"86":{"start":{"line":255,"column":2},"end":{"line":255,"column":30}},"87":{"start":{"line":257,"column":2},"end":{"line":259,"column":4}},"88":{"start":{"line":258,"column":4},"end":{"line":258,"column":42}},"89":{"start":{"line":261,"column":2},"end":{"line":263,"column":4}},"90":{"start":{"line":262,"column":4},"end":{"line":262,"column":42}},"91":{"start":{"line":265,"column":2},"end":{"line":268,"column":4}},"92":{"start":{"line":266,"column":4},"end":{"line":266,"column":67}},"93":{"start":{"line":267,"column":4},"end":{"line":267,"column":17}},"94":{"start":{"line":271,"column":0},"end":{"line":291,"column":1}},"95":{"start":{"line":272,"column":2},"end":{"line":272,"column":13}},"96":{"start":{"line":274,"column":2},"end":{"line":277,"column":3}},"97":{"start":{"line":275,"column":4},"end":{"line":275,"column":15}},"98":{"start":{"line":276,"column":4},"end":{"line":276,"column":13}},"99":{"start":{"line":279,"column":2},"end":{"line":283,"column":3}},"100":{"start":{"line":280,"column":4},"end":{"line":280,"column":15}},"101":{"start":{"line":281,"column":4},"end":{"line":281,"column":13}},"102":{"start":{"line":282,"column":4},"end":{"line":282,"column":13}},"103":{"start":{"line":285,"column":2},"end":{"line":288,"column":3}},"104":{"start":{"line":286,"column":4},"end":{"line":286,"column":17}},"105":{"start":{"line":287,"column":4},"end":{"line":287,"column":10}},"106":{"start":{"line":290,"column":2},"end":{"line":290,"column":22}},"107":{"start":{"line":293,"column":0},"end":{"line":293,"column":25}}},"branchMap":{"1":{"line":88,"type":"if","locations":[{"start":{"line":88,"column":0},"end":{"line":88,"column":0}},{"start":{"line":88,"column":0},"end":{"line":88,"column":0}}]},"2":{"line":93,"type":"if","locations":[{"start":{"line":93,"column":0},"end":{"line":93,"column":0}},{"start":{"line":93,"column":0},"end":{"line":93,"column":0}}]},"3":{"line":128,"type":"if","locations":[{"start":{"line":128,"column":2},"end":{"line":128,"column":2}},{"start":{"line":128,"column":2},"end":{"line":128,"column":2}}]},"4":{"line":169,"type":"binary-expr","locations":[{"start":{"line":169,"column":11},"end":{"line":169,"column":63}},{"start":{"line":170,"column":4},"end":{"line":170,"column":55}},{"start":{"line":171,"column":4},"end":{"line":171,"column":54}},{"start":{"line":172,"column":5},"end":{"line":172,"column":80}}]},"5":{"line":199,"type":"binary-expr","locations":[{"start":{"line":199,"column":17},"end":{"line":199,"column":30}},{"start":{"line":199,"column":34},"end":{"line":199,"column":36}}]},"6":{"line":231,"type":"binary-expr","locations":[{"start":{"line":231,"column":20},"end":{"line":231,"column":32}},{"start":{"line":231,"column":36},"end":{"line":231,"column":37}}]},"7":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":2},"end":{"line":274,"column":2}},{"start":{"line":274,"column":2},"end":{"line":274,"column":2}}]},"8":{"line":279,"type":"if","locations":[{"start":{"line":279,"column":2},"end":{"line":279,"column":2}},{"start":{"line":279,"column":2},"end":{"line":279,"column":2}}]},"9":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":2},"end":{"line":285,"column":2}},{"start":{"line":285,"column":2},"end":{"line":285,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","// *****************************************************************************","// node inspect.js -h","// *****************************************************************************","","var spawn = require('child_process').spawn","","var cluster = require('cluster')","var yargs = require('yargs')","var os = require('os')","var stats = require('./stats')","","// *****************************************************************************","// Options Parsing","// *****************************************************************************","","var argp = yargs","  .usage('$0 [options]')","  .options({","    help: {","      boolean: true,","      describe: 'Display this message.'","    },","    host: {","      alias: 'h',","      default: '127.0.0.1',","      describe: 'Aerospike database address.'","    },","    port: {","      alias: 'p',","      default: 3000,","      describe: 'Aerospike database port.'","    },","    timeout: {","      alias: 't',","      default: 10,","      describe: 'Timeout in milliseconds.'","    },","    log: {","      alias: 'l',","      default: 1,","      describe: 'Log level [0-5].'","    },","    namespace: {","      alias: 'n',","      default: 'test',","      describe: 'Key namespace.'","    },","    set: {","      alias: 's',","      default: 'demo',","      describe: 'Key set.'","    },","    reads: {","      alias: 'R',","      default: 1,","      describe: 'The read in the read/write ratio.'","    },","    writes: {","      alias: 'W',","      default: 1,","      describe: 'The write in the read/write ratio.'","    },","    keyrange: {","      alias: 'K',","      default: 1000,","      describe: 'The number of keys to use.'","    }","  })","","var argv = argp.argv","","if (argv.help === true) {","  argp.showHelp()","  process.exit()","}","","if (!cluster.isMaster) {","  console.error('main.js must not run as a child process.')","  process.exit()","}","","// *****************************************************************************","// Globals","// *****************************************************************************","","var cpus = os.cpus()","","var P_MIN = 1","var P_MAX = cpus.length","var P_STEP = 1","var I_MIN = 1","var I_MAX = 1","var I_STEP = 1","var O_MIN = 1","var O_MAX = 100","var O_STEP = 8","","// *****************************************************************************","// Functions","// *****************************************************************************","","var results = []","var errors = []","","function reportStep (p, i, o, code, stdout, stderr) {","  console.log('processes: %d, iterations: %d, operations: %d, status: %d', p, i, o, code)","","  console.log()","","  var result","","  if (code === 0) {","    result = JSON.parse(stdout)","","    console.log('    tps (per process):')","    console.log('        min: %d, max: %d, mean: %d',","      result.tps.min,","      result.tps.max,","      result.tps.mean","    )","","    console.log('    times (ms):')","    console.log('        min: %d, max: %d, mean: %d',","      result.times.min.toFixed(2),","      result.times.max.toFixed(2),","      result.times.mean.toFixed(2)","    )","","    console.log('    duration:')","    stats.print_histogram(result.durations, console.log, '    ')","","    console.log('    status codes:')","    stats.print_histogram(result.status_codes, console.log, '    ')","","    results.push(result)","  } else {","    stderr.split('\\n').forEach(function (l) {","      console.log('    error: %s', l)","    })","    errors.push([p, i, o, code, stderr])","  }","","  console.log()","}","","function reportFinal () {","  console.log()","  console.log('SUMMARY')","  console.log()","","  var matched = results.filter(function (res) {","    var ops = res.operations","    return (res.durations['<= 1'] / ops * 100).toFixed(0) >= 90 &&","    (res.durations['> 1'] / ops * 100).toFixed(0) <= 10 &&","    (res.durations['> 2'] / ops * 100).toFixed(0) <= 2 &&","    (res.durations['<= 1'] + res.durations['> 1'] + res.durations['> 2'] === ops)","  })","","  matched.forEach(function (res) {","    console.log('  processes: %d, iterations: %d, operations: %d',","      res.configuration.processes,","      res.configuration.iterations,","      res.configuration.operations","    )","    console.log('      tps:  {min: %d, max: %d, avg: %d}',","      res.tps.min,","      res.tps.max,","      res.tps.mean","    )","    console.log('      time: {min: %d, max: %d, avg: %d}',","      res.times.min.toFixed(2),","      res.times.max.toFixed(2),","      res.times.mean.toFixed(2)","    )","    console.log('      duration:')","    stats.print_histogram(res.durations, console.log, '      ')","  })","","  var groupOps = {}","","  matched.forEach(function (res) {","    var ops = res.configuration.operations","    var group = (groupOps[ops] || [])","    group.push(res)","    groupOps[ops] = group","  })","","  console.log()","  console.log()","  for (var k in groupOps) {","    var ops = groupOps[k]","    console.log('operations: %d', k)","    for (var o = 0; o < ops.length; o++) {","      var op = ops[o]","      console.log('    p: %d, tps: {l: %d, u: %d, m: %d}, time: {l: %d, u: %d, m: %d}, dur: {0: %d, 1: %d, 2: %d}',","        op.configuration.processes,","        op.tps.min,","        op.tps.max,","        op.tps.mean,","        op.times.min.toFixed(2),","        op.times.max.toFixed(2),","        op.times.mean.toFixed(2),","        op.durations['<= 1'],","        op.durations['> 1'],","        op.durations['> 2']","      )","    }","  }","  console.log()","","  var opsHist = {}","","  matched.forEach(function (res) {","    var ops = res.configuration.operations","    opsHist[ops] = (opsHist[ops] || 0) + 1","  })","","  console.log()","  console.log('Number of Concurrent Transactions:')","  stats.print_histogram(opsHist, console.log, '    ')","","  console.log()","}","","function exec (p, i, o) {","  var stdout = new Buffer('')","  var stderr = new Buffer('')","","  var prog = 'node'","","  var args = ['main.js',","    '-h', argv.host, '-p', argv.port, '-t', argv.timeout,","    '-n', argv.namespace, '-s', argv.set,","    '-R', argv.reads, '-W', argv.writes, '-K', argv.keyrange,","    '-P', p, '-I', i, '-O', o,","    '--silent', '--json'","  ]","","  var proc = spawn(prog, args)","","  proc.stdout.on('data', function (data) {","    stdout = Buffer.concat([stdout, data])","  })","","  proc.stderr.on('data', function (data) {","    stderr = Buffer.concat([stderr, data])","  })","","  proc.on('close', function (code) {","    reportStep(p, i, o, code, stdout.toString(), stderr.toString())","    step(p, i, o)","  })","}","","function step (p, i, o) {","  o += O_STEP","","  if (o > O_MAX) {","    i += I_STEP","    o = O_MIN","  }","","  if (i > I_MAX) {","    p += P_STEP","    i = I_MIN","    o = O_MIN","  }","","  if (p > P_MAX) {","    reportFinal()","    return","  }","","  return exec(p, i, o)","}","","exec(P_MIN, I_MIN, O_MIN)",""],"l":{"21":2,"23":2,"24":2,"25":0,"26":0,"32":0,"86":0,"88":0,"89":0,"90":0,"93":0,"94":0,"95":0,"102":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"118":0,"119":0,"121":1,"122":0,"124":0,"126":0,"128":0,"129":0,"131":0,"132":0,"138":0,"139":0,"145":0,"146":0,"148":0,"149":0,"151":0,"153":0,"154":0,"156":0,"159":0,"162":1,"163":0,"164":0,"165":0,"167":0,"168":0,"169":0,"175":0,"176":0,"181":0,"186":0,"191":0,"192":0,"195":0,"197":0,"198":0,"199":0,"200":0,"201":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"225":0,"227":0,"229":0,"230":0,"231":0,"234":0,"235":0,"236":0,"238":0,"241":1,"242":0,"243":0,"245":0,"247":0,"255":0,"257":0,"258":0,"261":0,"262":0,"265":0,"266":0,"267":0,"271":1,"272":0,"274":0,"275":0,"276":0,"279":0,"280":0,"281":0,"282":0,"285":0,"286":0,"287":0,"290":0,"293":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/main.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/main.js","s":{"1":2,"2":2,"3":2,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1,"41":0,"42":0,"43":0,"44":1,"45":0,"46":0,"47":0,"48":1,"49":0,"50":1,"51":0,"52":0,"53":1,"54":0,"55":0,"56":1,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":1,"70":0,"71":0,"72":0,"73":1,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":1,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":1,"89":0,"90":0,"91":0,"92":0,"93":1,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":1,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"fnMap":{"1":{"name":"finalize","line":101,"loc":{"start":{"line":101,"column":0},"end":{"line":101,"column":21}}},"2":{"name":"workerSpawn","line":108,"loc":{"start":{"line":108,"column":0},"end":{"line":108,"column":24}}},"3":{"name":"workerExit","line":114,"loc":{"start":{"line":114,"column":0},"end":{"line":114,"column":29}}},"4":{"name":"workerShutdown","line":118,"loc":{"start":{"line":118,"column":0},"end":{"line":118,"column":27}}},"5":{"name":"(anonymous_5)","line":119,"loc":{"start":{"line":119,"column":39},"end":{"line":119,"column":53}}},"6":{"name":"workerProbe","line":127,"loc":{"start":{"line":127,"column":0},"end":{"line":127,"column":24}}},"7":{"name":"(anonymous_7)","line":128,"loc":{"start":{"line":128,"column":39},"end":{"line":128,"column":53}}},"8":{"name":"rwWorkerJob","line":133,"loc":{"start":{"line":133,"column":0},"end":{"line":133,"column":30}}},"9":{"name":"queryWorkerJob","line":149,"loc":{"start":{"line":149,"column":0},"end":{"line":149,"column":37}}},"10":{"name":"scanWorkerJob","line":166,"loc":{"start":{"line":166,"column":0},"end":{"line":166,"column":32}}},"11":{"name":"workerResultsInterval","line":180,"loc":{"start":{"line":180,"column":0},"end":{"line":180,"column":61}}},"12":{"name":"printIntervalStats","line":199,"loc":{"start":{"line":199,"column":0},"end":{"line":199,"column":31}}},"13":{"name":"workerResultsIteration","line":215,"loc":{"start":{"line":215,"column":0},"end":{"line":215,"column":50}}},"14":{"name":"workerResults","line":224,"loc":{"start":{"line":224,"column":0},"end":{"line":224,"column":32}}},"15":{"name":"(anonymous_15)","line":225,"loc":{"start":{"line":225,"column":9},"end":{"line":225,"column":28}}},"16":{"name":"(anonymous_16)","line":249,"loc":{"start":{"line":249,"column":12},"end":{"line":249,"column":24}}},"17":{"name":"resetIntervalStats","line":257,"loc":{"start":{"line":257,"column":0},"end":{"line":257,"column":31}}},"18":{"name":"(anonymous_18)","line":265,"loc":{"start":{"line":265,"column":19},"end":{"line":265,"column":31}}},"19":{"name":"(anonymous_19)","line":272,"loc":{"start":{"line":272,"column":21},"end":{"line":272,"column":33}}},"20":{"name":"(anonymous_20)","line":276,"loc":{"start":{"line":276,"column":22},"end":{"line":276,"column":34}}},"21":{"name":"(anonymous_21)","line":280,"loc":{"start":{"line":280,"column":21},"end":{"line":280,"column":39}}},"22":{"name":"(anonymous_22)","line":294,"loc":{"start":{"line":294,"column":25},"end":{"line":294,"column":57}}},"23":{"name":"(anonymous_23)","line":298,"loc":{"start":{"line":298,"column":19},"end":{"line":298,"column":51}}},"24":{"name":"(anonymous_24)","line":317,"loc":{"start":{"line":317,"column":13},"end":{"line":317,"column":25}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"2":{"start":{"line":22,"column":0},"end":{"line":22,"column":32}},"3":{"start":{"line":23,"column":0},"end":{"line":23,"column":32}},"4":{"start":{"line":24,"column":0},"end":{"line":24,"column":30}},"5":{"start":{"line":25,"column":0},"end":{"line":25,"column":32}},"6":{"start":{"line":26,"column":0},"end":{"line":26,"column":35}},"7":{"start":{"line":32,"column":0},"end":{"line":32,"column":16}},"8":{"start":{"line":33,"column":0},"end":{"line":33,"column":13}},"9":{"start":{"line":35,"column":0},"end":{"line":35,"column":20}},"10":{"start":{"line":36,"column":0},"end":{"line":36,"column":19}},"11":{"start":{"line":37,"column":0},"end":{"line":37,"column":14}},"12":{"start":{"line":38,"column":0},"end":{"line":38,"column":14}},"13":{"start":{"line":39,"column":0},"end":{"line":39,"column":16}},"14":{"start":{"line":40,"column":0},"end":{"line":40,"column":19}},"15":{"start":{"line":41,"column":0},"end":{"line":41,"column":18}},"16":{"start":{"line":46,"column":0},"end":{"line":46,"column":39}},"17":{"start":{"line":47,"column":0},"end":{"line":47,"column":20}},"18":{"start":{"line":49,"column":0},"end":{"line":51,"column":1}},"19":{"start":{"line":50,"column":2},"end":{"line":50,"column":38}},"20":{"start":{"line":53,"column":0},"end":{"line":55,"column":1}},"21":{"start":{"line":54,"column":2},"end":{"line":54,"column":36}},"22":{"start":{"line":57,"column":0},"end":{"line":57,"column":59}},"23":{"start":{"line":59,"column":0},"end":{"line":62,"column":1}},"24":{"start":{"line":60,"column":2},"end":{"line":60,"column":59}},"25":{"start":{"line":61,"column":2},"end":{"line":61,"column":16}},"26":{"start":{"line":64,"column":0},"end":{"line":64,"column":57}},"27":{"start":{"line":65,"column":0},"end":{"line":65,"column":28}},"28":{"start":{"line":66,"column":0},"end":{"line":66,"column":29}},"29":{"start":{"line":67,"column":0},"end":{"line":67,"column":42}},"30":{"start":{"line":68,"column":0},"end":{"line":68,"column":42}},"31":{"start":{"line":70,"column":0},"end":{"line":73,"column":1}},"32":{"start":{"line":71,"column":2},"end":{"line":71,"column":44}},"33":{"start":{"line":72,"column":2},"end":{"line":72,"column":14}},"34":{"start":{"line":75,"column":0},"end":{"line":78,"column":1}},"35":{"start":{"line":76,"column":2},"end":{"line":76,"column":46}},"36":{"start":{"line":77,"column":2},"end":{"line":77,"column":29}},"37":{"start":{"line":80,"column":0},"end":{"line":80,"column":55}},"38":{"start":{"line":81,"column":0},"end":{"line":81,"column":30}},"39":{"start":{"line":87,"column":0},"end":{"line":95,"column":2}},"40":{"start":{"line":101,"column":0},"end":{"line":106,"column":1}},"41":{"start":{"line":102,"column":2},"end":{"line":102,"column":14}},"42":{"start":{"line":103,"column":2},"end":{"line":105,"column":3}},"43":{"start":{"line":104,"column":4},"end":{"line":104,"column":47}},"44":{"start":{"line":108,"column":0},"end":{"line":112,"column":1}},"45":{"start":{"line":109,"column":2},"end":{"line":109,"column":29}},"46":{"start":{"line":110,"column":2},"end":{"line":110,"column":22}},"47":{"start":{"line":111,"column":2},"end":{"line":111,"column":45}},"48":{"start":{"line":114,"column":0},"end":{"line":116,"column":1}},"49":{"start":{"line":115,"column":2},"end":{"line":115,"column":22}},"50":{"start":{"line":118,"column":0},"end":{"line":122,"column":1}},"51":{"start":{"line":119,"column":2},"end":{"line":121,"column":4}},"52":{"start":{"line":120,"column":4},"end":{"line":120,"column":35}},"53":{"start":{"line":127,"column":0},"end":{"line":131,"column":1}},"54":{"start":{"line":128,"column":2},"end":{"line":130,"column":4}},"55":{"start":{"line":129,"column":4},"end":{"line":129,"column":39}},"56":{"start":{"line":133,"column":0},"end":{"line":144,"column":1}},"57":{"start":{"line":134,"column":2},"end":{"line":141,"column":3}},"58":{"start":{"line":142,"column":2},"end":{"line":142,"column":20}},"59":{"start":{"line":143,"column":2},"end":{"line":143,"column":30}},"60":{"start":{"line":149,"column":0},"end":{"line":164,"column":1}},"61":{"start":{"line":150,"column":2},"end":{"line":150,"column":15}},"62":{"start":{"line":151,"column":2},"end":{"line":151,"column":38}},"63":{"start":{"line":152,"column":2},"end":{"line":156,"column":3}},"64":{"start":{"line":153,"column":4},"end":{"line":153,"column":94}},"65":{"start":{"line":154,"column":9},"end":{"line":156,"column":3}},"66":{"start":{"line":155,"column":4},"end":{"line":155,"column":79}},"67":{"start":{"line":158,"column":2},"end":{"line":162,"column":3}},"68":{"start":{"line":163,"column":2},"end":{"line":163,"column":33}},"69":{"start":{"line":166,"column":0},"end":{"line":173,"column":1}},"70":{"start":{"line":167,"column":2},"end":{"line":171,"column":3}},"71":{"start":{"line":172,"column":2},"end":{"line":172,"column":33}},"72":{"start":{"line":179,"column":0},"end":{"line":179,"column":15}},"73":{"start":{"line":180,"column":0},"end":{"line":197,"column":1}},"74":{"start":{"line":181,"column":2},"end":{"line":185,"column":3}},"75":{"start":{"line":182,"column":4},"end":{"line":184,"column":5}},"76":{"start":{"line":183,"column":6},"end":{"line":183,"column":75}},"77":{"start":{"line":186,"column":2},"end":{"line":196,"column":3}},"78":{"start":{"line":187,"column":4},"end":{"line":192,"column":6}},"79":{"start":{"line":193,"column":4},"end":{"line":195,"column":5}},"80":{"start":{"line":194,"column":6},"end":{"line":194,"column":26}},"81":{"start":{"line":199,"column":0},"end":{"line":213,"column":1}},"82":{"start":{"line":200,"column":2},"end":{"line":204,"column":3}},"83":{"start":{"line":201,"column":4},"end":{"line":203,"column":68}},"84":{"start":{"line":205,"column":2},"end":{"line":208,"column":3}},"85":{"start":{"line":206,"column":4},"end":{"line":207,"column":91}},"86":{"start":{"line":209,"column":2},"end":{"line":212,"column":3}},"87":{"start":{"line":210,"column":4},"end":{"line":211,"column":91}},"88":{"start":{"line":215,"column":0},"end":{"line":222,"column":1}},"89":{"start":{"line":216,"column":2},"end":{"line":216,"column":26}},"90":{"start":{"line":217,"column":2},"end":{"line":221,"column":3}},"91":{"start":{"line":218,"column":4},"end":{"line":218,"column":23}},"92":{"start":{"line":220,"column":4},"end":{"line":220,"column":22}},"93":{"start":{"line":224,"column":0},"end":{"line":234,"column":1}},"94":{"start":{"line":225,"column":2},"end":{"line":233,"column":3}},"95":{"start":{"line":226,"column":4},"end":{"line":232,"column":5}},"96":{"start":{"line":227,"column":6},"end":{"line":227,"column":48}},"97":{"start":{"line":228,"column":11},"end":{"line":232,"column":5}},"98":{"start":{"line":229,"column":6},"end":{"line":229,"column":63}},"99":{"start":{"line":231,"column":6},"end":{"line":231,"column":47}},"100":{"start":{"line":239,"column":0},"end":{"line":239,"column":52}},"101":{"start":{"line":241,"column":0},"end":{"line":244,"column":1}},"102":{"start":{"line":242,"column":2},"end":{"line":243,"column":80}},"103":{"start":{"line":249,"column":0},"end":{"line":252,"column":8}},"104":{"start":{"line":250,"column":2},"end":{"line":250,"column":22}},"105":{"start":{"line":251,"column":2},"end":{"line":251,"column":22}},"106":{"start":{"line":257,"column":0},"end":{"line":259,"column":1}},"107":{"start":{"line":258,"column":2},"end":{"line":258,"column":62}},"108":{"start":{"line":265,"column":0},"end":{"line":270,"column":2}},"109":{"start":{"line":266,"column":2},"end":{"line":266,"column":26}},"110":{"start":{"line":267,"column":2},"end":{"line":269,"column":3}},"111":{"start":{"line":268,"column":4},"end":{"line":268,"column":21}},"112":{"start":{"line":272,"column":0},"end":{"line":274,"column":2}},"113":{"start":{"line":273,"column":2},"end":{"line":273,"column":34}},"114":{"start":{"line":276,"column":0},"end":{"line":278,"column":2}},"115":{"start":{"line":277,"column":2},"end":{"line":277,"column":35}},"116":{"start":{"line":280,"column":0},"end":{"line":292,"column":2}},"117":{"start":{"line":281,"column":2},"end":{"line":281,"column":10}},"118":{"start":{"line":282,"column":2},"end":{"line":291,"column":3}},"119":{"start":{"line":283,"column":4},"end":{"line":283,"column":14}},"120":{"start":{"line":284,"column":4},"end":{"line":284,"column":23}},"121":{"start":{"line":285,"column":9},"end":{"line":291,"column":3}},"122":{"start":{"line":286,"column":4},"end":{"line":286,"column":39}},"123":{"start":{"line":287,"column":4},"end":{"line":287,"column":17}},"124":{"start":{"line":288,"column":9},"end":{"line":291,"column":3}},"125":{"start":{"line":289,"column":4},"end":{"line":289,"column":16}},"126":{"start":{"line":290,"column":4},"end":{"line":290,"column":25}},"127":{"start":{"line":294,"column":0},"end":{"line":296,"column":2}},"128":{"start":{"line":295,"column":2},"end":{"line":295,"column":70}},"129":{"start":{"line":298,"column":0},"end":{"line":310,"column":2}},"130":{"start":{"line":299,"column":2},"end":{"line":306,"column":3}},"131":{"start":{"line":301,"column":4},"end":{"line":301,"column":69}},"132":{"start":{"line":302,"column":4},"end":{"line":302,"column":19}},"133":{"start":{"line":304,"column":4},"end":{"line":304,"column":69}},"134":{"start":{"line":305,"column":4},"end":{"line":305,"column":12}},"135":{"start":{"line":307,"column":2},"end":{"line":309,"column":3}},"136":{"start":{"line":308,"column":4},"end":{"line":308,"column":19}},"137":{"start":{"line":316,"column":0},"end":{"line":322,"column":1}},"138":{"start":{"line":317,"column":2},"end":{"line":321,"column":22}},"139":{"start":{"line":318,"column":4},"end":{"line":318,"column":24}},"140":{"start":{"line":319,"column":4},"end":{"line":319,"column":24}},"141":{"start":{"line":320,"column":4},"end":{"line":320,"column":27}},"142":{"start":{"line":324,"column":0},"end":{"line":327,"column":2}},"143":{"start":{"line":329,"column":0},"end":{"line":329,"column":13}},"144":{"start":{"line":330,"column":0},"end":{"line":332,"column":1}},"145":{"start":{"line":331,"column":2},"end":{"line":331,"column":15}}},"branchMap":{"1":{"line":49,"type":"if","locations":[{"start":{"line":49,"column":0},"end":{"line":49,"column":0}},{"start":{"line":49,"column":0},"end":{"line":49,"column":0}}]},"2":{"line":53,"type":"if","locations":[{"start":{"line":53,"column":0},"end":{"line":53,"column":0}},{"start":{"line":53,"column":0},"end":{"line":53,"column":0}}]},"3":{"line":59,"type":"if","locations":[{"start":{"line":59,"column":0},"end":{"line":59,"column":0}},{"start":{"line":59,"column":0},"end":{"line":59,"column":0}}]},"4":{"line":70,"type":"if","locations":[{"start":{"line":70,"column":0},"end":{"line":70,"column":0}},{"start":{"line":70,"column":0},"end":{"line":70,"column":0}}]},"5":{"line":75,"type":"if","locations":[{"start":{"line":75,"column":0},"end":{"line":75,"column":0}},{"start":{"line":75,"column":0},"end":{"line":75,"column":0}}]},"6":{"line":103,"type":"if","locations":[{"start":{"line":103,"column":2},"end":{"line":103,"column":2}},{"start":{"line":103,"column":2},"end":{"line":103,"column":2}}]},"7":{"line":103,"type":"binary-expr","locations":[{"start":{"line":103,"column":6},"end":{"line":103,"column":27}},{"start":{"line":103,"column":31},"end":{"line":103,"column":44}}]},"8":{"line":152,"type":"if","locations":[{"start":{"line":152,"column":2},"end":{"line":152,"column":2}},{"start":{"line":152,"column":2},"end":{"line":152,"column":2}}]},"9":{"line":154,"type":"if","locations":[{"start":{"line":154,"column":9},"end":{"line":154,"column":9}},{"start":{"line":154,"column":9},"end":{"line":154,"column":9}}]},"10":{"line":186,"type":"if","locations":[{"start":{"line":186,"column":2},"end":{"line":186,"column":2}},{"start":{"line":186,"column":2},"end":{"line":186,"column":2}}]},"11":{"line":193,"type":"if","locations":[{"start":{"line":193,"column":4},"end":{"line":193,"column":4}},{"start":{"line":193,"column":4},"end":{"line":193,"column":4}}]},"12":{"line":200,"type":"if","locations":[{"start":{"line":200,"column":2},"end":{"line":200,"column":2}},{"start":{"line":200,"column":2},"end":{"line":200,"column":2}}]},"13":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":2},"end":{"line":205,"column":2}},{"start":{"line":205,"column":2},"end":{"line":205,"column":2}}]},"14":{"line":209,"type":"if","locations":[{"start":{"line":209,"column":2},"end":{"line":209,"column":2}},{"start":{"line":209,"column":2},"end":{"line":209,"column":2}}]},"15":{"line":217,"type":"if","locations":[{"start":{"line":217,"column":2},"end":{"line":217,"column":2}},{"start":{"line":217,"column":2},"end":{"line":217,"column":2}}]},"16":{"line":217,"type":"binary-expr","locations":[{"start":{"line":217,"column":6},"end":{"line":217,"column":35}},{"start":{"line":217,"column":39},"end":{"line":217,"column":73}},{"start":{"line":217,"column":77},"end":{"line":217,"column":100}}]},"17":{"line":226,"type":"if","locations":[{"start":{"line":226,"column":4},"end":{"line":226,"column":4}},{"start":{"line":226,"column":4},"end":{"line":226,"column":4}}]},"18":{"line":228,"type":"if","locations":[{"start":{"line":228,"column":11},"end":{"line":228,"column":11}},{"start":{"line":228,"column":11},"end":{"line":228,"column":11}}]},"19":{"line":241,"type":"if","locations":[{"start":{"line":241,"column":0},"end":{"line":241,"column":0}},{"start":{"line":241,"column":0},"end":{"line":241,"column":0}}]},"20":{"line":267,"type":"if","locations":[{"start":{"line":267,"column":2},"end":{"line":267,"column":2}},{"start":{"line":267,"column":2},"end":{"line":267,"column":2}}]},"21":{"line":282,"type":"if","locations":[{"start":{"line":282,"column":2},"end":{"line":282,"column":2}},{"start":{"line":282,"column":2},"end":{"line":282,"column":2}}]},"22":{"line":285,"type":"if","locations":[{"start":{"line":285,"column":9},"end":{"line":285,"column":9}},{"start":{"line":285,"column":9},"end":{"line":285,"column":9}}]},"23":{"line":288,"type":"if","locations":[{"start":{"line":288,"column":9},"end":{"line":288,"column":9}},{"start":{"line":288,"column":9},"end":{"line":288,"column":9}}]},"24":{"line":299,"type":"if","locations":[{"start":{"line":299,"column":2},"end":{"line":299,"column":2}},{"start":{"line":299,"column":2},"end":{"line":299,"column":2}}]},"25":{"line":307,"type":"if","locations":[{"start":{"line":307,"column":2},"end":{"line":307,"column":2}},{"start":{"line":307,"column":2},"end":{"line":307,"column":2}}]},"26":{"line":316,"type":"if","locations":[{"start":{"line":316,"column":0},"end":{"line":316,"column":0}},{"start":{"line":316,"column":0},"end":{"line":316,"column":0}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","// *****************************************************************************","// node -O 10000 -P 4 -R 0.5","// *****************************************************************************","","var aerospike = require('aerospike')","var cluster = require('cluster')","var winston = require('winston')","var stats = require('./stats')","var alerts = require('./alerts')","var argv = require('./config.json')","","// *****************************************************************************","// Globals","// *****************************************************************************","","var OP_TYPES = 4 // READ, WRITE, SCAN and QUERY","var STATS = 3 // OPERATIONS, TIMEOUTS and ERRORS","","var queryWorkers = 0","var scanWorkers = 0","var online = 0","var exited = 0","var rwOnline = 0","var queryOnline = 0","var scanOnline = 0","","//","// Number of completed operations(READ & WRITE), timed out operations and operations that ran into error per second","//","var intervalStats = new Array(OP_TYPES)","resetIntervalStats()","","if (argv.querySpec !== undefined) {","  queryWorkers = argv.querySpec.length","}","","if (argv.scanSpec !== undefined) {","  scanWorkers = argv.scanSpec.length","}","","var rwWorkers = argv.processes - queryWorkers - scanWorkers","","if (!cluster.isMaster) {","  console.error('main.js must not run as a child process.')","  process.exit()","}","","var FOPS = (argv.operations / (argv.reads + argv.writes))","var ROPS = FOPS * argv.reads","var WOPS = FOPS * argv.writes","var ROPSPCT = ROPS / argv.operations * 100","var WOPSPCT = WOPS / argv.operations * 100","","if ((ROPS + WOPS) < argv.operations) {","  var DOPS = argv.operations - (ROPS + WOPS)","  ROPS += DOPS","}","","if (argv.time !== undefined) {","  argv.time = stats.parseTimeToSecs(argv.time)","  argv.iterations = undefined","}","","var alert = {mode: argv.alert, filename: argv.filename}","alerts.setupAlertSystem(alert)","","// *****************************************************************************","// Logging","// *****************************************************************************","","var logger = new (winston.Logger)({","  transports: [","    new (winston.transports.Console)({","      level: 'info',","      silent: false,","      colorize: true","    })","  ]","})","","// *****************************************************************************","// Functions","// *****************************************************************************","","function finalize () {","  stats.stop()","  if (argv.summary === true && rwWorkers > 0) {","    return stats.reportFinal(argv, console.log)","  }","}","","function workerSpawn () {","  var worker = cluster.fork()","  worker.iteration = 0","  worker.on('message', workerResults(worker))","}","","function workerExit (worker) {","  worker.send(['end'])","}","","function workerShutdown () {","  Object.keys(cluster.workers).forEach(function (id) {","    workerExit(cluster.workers[id])","  })","}","","/**"," * Signal all workers asking for data on transactions"," */","function workerProbe () {","  Object.keys(cluster.workers).forEach(function (id) {","    cluster.workers[id].send(['trans'])","  })","}","","function rwWorkerJob (worker) {","  var option = {","    namespace: argv.namespace,","    set: argv.set,","    keyRange: argv.keyRange,","    rops: ROPS,","    wops: WOPS,","    binSpec: argv.binSpec","  }","  worker.iteration++","  worker.send(['run', option])","}","","// @to-do this worker has to create index and then issue a query request","// once the index is created. After implementing the task completed API","// this can be enhanced for that.","function queryWorkerJob (worker, id) {","  var stmt = {}","  var queryConfig = argv.querySpec[id]","  if (queryConfig.qtype === 'Range') {","    stmt.filters = [aerospike.filter.range(queryConfig.bin, queryConfig.min, queryConfig.max)]","  } else if (queryConfig.qtype === 'Equal') {","    stmt.filters = [aerospike.filter.equal(queryConfig.bin, queryConfig.value)]","  }","","  var options = {","    namespace: argv.namespace,","    set: argv.set,","    statement: stmt","  }","  worker.send(['query', options])","}","","function scanWorkerJob (worker) {","  var options = {","    namespace: argv.namespace,","    set: argv.set,","    statement: argv.scanSpec","  }","  worker.send(['query', options])","}","","/**"," * Collects the data related to transactions and prints it once the data is recieved from all workers."," * (called per second)"," */","var counter = 0 // Number of times workerResultsInterval is called","function workerResultsInterval (worker, intervalWorkerStats) {","  for (var i = 0; i < OP_TYPES; i++) {","    for (var j = 0; j < STATS; j++) {","      intervalStats[i][j] = intervalStats[i][j] + intervalWorkerStats[i][j]","    }","  }","  if (++counter % argv.processes === 0) {","    stats.interval({","      'read': intervalStats[0],","      'write': intervalStats[1],","      'query': intervalStats[2],","      'scan': intervalStats[3]","    })","    if (!argv.silent) {","      printIntervalStats()","    }","  }","}","","function printIntervalStats () {","  if (rwWorkers > 0) {","    logger.info('%s read(tps=%d timeouts=%d errors=%d) write(tps=%d timeouts=%d errors=%d) ',","      new Date().toString(), intervalStats[0][0], intervalStats[0][1], intervalStats[0][2],","      intervalStats[1][0], intervalStats[1][1], intervalStats[1][2])","  }","  if (queryWorkers) {","    logger.info('%s query(records = %d timeouts = %d errors = %d)',","      new Date().toString(), intervalStats[2][0], intervalStats[2][1], intervalStats[2][2])","  }","  if (scanWorkers) {","    logger.info('%s scan(records = %d timeouts = %d errors = %d)',","      new Date().toString(), intervalStats[3][0], intervalStats[3][1], intervalStats[3][2])","  }","}","","function workerResultsIteration (worker, opStats) {","  stats.iteration(opStats)","  if (argv.iterations === undefined || worker.iteration < argv.iterations || argv.time !== undefined) {","    rwWorkerJob(worker)","  } else {","    workerExit(worker)","  }","}","","function workerResults (worker) {","  return function (message) {","    if (message[0] === 'stats') {","      workerResultsIteration(worker, message[1])","    } else if (message[0] === 'alert') {","      alerts.handleAlert(message[1].alert, message[1].severity)","    } else {","      workerResultsInterval(worker, message[1])","    }","  }","}","","/**","*  * Print config information","*   */","var keyrange = argv.keyRange.max - argv.keyRange.min","","if (!argv.silent) {","  logger.info('namespace: ' + argv.namespace + ', set: ' + argv.set + ', worker processes: ' + argv.processes +","    ', keys: ' + keyrange + ', read: ' + ROPSPCT + '%, write: ' + WOPSPCT + '%')","}","","/**"," * Flush out the current intervalStats and probe the worker every second."," */","setInterval(function () {","  resetIntervalStats()","  workerProbe(cluster)","}, 1000)","","/**"," * Reset the value of internal_stats."," */","function resetIntervalStats () {","  intervalStats = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]","}","","// *****************************************************************************","// Event Listeners","// *****************************************************************************","","process.on('exit', function () {","  logger.debug('Exiting.')","  if (exited === online) {","    return finalize()","  }","})","","process.on('SIGINT', function () {","  logger.debug('Recevied SIGINT.')","})","","process.on('SIGTERM', function () {","  logger.debug('Received SIGTERM.')","})","","cluster.on('online', function (worker) {","  online++","  if (rwOnline < rwWorkers) {","    rwOnline++","    rwWorkerJob(worker)","  } else if (queryOnline < queryWorkers) {","    queryWorkerJob(worker, queryOnline)","    queryOnline++","  } else if (scanOnline < scanWorkers) {","    scanOnline++","    scanWorkerJob(worker)","  }","})","","cluster.on('disconnect', function (worker, code, signal) {","  logger.debug('[worker: %d] Disconnected.', worker.process.pid, code)","})","","cluster.on('exit', function (worker, code, signal) {","  if (code !== 0) {","    // non-ok status code","    logger.error('[worker: %d] Exited: %d', worker.process.pid, code)","    process.exit(1)","  } else {","    logger.debug('[worker: %d] Exited: %d', worker.process.pid, code)","    exited++","  }","  if (exited === online) {","    process.exit(0)","  }","})","","// *****************************************************************************","// Setup Workers","// *****************************************************************************","","if (argv.time !== undefined) {","  setTimeout(function () {","    resetIntervalStats()","    workerProbe(cluster)","    workerShutdown(cluster)","  }, argv.time * 1000)","}","","cluster.setupMaster({","  exec: 'worker.js',","  silent: false","})","","stats.start()","for (var p = 0; p < argv.processes; p++) {","  workerSpawn()","}",""],"l":{"21":2,"22":2,"23":2,"24":0,"25":0,"26":0,"32":0,"33":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"46":0,"47":0,"49":0,"50":0,"53":0,"54":0,"57":0,"59":0,"60":0,"61":0,"64":0,"65":0,"66":0,"67":0,"68":0,"70":0,"71":0,"72":0,"75":0,"76":0,"77":0,"80":0,"81":0,"87":0,"101":1,"102":0,"103":0,"104":0,"108":1,"109":0,"110":0,"111":0,"114":1,"115":0,"118":1,"119":0,"120":0,"127":1,"128":0,"129":0,"133":1,"134":0,"142":0,"143":0,"149":1,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"158":0,"163":0,"166":1,"167":0,"172":0,"179":0,"180":1,"181":0,"182":0,"183":0,"186":0,"187":0,"193":0,"194":0,"199":1,"200":0,"201":0,"205":0,"206":0,"209":0,"210":0,"215":1,"216":0,"217":0,"218":0,"220":0,"224":1,"225":0,"226":0,"227":0,"228":0,"229":0,"231":0,"239":0,"241":0,"242":0,"249":0,"250":0,"251":0,"257":1,"258":0,"265":0,"266":0,"267":0,"268":0,"272":0,"273":0,"276":0,"277":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"294":0,"295":0,"298":0,"299":0,"301":0,"302":0,"304":0,"305":0,"307":0,"308":0,"316":0,"317":0,"318":0,"319":0,"320":0,"324":0,"329":0,"330":0,"331":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/memory.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/memory.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":1,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":1,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"fnMap":{"1":{"name":"memoryBar","line":97,"loc":{"start":{"line":97,"column":0},"end":{"line":97,"column":42}}},"2":{"name":"report","line":113,"loc":{"start":{"line":113,"column":0},"end":{"line":113,"column":19}}},"3":{"name":"(anonymous_3)","line":128,"loc":{"start":{"line":128,"column":35},"end":{"line":128,"column":51}}},"4":{"name":"(anonymous_4)","line":141,"loc":{"start":{"line":141,"column":19},"end":{"line":141,"column":35}}},"5":{"name":"(anonymous_5)","line":220,"loc":{"start":{"line":220,"column":40},"end":{"line":220,"column":53}}},"6":{"name":"(anonymous_6)","line":228,"loc":{"start":{"line":228,"column":42},"end":{"line":228,"column":55}}},"7":{"name":"(anonymous_7)","line":236,"loc":{"start":{"line":236,"column":42},"end":{"line":236,"column":55}}},"8":{"name":"(anonymous_8)","line":244,"loc":{"start":{"line":244,"column":43},"end":{"line":244,"column":56}}},"9":{"name":"readline","line":258,"loc":{"start":{"line":258,"column":0},"end":{"line":258,"column":25}}},"10":{"name":"(anonymous_10)","line":300,"loc":{"start":{"line":300,"column":25},"end":{"line":300,"column":42}}},"11":{"name":"(anonymous_11)","line":318,"loc":{"start":{"line":318,"column":24},"end":{"line":318,"column":36}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":32}},"2":{"start":{"line":18,"column":0},"end":{"line":18,"column":28}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":34}},"4":{"start":{"line":22,"column":0},"end":{"line":38,"column":1}},"5":{"start":{"line":40,"column":0},"end":{"line":46,"column":1}},"6":{"start":{"line":48,"column":0},"end":{"line":48,"column":23}},"7":{"start":{"line":50,"column":0},"end":{"line":50,"column":14}},"8":{"start":{"line":51,"column":0},"end":{"line":51,"column":10}},"9":{"start":{"line":52,"column":0},"end":{"line":52,"column":10}},"10":{"start":{"line":53,"column":0},"end":{"line":53,"column":18}},"11":{"start":{"line":59,"column":0},"end":{"line":81,"column":4}},"12":{"start":{"line":83,"column":0},"end":{"line":83,"column":20}},"13":{"start":{"line":85,"column":0},"end":{"line":88,"column":1}},"14":{"start":{"line":86,"column":2},"end":{"line":86,"column":17}},"15":{"start":{"line":87,"column":2},"end":{"line":87,"column":16}},"16":{"start":{"line":94,"column":0},"end":{"line":94,"column":20}},"17":{"start":{"line":95,"column":0},"end":{"line":95,"column":21}},"18":{"start":{"line":97,"column":0},"end":{"line":111,"column":1}},"19":{"start":{"line":98,"column":2},"end":{"line":98,"column":67}},"20":{"start":{"line":99,"column":2},"end":{"line":99,"column":41}},"21":{"start":{"line":100,"column":2},"end":{"line":102,"column":3}},"22":{"start":{"line":101,"column":4},"end":{"line":101,"column":24}},"23":{"start":{"line":104,"column":2},"end":{"line":104,"column":67}},"24":{"start":{"line":105,"column":2},"end":{"line":105,"column":54}},"25":{"start":{"line":106,"column":2},"end":{"line":108,"column":3}},"26":{"start":{"line":107,"column":4},"end":{"line":107,"column":24}},"27":{"start":{"line":110,"column":2},"end":{"line":110,"column":63}},"28":{"start":{"line":113,"column":0},"end":{"line":256,"column":1}},"29":{"start":{"line":114,"column":2},"end":{"line":114,"column":18}},"30":{"start":{"line":115,"column":2},"end":{"line":115,"column":18}},"31":{"start":{"line":116,"column":2},"end":{"line":116,"column":19}},"32":{"start":{"line":118,"column":2},"end":{"line":122,"column":4}},"33":{"start":{"line":124,"column":2},"end":{"line":124,"column":7}},"34":{"start":{"line":126,"column":2},"end":{"line":126,"column":28}},"35":{"start":{"line":128,"column":2},"end":{"line":139,"column":4}},"36":{"start":{"line":129,"column":4},"end":{"line":131,"column":5}},"37":{"start":{"line":130,"column":6},"end":{"line":130,"column":18}},"38":{"start":{"line":132,"column":4},"end":{"line":134,"column":5}},"39":{"start":{"line":133,"column":6},"end":{"line":133,"column":18}},"40":{"start":{"line":135,"column":4},"end":{"line":137,"column":5}},"41":{"start":{"line":136,"column":6},"end":{"line":136,"column":18}},"42":{"start":{"line":138,"column":4},"end":{"line":138,"column":15}},"43":{"start":{"line":141,"column":2},"end":{"line":173,"column":4}},"44":{"start":{"line":142,"column":4},"end":{"line":142,"column":33}},"45":{"start":{"line":143,"column":4},"end":{"line":143,"column":50}},"46":{"start":{"line":145,"column":4},"end":{"line":145,"column":33}},"47":{"start":{"line":146,"column":4},"end":{"line":146,"column":50}},"48":{"start":{"line":148,"column":4},"end":{"line":148,"column":30}},"49":{"start":{"line":149,"column":4},"end":{"line":149,"column":46}},"50":{"start":{"line":151,"column":4},"end":{"line":171,"column":5}},"51":{"start":{"line":152,"column":6},"end":{"line":160,"column":8}},"52":{"start":{"line":162,"column":6},"end":{"line":170,"column":8}},"53":{"start":{"line":172,"column":4},"end":{"line":172,"column":9}},"54":{"start":{"line":175,"column":2},"end":{"line":175,"column":7}},"55":{"start":{"line":177,"column":2},"end":{"line":177,"column":18}},"56":{"start":{"line":178,"column":2},"end":{"line":178,"column":18}},"57":{"start":{"line":179,"column":2},"end":{"line":182,"column":3}},"58":{"start":{"line":180,"column":4},"end":{"line":180,"column":25}},"59":{"start":{"line":181,"column":4},"end":{"line":181,"column":28}},"60":{"start":{"line":183,"column":2},"end":{"line":187,"column":4}},"61":{"start":{"line":188,"column":2},"end":{"line":188,"column":24}},"62":{"start":{"line":190,"column":2},"end":{"line":190,"column":18}},"63":{"start":{"line":191,"column":2},"end":{"line":191,"column":18}},"64":{"start":{"line":192,"column":2},"end":{"line":195,"column":3}},"65":{"start":{"line":193,"column":4},"end":{"line":193,"column":25}},"66":{"start":{"line":194,"column":4},"end":{"line":194,"column":28}},"67":{"start":{"line":196,"column":2},"end":{"line":200,"column":4}},"68":{"start":{"line":201,"column":2},"end":{"line":201,"column":24}},"69":{"start":{"line":203,"column":2},"end":{"line":203,"column":19}},"70":{"start":{"line":204,"column":2},"end":{"line":204,"column":19}},"71":{"start":{"line":205,"column":2},"end":{"line":208,"column":3}},"72":{"start":{"line":206,"column":4},"end":{"line":206,"column":20}},"73":{"start":{"line":207,"column":4},"end":{"line":207,"column":30}},"74":{"start":{"line":209,"column":2},"end":{"line":213,"column":4}},"75":{"start":{"line":214,"column":2},"end":{"line":214,"column":26}},"76":{"start":{"line":218,"column":2},"end":{"line":218,"column":15}},"77":{"start":{"line":219,"column":2},"end":{"line":219,"column":37}},"78":{"start":{"line":220,"column":2},"end":{"line":224,"column":4}},"79":{"start":{"line":221,"column":4},"end":{"line":223,"column":5}},"80":{"start":{"line":222,"column":6},"end":{"line":222,"column":20}},"81":{"start":{"line":226,"column":2},"end":{"line":226,"column":15}},"82":{"start":{"line":227,"column":2},"end":{"line":227,"column":48}},"83":{"start":{"line":228,"column":2},"end":{"line":232,"column":4}},"84":{"start":{"line":229,"column":4},"end":{"line":231,"column":5}},"85":{"start":{"line":230,"column":6},"end":{"line":230,"column":20}},"86":{"start":{"line":234,"column":2},"end":{"line":234,"column":15}},"87":{"start":{"line":235,"column":2},"end":{"line":235,"column":48}},"88":{"start":{"line":236,"column":2},"end":{"line":240,"column":4}},"89":{"start":{"line":237,"column":4},"end":{"line":239,"column":5}},"90":{"start":{"line":238,"column":6},"end":{"line":238,"column":20}},"91":{"start":{"line":242,"column":2},"end":{"line":242,"column":15}},"92":{"start":{"line":243,"column":2},"end":{"line":243,"column":37}},"93":{"start":{"line":244,"column":2},"end":{"line":248,"column":4}},"94":{"start":{"line":245,"column":4},"end":{"line":247,"column":5}},"95":{"start":{"line":246,"column":6},"end":{"line":246,"column":20}},"96":{"start":{"line":250,"column":2},"end":{"line":250,"column":15}},"97":{"start":{"line":251,"column":2},"end":{"line":251,"column":69}},"98":{"start":{"line":252,"column":2},"end":{"line":252,"column":87}},"99":{"start":{"line":253,"column":2},"end":{"line":253,"column":83}},"100":{"start":{"line":255,"column":2},"end":{"line":255,"column":15}},"101":{"start":{"line":258,"column":0},"end":{"line":292,"column":1}},"102":{"start":{"line":259,"column":2},"end":{"line":261,"column":3}},"103":{"start":{"line":260,"column":4},"end":{"line":260,"column":15}},"104":{"start":{"line":263,"column":2},"end":{"line":263,"column":37}},"105":{"start":{"line":264,"column":2},"end":{"line":267,"column":3}},"106":{"start":{"line":265,"column":4},"end":{"line":265,"column":63}},"107":{"start":{"line":266,"column":4},"end":{"line":266,"column":19}},"108":{"start":{"line":269,"column":2},"end":{"line":269,"column":34}},"109":{"start":{"line":271,"column":2},"end":{"line":274,"column":3}},"110":{"start":{"line":272,"column":4},"end":{"line":272,"column":16}},"111":{"start":{"line":273,"column":4},"end":{"line":273,"column":14}},"112":{"start":{"line":276,"column":2},"end":{"line":289,"column":3}},"113":{"start":{"line":277,"column":4},"end":{"line":277,"column":16}},"114":{"start":{"line":278,"column":4},"end":{"line":278,"column":12}},"115":{"start":{"line":283,"column":4},"end":{"line":283,"column":44}},"116":{"start":{"line":286,"column":4},"end":{"line":286,"column":16}},"117":{"start":{"line":287,"column":4},"end":{"line":287,"column":16}},"118":{"start":{"line":288,"column":4},"end":{"line":288,"column":14}},"119":{"start":{"line":291,"column":2},"end":{"line":291,"column":19}},"120":{"start":{"line":298,"column":0},"end":{"line":298,"column":12}},"121":{"start":{"line":300,"column":0},"end":{"line":316,"column":2}},"122":{"start":{"line":301,"column":2},"end":{"line":301,"column":11}},"123":{"start":{"line":302,"column":2},"end":{"line":302,"column":11}},"124":{"start":{"line":304,"column":2},"end":{"line":311,"column":3}},"125":{"start":{"line":305,"column":4},"end":{"line":310,"column":5}},"126":{"start":{"line":306,"column":6},"end":{"line":306,"column":44}},"127":{"start":{"line":307,"column":6},"end":{"line":307,"column":26}},"128":{"start":{"line":309,"column":6},"end":{"line":309,"column":33}},"129":{"start":{"line":313,"column":2},"end":{"line":315,"column":3}},"130":{"start":{"line":314,"column":4},"end":{"line":314,"column":29}},"131":{"start":{"line":318,"column":0},"end":{"line":320,"column":2}},"132":{"start":{"line":319,"column":2},"end":{"line":319,"column":10}},"133":{"start":{"line":326,"column":0},"end":{"line":326,"column":22}},"134":{"start":{"line":327,"column":0},"end":{"line":327,"column":33}}},"branchMap":{"1":{"line":85,"type":"if","locations":[{"start":{"line":85,"column":0},"end":{"line":85,"column":0}},{"start":{"line":85,"column":0},"end":{"line":85,"column":0}}]},"2":{"line":100,"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":2}},{"start":{"line":100,"column":2},"end":{"line":100,"column":2}}]},"3":{"line":106,"type":"if","locations":[{"start":{"line":106,"column":2},"end":{"line":106,"column":2}},{"start":{"line":106,"column":2},"end":{"line":106,"column":2}}]},"4":{"line":129,"type":"if","locations":[{"start":{"line":129,"column":4},"end":{"line":129,"column":4}},{"start":{"line":129,"column":4},"end":{"line":129,"column":4}}]},"5":{"line":129,"type":"binary-expr","locations":[{"start":{"line":129,"column":8},"end":{"line":129,"column":19}},{"start":{"line":129,"column":23},"end":{"line":129,"column":44}}]},"6":{"line":132,"type":"if","locations":[{"start":{"line":132,"column":4},"end":{"line":132,"column":4}},{"start":{"line":132,"column":4},"end":{"line":132,"column":4}}]},"7":{"line":132,"type":"binary-expr","locations":[{"start":{"line":132,"column":8},"end":{"line":132,"column":18}},{"start":{"line":132,"column":22},"end":{"line":132,"column":36}}]},"8":{"line":135,"type":"if","locations":[{"start":{"line":135,"column":4},"end":{"line":135,"column":4}},{"start":{"line":135,"column":4},"end":{"line":135,"column":4}}]},"9":{"line":135,"type":"binary-expr","locations":[{"start":{"line":135,"column":8},"end":{"line":135,"column":16}},{"start":{"line":135,"column":20},"end":{"line":135,"column":32}}]},"10":{"line":143,"type":"binary-expr","locations":[{"start":{"line":143,"column":24},"end":{"line":143,"column":40}},{"start":{"line":143,"column":44},"end":{"line":143,"column":45}}]},"11":{"line":146,"type":"binary-expr","locations":[{"start":{"line":146,"column":24},"end":{"line":146,"column":40}},{"start":{"line":146,"column":44},"end":{"line":146,"column":45}}]},"12":{"line":149,"type":"binary-expr","locations":[{"start":{"line":149,"column":22},"end":{"line":149,"column":36}},{"start":{"line":149,"column":40},"end":{"line":149,"column":41}}]},"13":{"line":151,"type":"if","locations":[{"start":{"line":151,"column":4},"end":{"line":151,"column":4}},{"start":{"line":151,"column":4},"end":{"line":151,"column":4}}]},"14":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"15":{"line":229,"type":"if","locations":[{"start":{"line":229,"column":4},"end":{"line":229,"column":4}},{"start":{"line":229,"column":4},"end":{"line":229,"column":4}}]},"16":{"line":237,"type":"if","locations":[{"start":{"line":237,"column":4},"end":{"line":237,"column":4}},{"start":{"line":237,"column":4},"end":{"line":237,"column":4}}]},"17":{"line":245,"type":"if","locations":[{"start":{"line":245,"column":4},"end":{"line":245,"column":4}},{"start":{"line":245,"column":4},"end":{"line":245,"column":4}}]},"18":{"line":259,"type":"if","locations":[{"start":{"line":259,"column":2},"end":{"line":259,"column":2}},{"start":{"line":259,"column":2},"end":{"line":259,"column":2}}]},"19":{"line":264,"type":"if","locations":[{"start":{"line":264,"column":2},"end":{"line":264,"column":2}},{"start":{"line":264,"column":2},"end":{"line":264,"column":2}}]},"20":{"line":264,"type":"binary-expr","locations":[{"start":{"line":264,"column":6},"end":{"line":264,"column":14}},{"start":{"line":264,"column":18},"end":{"line":264,"column":29}}]},"21":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":2},"end":{"line":271,"column":2}},{"start":{"line":271,"column":2},"end":{"line":271,"column":2}}]},"22":{"line":276,"type":"if","locations":[{"start":{"line":276,"column":2},"end":{"line":276,"column":2}},{"start":{"line":276,"column":2},"end":{"line":276,"column":2}}]},"23":{"line":276,"type":"binary-expr","locations":[{"start":{"line":276,"column":6},"end":{"line":276,"column":26}},{"start":{"line":276,"column":30},"end":{"line":276,"column":42}}]},"24":{"line":305,"type":"if","locations":[{"start":{"line":305,"column":4},"end":{"line":305,"column":4}},{"start":{"line":305,"column":4},"end":{"line":305,"column":4}}]},"25":{"line":313,"type":"if","locations":[{"start":{"line":313,"column":2},"end":{"line":313,"column":2}},{"start":{"line":313,"column":2},"end":{"line":313,"column":2}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","var Table = require('cli-table')","var yargs = require('yargs')","","var MEM_MATCH = /(\\d+(\\.\\d+)?) MB/","","var TABLE_CHARS = {","  'top': '',","  'top-mid': '',","  'top-left': '',","  'top-right': '',","  'bottom': '',","  'bottom-mid': '',","  'bottom-left': '',","  'bottom-right': '',","  'left': '',","  'left-mid': '',","  'mid': '',","  'mid-mid': '',","  'right': '',","  'right-mid': '',","  'middle': ''","}","","var TABLE_STYLE = {","  'padding-left': 4,","  'padding-right': 0,","  'head': ['blue'],","  'border': ['grey'],","  'compact': true","}","","var ITERATION_COUNT = 0","","var memCnt = 0","var memMin","var memMax","var memRanges = []","","// *****************************************************************************","// Options Parsing","// *****************************************************************************","","var argp = yargs","  .usage('$0 [options]')","  .options({","    help: {","      boolean: true,","      describe: 'Display this message.'","    },","    factor: {","      alias: 'f',","      default: 1,","      describe: 'Factor to filter by.'","    },","    start: {","      alias: 's',","      default: undefined,","      describe: 'Start GC range.'","    },","    end: {","      alias: 'e',","      default: undefined,","      describe: 'End GC range.'","    }","  })","","var argv = argp.argv","","if (argv.help === true) {","  argp.showHelp()","  process.exit()","}","","// *****************************************************************************","// Functions","// *****************************************************************************","","var MEM_MAX_MB = 100","var MEM_BUCKETS = 100","","function memoryBar (minUsedMb, maxUsedMb) {","  var minUsedLen = Math.floor(minUsedMb / MEM_MAX_MB * MEM_BUCKETS)","  var minUsedBar = new Buffer(minUsedLen)","  if (minUsedLen > 0) {","    minUsedBar.fill(']')","  }","","  var maxUsedLen = Math.floor(maxUsedMb / MEM_MAX_MB * MEM_BUCKETS)","  var maxUsedBar = new Buffer(maxUsedLen - minUsedLen)","  if (maxUsedLen > 0) {","    maxUsedBar.fill(']')","  }","","  return minUsedBar.toString().blue + maxUsedBar.toString().red","}","","function report () {","  var minhist = {}","  var maxhist = {}","  var stephist = {}","","  var rtable = new Table({","    head: ['min', 'min diff', 'max', 'max diff', 'steps', 'size'],","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","","  var l","","  var unfiltered = memRanges","","  var filtered = unfiltered.filter(function (r, i) {","    if (argv.factor && i % argv.factor !== 0) {","      return false","    }","    if (argv.start && i < argv.start) {","      return false","    }","    if (argv.end && i > argv.end) {","      return false","    }","    return true","  })","","  filtered.forEach(function (r, i) {","    var minceil = Math.ceil(r[0])","    minhist[minceil] = (minhist[minceil] || 0) + 1","","    var maxceil = Math.ceil(r[1])","    maxhist[maxceil] = (maxhist[maxceil] || 0) + 1","","    var step = Math.ceil(r[2])","    stephist[step] = (stephist[step] || 0) + 1","","    if (l) {","      rtable.push([","        r[0],","        (r[0] - l[0]).toFixed(3),","        r[1],","        (r[1] - l[1]).toFixed(3),","        r[2],","        (r[1] - r[0]).toFixed(3),","        memoryBar(r[0], r[1])","      ])","    } else {","      rtable.push([","        r[0],","        0.00,","        r[1],","        0.00,","        r[2],","        (r[1] - r[0]).toFixed(3),","        memoryBar(r[0], r[1])","      ])","    }","    l = r","  })","","  var k","","  var minhead = []","  var minbody = []","  for (k in minhist) {","    minhead.push('<' + k)","    minbody.push(minhist[k])","  }","  var mintable = new Table({","    head: minhead,","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","  mintable.push(minbody)","","  var maxhead = []","  var maxbody = []","  for (k in maxhist) {","    maxhead.push('<' + k)","    maxbody.push(maxhist[k])","  }","  var maxtable = new Table({","    head: maxhead,","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","  maxtable.push(maxbody)","","  var stephead = []","  var stepbody = []","  for (k in stephist) {","    stephead.push(k)","    stepbody.push(stephist[k])","  }","  var steptable = new Table({","    head: stephead,","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","  steptable.push(stepbody)","","// *****************************************************************************","","  console.log()","  console.log('Heap Usage (MB)'.grey)","  rtable.toString().split('\\n').forEach(function (l) {","    if (l.length > 0) {","      console.log(l)","    }","  })","","  console.log()","  console.log('Heap Used Lower Bound (MB)'.grey)","  mintable.toString().split('\\n').forEach(function (l) {","    if (l.length > 0) {","      console.log(l)","    }","  })","","  console.log()","  console.log('Heap Used Upper Bound (MB)'.grey)","  maxtable.toString().split('\\n').forEach(function (l) {","    if (l.length > 0) {","      console.log(l)","    }","  })","","  console.log()","  console.log('Iterations / GC'.grey)","  steptable.toString().split('\\n').forEach(function (l) {","    if (l.length > 0) {","      console.log(l)","    }","  })","","  console.log()","  console.log('%s %d', 'Number of Iterations:'.grey, ITERATION_COUNT)","  console.log('%s %d', 'Number of GC executions (unfiltered):'.grey, unfiltered.length)","  console.log('%s %d', 'Number of GC executions (filtered):'.grey, filtered.length)","","  console.log()","}","","function readline (line) {","  if (line.trim().length === 0) {","    return line","  }","","  var matches = line.match(MEM_MATCH)","  if (!matches || !matches[1]) {","    console.error('RegEx match failed on: |%s|', line, matches)","    process.exit(1)","  }","","  var mem = parseFloat(matches[1])","","  if (memMin === undefined) {","    memMin = mem","    memCnt = 0","  }","","  if (memMax === undefined || mem > memMax) {","    memMax = mem","    memCnt++","  } else {","    // this is where the magic happens","","    // we will filter based on a factor","    memRanges.push([memMin, memMax, memCnt])","","    // reset","    memMin = mem","    memMax = mem","    memCnt = 0","  }","","  ITERATION_COUNT++","}","","// *****************************************************************************","// Event Listeners","// *****************************************************************************","","var lastLine","","process.stdin.on('data', function (chunk) {","  var i = 0","  var j = 0","","  for (i = 0, j = chunk.indexOf('\\n', i); j !== -1; i = j + 1, j = chunk.indexOf('\\n', i)) {","    if (lastLine) {","      readline(lastLine + chunk.slice(i, j))","      lastLine = undefined","    } else {","      readline(chunk.slice(i, j))","    }","  }","","  if (chunk.length > i) {","    lastLine = chunk.slice(i)","  }","})","","process.stdin.on('end', function () {","  report()","})","","// *****************************************************************************","// Run","// *****************************************************************************","","process.stdin.resume()","process.stdin.setEncoding('utf8')",""],"l":{"17":2,"18":0,"20":0,"22":0,"40":0,"48":0,"50":0,"51":0,"52":0,"53":0,"59":0,"83":0,"85":0,"86":0,"87":0,"94":0,"95":0,"97":1,"98":0,"99":0,"100":0,"101":0,"104":0,"105":0,"106":0,"107":0,"110":0,"113":1,"114":0,"115":0,"116":0,"118":0,"124":0,"126":0,"128":0,"129":0,"130":0,"132":0,"133":0,"135":0,"136":0,"138":0,"141":0,"142":0,"143":0,"145":0,"146":0,"148":0,"149":0,"151":0,"152":0,"162":0,"172":0,"175":0,"177":0,"178":0,"179":0,"180":0,"181":0,"183":0,"188":0,"190":0,"191":0,"192":0,"193":0,"194":0,"196":0,"201":0,"203":0,"204":0,"205":0,"206":0,"207":0,"209":0,"214":0,"218":0,"219":0,"220":0,"221":0,"222":0,"226":0,"227":0,"228":0,"229":0,"230":0,"234":0,"235":0,"236":0,"237":0,"238":0,"242":0,"243":0,"244":0,"245":0,"246":0,"250":0,"251":0,"252":0,"253":0,"255":0,"258":1,"259":0,"260":0,"263":0,"264":0,"265":0,"266":0,"269":0,"271":0,"272":0,"273":0,"276":0,"277":0,"278":0,"283":0,"286":0,"287":0,"288":0,"291":0,"298":0,"300":0,"301":0,"302":0,"304":0,"305":0,"306":0,"307":0,"309":0,"313":0,"314":0,"318":0,"319":0,"326":0,"327":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/stats.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/stats.js","s":{"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1,"13":0,"14":1,"15":0,"16":0,"17":0,"18":0,"19":1,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":1,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1,"50":0,"51":1,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":1,"61":0,"62":0,"63":0,"64":1,"65":0,"66":0,"67":0,"68":1,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":1,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":1,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":1,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":1,"116":0,"117":1,"118":0,"119":0,"120":1,"121":0,"122":0,"123":1,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":1,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":1,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0},"fnMap":{"1":{"name":"sum","line":68,"loc":{"start":{"line":68,"column":0},"end":{"line":68,"column":20}}},"2":{"name":"duration","line":72,"loc":{"start":{"line":72,"column":0},"end":{"line":72,"column":31}}},"3":{"name":"parseTimeToSecs","line":79,"loc":{"start":{"line":79,"column":0},"end":{"line":79,"column":32}}},"4":{"name":"timeHistogram","line":100,"loc":{"start":{"line":100,"column":0},"end":{"line":100,"column":36}}},"5":{"name":"(anonymous_5)","line":101,"loc":{"start":{"line":101,"column":17},"end":{"line":101,"column":31}}},"6":{"name":"(anonymous_6)","line":103,"loc":{"start":{"line":103,"column":13},"end":{"line":103,"column":28}}},"7":{"name":"numberFormat","line":124,"loc":{"start":{"line":124,"column":0},"end":{"line":124,"column":37}}},"8":{"name":"timeUnits","line":128,"loc":{"start":{"line":128,"column":0},"end":{"line":128,"column":23}}},"9":{"name":"calculateTPS","line":144,"loc":{"start":{"line":144,"column":0},"end":{"line":144,"column":37}}},"10":{"name":"(anonymous_10)","line":146,"loc":{"start":{"line":146,"column":36},"end":{"line":146,"column":52}}},"11":{"name":"statusHistogram","line":151,"loc":{"start":{"line":151,"column":0},"end":{"line":151,"column":38}}},"12":{"name":"(anonymous_12)","line":152,"loc":{"start":{"line":152,"column":17},"end":{"line":152,"column":31}}},"13":{"name":"(anonymous_13)","line":154,"loc":{"start":{"line":154,"column":13},"end":{"line":154,"column":31}}},"14":{"name":"printTable","line":159,"loc":{"start":{"line":159,"column":0},"end":{"line":159,"column":43}}},"15":{"name":"(anonymous_15)","line":160,"loc":{"start":{"line":160,"column":39},"end":{"line":160,"column":52}}},"16":{"name":"printEnvTable","line":167,"loc":{"start":{"line":167,"column":0},"end":{"line":167,"column":39}}},"17":{"name":"printConfigTable","line":179,"loc":{"start":{"line":179,"column":0},"end":{"line":179,"column":50}}},"18":{"name":"printTransactions","line":193,"loc":{"start":{"line":193,"column":0},"end":{"line":193,"column":57}}},"19":{"name":"(anonymous_19)","line":207,"loc":{"start":{"line":207,"column":24},"end":{"line":207,"column":39}}},"20":{"name":"(anonymous_20)","line":212,"loc":{"start":{"line":212,"column":20},"end":{"line":212,"column":35}}},"21":{"name":"(anonymous_21)","line":217,"loc":{"start":{"line":217,"column":20},"end":{"line":217,"column":35}}},"22":{"name":"(anonymous_22)","line":222,"loc":{"start":{"line":222,"column":20},"end":{"line":222,"column":35}}},"23":{"name":"printHistogram","line":230,"loc":{"start":{"line":230,"column":0},"end":{"line":230,"column":51}}},"24":{"name":"(anonymous_24)","line":231,"loc":{"start":{"line":231,"column":41},"end":{"line":231,"column":54}}},"25":{"name":"start","line":254,"loc":{"start":{"line":254,"column":0},"end":{"line":254,"column":18}}},"26":{"name":"stop","line":258,"loc":{"start":{"line":258,"column":0},"end":{"line":258,"column":17}}},"27":{"name":"iteration","line":263,"loc":{"start":{"line":263,"column":0},"end":{"line":263,"column":32}}},"28":{"name":"aggregateIntervalStats","line":268,"loc":{"start":{"line":268,"column":0},"end":{"line":268,"column":47}}},"29":{"name":"interval","line":275,"loc":{"start":{"line":275,"column":0},"end":{"line":275,"column":34}}},"30":{"name":"reportFinal","line":285,"loc":{"start":{"line":285,"column":0},"end":{"line":285,"column":35}}}},"statementMap":{"1":{"start":{"line":17,"column":0},"end":{"line":17,"column":32}},"2":{"start":{"line":19,"column":0},"end":{"line":19,"column":26}},"3":{"start":{"line":20,"column":0},"end":{"line":20,"column":30}},"4":{"start":{"line":21,"column":0},"end":{"line":21,"column":28}},"5":{"start":{"line":26,"column":0},"end":{"line":26,"column":13}},"6":{"start":{"line":27,"column":0},"end":{"line":35,"column":1}},"7":{"start":{"line":37,"column":0},"end":{"line":37,"column":66}},"8":{"start":{"line":39,"column":0},"end":{"line":39,"column":13}},"9":{"start":{"line":40,"column":0},"end":{"line":40,"column":17}},"10":{"start":{"line":42,"column":0},"end":{"line":58,"column":1}},"11":{"start":{"line":60,"column":0},"end":{"line":66,"column":1}},"12":{"start":{"line":68,"column":0},"end":{"line":70,"column":1}},"13":{"start":{"line":69,"column":2},"end":{"line":69,"column":14}},"14":{"start":{"line":72,"column":0},"end":{"line":77,"column":1}},"15":{"start":{"line":73,"column":2},"end":{"line":73,"column":42}},"16":{"start":{"line":74,"column":2},"end":{"line":74,"column":32}},"17":{"start":{"line":75,"column":2},"end":{"line":75,"column":23}},"18":{"start":{"line":76,"column":2},"end":{"line":76,"column":11}},"19":{"start":{"line":79,"column":0},"end":{"line":98,"column":1}},"20":{"start":{"line":80,"column":2},"end":{"line":96,"column":3}},"21":{"start":{"line":81,"column":4},"end":{"line":81,"column":58}},"22":{"start":{"line":82,"column":4},"end":{"line":95,"column":5}},"23":{"start":{"line":83,"column":6},"end":{"line":94,"column":7}},"24":{"start":{"line":84,"column":8},"end":{"line":84,"column":41}},"25":{"start":{"line":85,"column":8},"end":{"line":85,"column":35}},"26":{"start":{"line":86,"column":8},"end":{"line":93,"column":9}},"27":{"start":{"line":88,"column":12},"end":{"line":88,"column":28}},"28":{"start":{"line":89,"column":12},"end":{"line":89,"column":17}},"29":{"start":{"line":91,"column":12},"end":{"line":91,"column":33}},"30":{"start":{"line":92,"column":12},"end":{"line":92,"column":17}},"31":{"start":{"line":97,"column":2},"end":{"line":97,"column":13}},"32":{"start":{"line":100,"column":0},"end":{"line":122,"column":1}},"33":{"start":{"line":101,"column":2},"end":{"line":121,"column":4}},"34":{"start":{"line":102,"column":4},"end":{"line":102,"column":69}},"35":{"start":{"line":104,"column":4},"end":{"line":104,"column":27}},"36":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"37":{"start":{"line":106,"column":6},"end":{"line":106,"column":24}},"38":{"start":{"line":108,"column":4},"end":{"line":120,"column":5}},"39":{"start":{"line":109,"column":6},"end":{"line":109,"column":24}},"40":{"start":{"line":110,"column":11},"end":{"line":120,"column":5}},"41":{"start":{"line":111,"column":6},"end":{"line":111,"column":23}},"42":{"start":{"line":112,"column":11},"end":{"line":120,"column":5}},"43":{"start":{"line":113,"column":6},"end":{"line":113,"column":23}},"44":{"start":{"line":114,"column":11},"end":{"line":120,"column":5}},"45":{"start":{"line":115,"column":6},"end":{"line":115,"column":23}},"46":{"start":{"line":116,"column":11},"end":{"line":120,"column":5}},"47":{"start":{"line":117,"column":6},"end":{"line":117,"column":23}},"48":{"start":{"line":119,"column":6},"end":{"line":119,"column":24}},"49":{"start":{"line":124,"column":0},"end":{"line":126,"column":1}},"50":{"start":{"line":125,"column":2},"end":{"line":125,"column":83}},"51":{"start":{"line":128,"column":0},"end":{"line":142,"column":1}},"52":{"start":{"line":129,"column":2},"end":{"line":129,"column":40}},"53":{"start":{"line":131,"column":2},"end":{"line":134,"column":3}},"54":{"start":{"line":132,"column":4},"end":{"line":132,"column":14}},"55":{"start":{"line":133,"column":4},"end":{"line":133,"column":38}},"56":{"start":{"line":136,"column":2},"end":{"line":139,"column":3}},"57":{"start":{"line":137,"column":4},"end":{"line":137,"column":14}},"58":{"start":{"line":138,"column":4},"end":{"line":138,"column":34}},"59":{"start":{"line":141,"column":2},"end":{"line":141,"column":37}},"60":{"start":{"line":144,"column":0},"end":{"line":149,"column":1}},"61":{"start":{"line":145,"column":2},"end":{"line":145,"column":36}},"62":{"start":{"line":146,"column":2},"end":{"line":148,"column":4}},"63":{"start":{"line":147,"column":4},"end":{"line":147,"column":69}},"64":{"start":{"line":151,"column":0},"end":{"line":157,"column":1}},"65":{"start":{"line":152,"column":2},"end":{"line":156,"column":4}},"66":{"start":{"line":153,"column":4},"end":{"line":153,"column":31}},"67":{"start":{"line":155,"column":4},"end":{"line":155,"column":42}},"68":{"start":{"line":159,"column":0},"end":{"line":165,"column":1}},"69":{"start":{"line":160,"column":2},"end":{"line":164,"column":4}},"70":{"start":{"line":161,"column":4},"end":{"line":163,"column":5}},"71":{"start":{"line":162,"column":6},"end":{"line":162,"column":31}},"72":{"start":{"line":167,"column":0},"end":{"line":177,"column":1}},"73":{"start":{"line":168,"column":2},"end":{"line":171,"column":4}},"74":{"start":{"line":173,"column":2},"end":{"line":173,"column":59}},"75":{"start":{"line":174,"column":2},"end":{"line":174,"column":78}},"76":{"start":{"line":176,"column":2},"end":{"line":176,"column":37}},"77":{"start":{"line":179,"column":0},"end":{"line":191,"column":1}},"78":{"start":{"line":180,"column":2},"end":{"line":183,"column":4}},"79":{"start":{"line":185,"column":2},"end":{"line":185,"column":53}},"80":{"start":{"line":186,"column":2},"end":{"line":186,"column":101}},"81":{"start":{"line":187,"column":2},"end":{"line":187,"column":51}},"82":{"start":{"line":188,"column":2},"end":{"line":188,"column":94}},"83":{"start":{"line":190,"column":2},"end":{"line":190,"column":40}},"84":{"start":{"line":193,"column":0},"end":{"line":228,"column":1}},"85":{"start":{"line":194,"column":2},"end":{"line":194,"column":16}},"86":{"start":{"line":195,"column":2},"end":{"line":195,"column":16}},"87":{"start":{"line":196,"column":2},"end":{"line":198,"column":3}},"88":{"start":{"line":197,"column":4},"end":{"line":197,"column":17}},"89":{"start":{"line":200,"column":2},"end":{"line":204,"column":4}},"90":{"start":{"line":205,"column":2},"end":{"line":205,"column":41}},"91":{"start":{"line":207,"column":2},"end":{"line":209,"column":4}},"92":{"start":{"line":208,"column":4},"end":{"line":208,"column":54}},"93":{"start":{"line":210,"column":2},"end":{"line":210,"column":28}},"94":{"start":{"line":212,"column":2},"end":{"line":214,"column":4}},"95":{"start":{"line":213,"column":4},"end":{"line":213,"column":52}},"96":{"start":{"line":215,"column":2},"end":{"line":215,"column":26}},"97":{"start":{"line":217,"column":2},"end":{"line":219,"column":4}},"98":{"start":{"line":218,"column":4},"end":{"line":218,"column":56}},"99":{"start":{"line":220,"column":2},"end":{"line":220,"column":30}},"100":{"start":{"line":222,"column":2},"end":{"line":224,"column":4}},"101":{"start":{"line":223,"column":4},"end":{"line":223,"column":56}},"102":{"start":{"line":225,"column":2},"end":{"line":225,"column":30}},"103":{"start":{"line":227,"column":2},"end":{"line":227,"column":34}},"104":{"start":{"line":230,"column":0},"end":{"line":252,"column":1}},"105":{"start":{"line":231,"column":2},"end":{"line":233,"column":16}},"106":{"start":{"line":232,"column":4},"end":{"line":232,"column":23}},"107":{"start":{"line":235,"column":2},"end":{"line":235,"column":16}},"108":{"start":{"line":236,"column":2},"end":{"line":236,"column":16}},"109":{"start":{"line":238,"column":2},"end":{"line":241,"column":3}},"110":{"start":{"line":239,"column":4},"end":{"line":239,"column":17}},"111":{"start":{"line":240,"column":4},"end":{"line":240,"column":65}},"112":{"start":{"line":243,"column":2},"end":{"line":247,"column":4}},"113":{"start":{"line":249,"column":2},"end":{"line":249,"column":19}},"114":{"start":{"line":251,"column":2},"end":{"line":251,"column":34}},"115":{"start":{"line":254,"column":0},"end":{"line":256,"column":1}},"116":{"start":{"line":255,"column":2},"end":{"line":255,"column":30}},"117":{"start":{"line":258,"column":0},"end":{"line":261,"column":1}},"118":{"start":{"line":259,"column":2},"end":{"line":259,"column":32}},"119":{"start":{"line":260,"column":2},"end":{"line":260,"column":46}},"120":{"start":{"line":263,"column":0},"end":{"line":266,"column":1}},"121":{"start":{"line":264,"column":2},"end":{"line":264,"column":29}},"122":{"start":{"line":265,"column":2},"end":{"line":265,"column":27}},"123":{"start":{"line":268,"column":0},"end":{"line":273,"column":1}},"124":{"start":{"line":269,"column":2},"end":{"line":269,"column":94}},"125":{"start":{"line":270,"column":2},"end":{"line":270,"column":22}},"126":{"start":{"line":271,"column":2},"end":{"line":271,"column":50}},"127":{"start":{"line":271,"column":29},"end":{"line":271,"column":50}},"128":{"start":{"line":272,"column":2},"end":{"line":272,"column":50}},"129":{"start":{"line":272,"column":29},"end":{"line":272,"column":50}},"130":{"start":{"line":275,"column":0},"end":{"line":283,"column":1}},"131":{"start":{"line":276,"column":2},"end":{"line":276,"column":17}},"132":{"start":{"line":277,"column":2},"end":{"line":281,"column":3}},"133":{"start":{"line":278,"column":4},"end":{"line":278,"column":35}},"134":{"start":{"line":279,"column":4},"end":{"line":279,"column":17}},"135":{"start":{"line":280,"column":4},"end":{"line":280,"column":36}},"136":{"start":{"line":282,"column":2},"end":{"line":282,"column":42}},"137":{"start":{"line":285,"column":0},"end":{"line":326,"column":1}},"138":{"start":{"line":286,"column":2},"end":{"line":286,"column":21}},"139":{"start":{"line":287,"column":2},"end":{"line":323,"column":3}},"140":{"start":{"line":288,"column":4},"end":{"line":288,"column":11}},"141":{"start":{"line":289,"column":4},"end":{"line":289,"column":20}},"142":{"start":{"line":290,"column":4},"end":{"line":290,"column":11}},"143":{"start":{"line":291,"column":4},"end":{"line":291,"column":26}},"144":{"start":{"line":292,"column":4},"end":{"line":292,"column":24}},"145":{"start":{"line":293,"column":4},"end":{"line":293,"column":11}},"146":{"start":{"line":294,"column":4},"end":{"line":294,"column":28}},"147":{"start":{"line":295,"column":4},"end":{"line":295,"column":33}},"148":{"start":{"line":296,"column":4},"end":{"line":296,"column":11}},"149":{"start":{"line":297,"column":4},"end":{"line":297,"column":27}},"150":{"start":{"line":298,"column":4},"end":{"line":298,"column":35}},"151":{"start":{"line":299,"column":4},"end":{"line":299,"column":11}},"152":{"start":{"line":300,"column":4},"end":{"line":300,"column":24}},"153":{"start":{"line":301,"column":4},"end":{"line":301,"column":35}},"154":{"start":{"line":302,"column":4},"end":{"line":302,"column":11}},"155":{"start":{"line":303,"column":4},"end":{"line":303,"column":27}},"156":{"start":{"line":304,"column":4},"end":{"line":304,"column":31}},"157":{"start":{"line":305,"column":4},"end":{"line":305,"column":11}},"158":{"start":{"line":307,"column":4},"end":{"line":321,"column":5}},"159":{"start":{"line":322,"column":4},"end":{"line":322,"column":29}},"160":{"start":{"line":325,"column":2},"end":{"line":325,"column":10}},"161":{"start":{"line":328,"column":0},"end":{"line":336,"column":1}}},"branchMap":{"1":{"line":80,"type":"if","locations":[{"start":{"line":80,"column":2},"end":{"line":80,"column":2}},{"start":{"line":80,"column":2},"end":{"line":80,"column":2}}]},"2":{"line":82,"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":82,"column":4}},{"start":{"line":82,"column":4},"end":{"line":82,"column":4}}]},"3":{"line":83,"type":"if","locations":[{"start":{"line":83,"column":6},"end":{"line":83,"column":6}},{"start":{"line":83,"column":6},"end":{"line":83,"column":6}}]},"4":{"line":86,"type":"switch","locations":[{"start":{"line":87,"column":10},"end":{"line":89,"column":17}},{"start":{"line":90,"column":10},"end":{"line":92,"column":17}}]},"5":{"line":105,"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":105,"column":4}},{"start":{"line":105,"column":4},"end":{"line":105,"column":4}}]},"6":{"line":108,"type":"if","locations":[{"start":{"line":108,"column":4},"end":{"line":108,"column":4}},{"start":{"line":108,"column":4},"end":{"line":108,"column":4}}]},"7":{"line":110,"type":"if","locations":[{"start":{"line":110,"column":11},"end":{"line":110,"column":11}},{"start":{"line":110,"column":11},"end":{"line":110,"column":11}}]},"8":{"line":112,"type":"if","locations":[{"start":{"line":112,"column":11},"end":{"line":112,"column":11}},{"start":{"line":112,"column":11},"end":{"line":112,"column":11}}]},"9":{"line":114,"type":"if","locations":[{"start":{"line":114,"column":11},"end":{"line":114,"column":11}},{"start":{"line":114,"column":11},"end":{"line":114,"column":11}}]},"10":{"line":116,"type":"if","locations":[{"start":{"line":116,"column":11},"end":{"line":116,"column":11}},{"start":{"line":116,"column":11},"end":{"line":116,"column":11}}]},"11":{"line":125,"type":"binary-expr","locations":[{"start":{"line":125,"column":19},"end":{"line":125,"column":28}},{"start":{"line":125,"column":32},"end":{"line":125,"column":33}}]},"12":{"line":129,"type":"cond-expr","locations":[{"start":{"line":129,"column":20},"end":{"line":129,"column":28}},{"start":{"line":129,"column":31},"end":{"line":129,"column":40}}]},"13":{"line":131,"type":"if","locations":[{"start":{"line":131,"column":2},"end":{"line":131,"column":2}},{"start":{"line":131,"column":2},"end":{"line":131,"column":2}}]},"14":{"line":133,"type":"cond-expr","locations":[{"start":{"line":133,"column":18},"end":{"line":133,"column":26}},{"start":{"line":133,"column":29},"end":{"line":133,"column":38}}]},"15":{"line":136,"type":"if","locations":[{"start":{"line":136,"column":2},"end":{"line":136,"column":2}},{"start":{"line":136,"column":2},"end":{"line":136,"column":2}}]},"16":{"line":138,"type":"cond-expr","locations":[{"start":{"line":138,"column":18},"end":{"line":138,"column":24}},{"start":{"line":138,"column":27},"end":{"line":138,"column":34}}]},"17":{"line":155,"type":"binary-expr","locations":[{"start":{"line":155,"column":20},"end":{"line":155,"column":32}},{"start":{"line":155,"column":36},"end":{"line":155,"column":37}}]},"18":{"line":161,"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":161,"column":4}},{"start":{"line":161,"column":4},"end":{"line":161,"column":4}}]},"19":{"line":162,"type":"binary-expr","locations":[{"start":{"line":162,"column":13},"end":{"line":162,"column":19}},{"start":{"line":162,"column":23},"end":{"line":162,"column":25}}]},"20":{"line":174,"type":"binary-expr","locations":[{"start":{"line":174,"column":39},"end":{"line":174,"column":69}},{"start":{"line":174,"column":73},"end":{"line":174,"column":76}}]},"21":{"line":186,"type":"cond-expr","locations":[{"start":{"line":186,"column":68},"end":{"line":186,"column":79}},{"start":{"line":186,"column":82},"end":{"line":186,"column":99}}]},"22":{"line":188,"type":"cond-expr","locations":[{"start":{"line":188,"column":56},"end":{"line":188,"column":67}},{"start":{"line":188,"column":70},"end":{"line":188,"column":92}}]},"23":{"line":269,"type":"binary-expr","locations":[{"start":{"line":269,"column":32},"end":{"line":269,"column":47}},{"start":{"line":269,"column":51},"end":{"line":269,"column":94}}]},"24":{"line":271,"type":"if","locations":[{"start":{"line":271,"column":2},"end":{"line":271,"column":2}},{"start":{"line":271,"column":2},"end":{"line":271,"column":2}}]},"25":{"line":272,"type":"if","locations":[{"start":{"line":272,"column":2},"end":{"line":272,"column":2}},{"start":{"line":272,"column":2},"end":{"line":272,"column":2}}]},"26":{"line":287,"type":"if","locations":[{"start":{"line":287,"column":2},"end":{"line":287,"column":2}},{"start":{"line":287,"column":2},"end":{"line":287,"column":2}}]},"27":{"line":310,"type":"binary-expr","locations":[{"start":{"line":310,"column":30},"end":{"line":310,"column":60}},{"start":{"line":310,"column":64},"end":{"line":310,"column":68}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","var Table = require('cli-table')","","const OPERATION_STATUS = 0","const OPERATION_TIME_START = 1","const OPERATION_TIME_END = 2","","// histograms","// 1. For status code of each operation.","// 2. Latency histogram.","var hist = {}","var timeHist = {","  '<= 1': 0,","  '> 1': 0,","  '> 2': 0,","  '> 4': 0,","  '> 8': 0,","  '> 16': 0,","  '> 32': 0","}","","var trans = { total: { count: 0, min_tps: Infinity, max_tps: 0 } }","","var startTime","var totalDuration","","const TABLE_CHARS = {","  'top': '',","  'top-mid': '',","  'top-left': '',","  'top-right': '',","  'bottom': '',","  'bottom-mid': '',","  'bottom-left': '',","  'bottom-right': '',","  'left': '',","  'left-mid': '',","  'mid': '',","  'mid-mid': '',","  'right': '',","  'right-mid': '',","  'middle': ''","}","","const TABLE_STYLE = {","  'padding-left': 4,","  'padding-right': 0,","  'head': ['blue'],","  'border': ['grey'],","  'compact': true","}","","function sum (l, r) {","  return l + r","}","","function duration (start, end) {","  var s = (end[0] - start[0]) * 1000000000","  var ns = s + end[1] - start[1]","  var ms = ns / 1000000","  return ms","}","","function parseTimeToSecs (time) {","  if (time !== undefined) {","    var timeMatch = time.toString().match(/(\\d+)([smh])?/)","    if (timeMatch !== null) {","      if (timeMatch[2] !== null) {","        time = parseInt(timeMatch[1], 10)","        var timeUnit = timeMatch[2]","        switch (timeUnit) {","          case 'm':","            time = time * 60","            break","          case 'h':","            time = time * 60 * 60","            break","        }","      }","    }","  }","  return time","}","","function timeHistogram (operations) {","  operations.map(function (op) {","    return duration(op[OPERATION_TIME_START], op[OPERATION_TIME_END])","  }).forEach(function (dur) {","    var d = Math.floor(dur)","    if (d > 32) {","      timeHist['> 32']++","    }","    if (d > 16) {","      timeHist['> 16']++","    } else if (d > 8) {","      timeHist['> 8']++","    } else if (d > 4) {","      timeHist['> 4']++","    } else if (d > 2) {","      timeHist['> 2']++","    } else if (d > 1) {","      timeHist['> 1']++","    } else {","      timeHist['<= 1']++","    }","  })","}","","function numberFormat (v, precision) {","  return v.toFixed(precision || 0).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')","}","","function timeUnits (v) {","  var u = v === 1 ? 'second' : 'seconds'","","  if (Math.abs(v) >= 60) {","    v = v / 60","    u = v === 1 ? 'minute' : 'minutes'","  }","","  if (Math.abs(v) >= 60) {","    v = v / 60","    u = v === 1 ? 'hour' : 'hours'","  }","","  return numberFormat(v, 2) + ' ' + u","}","","function calculateTPS (transactions) {","  var seconds = totalDuration / 1000","  Object.keys(transactions).forEach(function (stat) {","    transactions[stat]['tps'] = transactions[stat]['count'] / seconds","  })","}","","function statusHistogram (operations) {","  operations.map(function (op) {","    return op[OPERATION_STATUS]","  }).forEach(function (status) {","    hist[status] = (hist[status] || 0) + 1","  })","}","","function printTable (table, print, prefix) {","  table.toString().split('\\n').forEach(function (l) {","    if (l.length > 0) {","      print((prefix || '') + l)","    }","  })","}","","function printEnvTable (print, prefix) {","  var envTable = new Table({","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","","  envTable.push({'Node.js Version': process.versions.node})","  envTable.push({'UV_THREADPOOL_SIZE': process.env.UV_THREADPOOL_SIZE || '-'})","","  printTable(envTable, print, prefix)","}","","function printConfigTable (config, print, prefix) {","  var configTable = new Table({","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","","  configTable.push({'operations': config.operations})","  configTable.push({'iterations': config.iterations === undefined ? 'undefined' : config.iterations})","  configTable.push({'processes': config.processes})","  configTable.push({'time': config.time === undefined ? 'undefined' : timeUnits(config.time)})","","  printTable(configTable, print, prefix)","}","","function printTransactions (transactions, print, prefix) {","  var thead = []","  thead.push('')","  for (var t in transactions) {","    thead.push(t)","  }","","  var table = new Table({","    head: thead,","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","  var columns = Object.keys(transactions)","","  var row = columns.map(function (col) {","    return numberFormat(transactions[col]['count'], 0)","  })","  table.push({'Total': row})","","  row = columns.map(function (col) {","    return numberFormat(transactions[col]['tps'], 0)","  })","  table.push({'TPS': row})","","  row = columns.map(function (col) {","    return numberFormat(transactions[col]['min_tps'], 0)","  })","  table.push({'Min TPS': row})","","  row = columns.map(function (col) {","    return numberFormat(transactions[col]['max_tps'], 0)","  })","  table.push({'Max TPS': row})","","  printTable(table, print, prefix)","}","","function printHistogram (histogram, print, prefix) {","  var total = Object.keys(histogram).map(function (k) {","    return histogram[k]","  }).reduce(sum)","","  var thead = []","  var tbody = []","","  for (var k in histogram) {","    thead.push(k)","    tbody.push(numberFormat(histogram[k] / total * 100, 1) + '%')","  }","","  var table = new Table({","    head: thead,","    chars: TABLE_CHARS,","    style: TABLE_STYLE","  })","","  table.push(tbody)","","  printTable(table, print, prefix)","}","","function start () {","  startTime = process.hrtime()","}","","function stop () {","  var endTime = process.hrtime()","  totalDuration = duration(startTime, endTime)","}","","function iteration (operations) {","  statusHistogram(operations)","  timeHistogram(operations)","}","","function aggregateIntervalStats (statName, tx) {","  var stats = trans[statName] = trans[statName] || { count: 0, max_tps: 0, min_tps: Infinity }","  stats['count'] += tx","  if (tx > stats['max_tps']) stats['max_tps'] = tx","  if (tx < stats['min_tps']) stats['min_tps'] = tx","}","","function interval (intervalStats) {","  var totalTX = 0","  for (var stat in intervalStats) {","    var tx = intervalStats[stat][0]","    totalTX += tx","    aggregateIntervalStats(stat, tx)","  }","  aggregateIntervalStats('total', totalTX)","}","","function reportFinal (argv, print) {","  calculateTPS(trans)","  if (!argv.json) {","    print()","    print('SUMMARY')","    print()","    print('  Environment')","    printEnvTable(print)","    print()","    print('  Configuration')","    printConfigTable(argv, print)","    print()","    print('  Transactions')","    printTransactions(trans, print)","    print()","    print('  Durations')","    printHistogram(timeHist, print)","    print()","    print('  Status Codes')","    printHistogram(hist, print)","    print()","  } else {","    var output = {","      env: {","        nodejs: process.versions.node,","        'UV_THREADPOOL_SIZE': process.env.UV_THREADPOOL_SIZE || null","      },","      configuration: {","        operations: argv.operations,","        iterations: argv.iterations,","        processes: argv.processes","      },","      duration: totalDuration,","      transactions: trans,","      durations: timeHist,","      status_codes: hist","    }","    console.log('%j', output)","  }","","  return 0","}","","module.exports = {","  start: start,","  stop: stop,","  iteration: iteration,","  interval: interval,","  printHistogram: printHistogram,","  reportFinal: reportFinal,","  parseTimeToSecs: parseTimeToSecs","}",""],"l":{"17":2,"19":0,"20":0,"21":0,"26":0,"27":0,"37":0,"39":0,"40":0,"42":0,"60":0,"68":1,"69":0,"72":1,"73":0,"74":0,"75":0,"76":0,"79":1,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"88":0,"89":0,"91":0,"92":0,"97":0,"100":1,"101":0,"102":0,"104":0,"105":0,"106":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"119":0,"124":1,"125":0,"128":1,"129":0,"131":0,"132":0,"133":0,"136":0,"137":0,"138":0,"141":0,"144":1,"145":0,"146":0,"147":0,"151":1,"152":0,"153":0,"155":0,"159":1,"160":0,"161":0,"162":0,"167":1,"168":0,"173":0,"174":0,"176":0,"179":1,"180":0,"185":0,"186":0,"187":0,"188":0,"190":0,"193":1,"194":0,"195":0,"196":0,"197":0,"200":0,"205":0,"207":0,"208":0,"210":0,"212":0,"213":0,"215":0,"217":0,"218":0,"220":0,"222":0,"223":0,"225":0,"227":0,"230":1,"231":0,"232":0,"235":0,"236":0,"238":0,"239":0,"240":0,"243":0,"249":0,"251":0,"254":1,"255":0,"258":1,"259":0,"260":0,"263":1,"264":0,"265":0,"268":1,"269":0,"270":0,"271":0,"272":0,"275":1,"276":0,"277":0,"278":0,"279":0,"280":0,"282":0,"285":1,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"307":0,"322":0,"325":0,"328":0}},"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/worker.js":{"path":"/home/travis/build/npmtest/node-npmtest-aerospike/node_modules/aerospike/benchmarks/worker.js","s":{"1":2,"2":2,"3":2,"4":2,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":1,"40":0,"41":0,"42":0,"43":1,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":1,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":1,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":1,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":1,"108":0,"109":0,"110":1,"111":0,"112":0,"113":0,"114":0,"115":1,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0},"b":{"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0,0,0],"9":[0,0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0,0,0]},"f":{"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0},"fnMap":{"1":{"name":"(anonymous_1)","line":100,"loc":{"start":{"line":100,"column":15},"end":{"line":100,"column":30}}},"2":{"name":"keygen","line":115,"loc":{"start":{"line":115,"column":0},"end":{"line":115,"column":27}}},"3":{"name":"recordgen","line":127,"loc":{"start":{"line":127,"column":0},"end":{"line":127,"column":34}}},"4":{"name":"get","line":159,"loc":{"start":{"line":159,"column":0},"end":{"line":159,"column":25}}},"5":{"name":"(anonymous_5)","line":161,"loc":{"start":{"line":161,"column":18},"end":{"line":161,"column":62}}},"6":{"name":"put","line":173,"loc":{"start":{"line":173,"column":0},"end":{"line":173,"column":29}}},"7":{"name":"(anonymous_7)","line":175,"loc":{"start":{"line":175,"column":52},"end":{"line":175,"column":96}}},"8":{"name":"run","line":186,"loc":{"start":{"line":186,"column":0},"end":{"line":186,"column":23}}},"9":{"name":"done","line":200,"loc":{"start":{"line":200,"column":2},"end":{"line":200,"column":59}}},"10":{"name":"respond","line":235,"loc":{"start":{"line":235,"column":0},"end":{"line":235,"column":20}}},"11":{"name":"resetIntervalData","line":243,"loc":{"start":{"line":243,"column":0},"end":{"line":243,"column":30}}},"12":{"name":"executeJob","line":254,"loc":{"start":{"line":254,"column":0},"end":{"line":254,"column":48}}},"13":{"name":"(anonymous_13)","line":257,"loc":{"start":{"line":257,"column":20},"end":{"line":257,"column":38}}},"14":{"name":"(anonymous_14)","line":261,"loc":{"start":{"line":261,"column":21},"end":{"line":261,"column":38}}},"15":{"name":"(anonymous_15)","line":267,"loc":{"start":{"line":267,"column":19},"end":{"line":267,"column":31}}},"16":{"name":"(anonymous_16)","line":273,"loc":{"start":{"line":273,"column":24},"end":{"line":273,"column":43}}},"17":{"name":"(anonymous_17)","line":281,"loc":{"start":{"line":281,"column":20},"end":{"line":281,"column":32}}},"18":{"name":"(anonymous_18)","line":313,"loc":{"start":{"line":313,"column":19},"end":{"line":313,"column":31}}},"19":{"name":"(anonymous_19)","line":317,"loc":{"start":{"line":317,"column":21},"end":{"line":317,"column":33}}},"20":{"name":"(anonymous_20)","line":322,"loc":{"start":{"line":322,"column":22},"end":{"line":322,"column":34}}},"21":{"name":"(anonymous_21)","line":341,"loc":{"start":{"line":341,"column":22},"end":{"line":341,"column":37}}}},"statementMap":{"1":{"start":{"line":21,"column":0},"end":{"line":21,"column":36}},"2":{"start":{"line":22,"column":0},"end":{"line":22,"column":32}},"3":{"start":{"line":23,"column":0},"end":{"line":23,"column":26}},"4":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}},"5":{"start":{"line":25,"column":0},"end":{"line":25,"column":30}},"6":{"start":{"line":26,"column":0},"end":{"line":26,"column":29}},"7":{"start":{"line":27,"column":0},"end":{"line":27,"column":35}},"8":{"start":{"line":28,"column":0},"end":{"line":28,"column":35}},"9":{"start":{"line":34,"column":0},"end":{"line":34,"column":16}},"10":{"start":{"line":35,"column":0},"end":{"line":35,"column":12}},"11":{"start":{"line":36,"column":0},"end":{"line":36,"column":13}},"12":{"start":{"line":37,"column":0},"end":{"line":37,"column":13}},"13":{"start":{"line":38,"column":0},"end":{"line":38,"column":12}},"14":{"start":{"line":39,"column":0},"end":{"line":39,"column":11}},"15":{"start":{"line":40,"column":0},"end":{"line":40,"column":15}},"16":{"start":{"line":41,"column":0},"end":{"line":41,"column":13}},"17":{"start":{"line":43,"column":0},"end":{"line":46,"column":1}},"18":{"start":{"line":44,"column":2},"end":{"line":44,"column":76}},"19":{"start":{"line":45,"column":2},"end":{"line":45,"column":16}},"20":{"start":{"line":48,"column":0},"end":{"line":48,"column":42}},"21":{"start":{"line":51,"column":0},"end":{"line":51,"column":18}},"22":{"start":{"line":52,"column":0},"end":{"line":52,"column":22}},"23":{"start":{"line":53,"column":0},"end":{"line":53,"column":17}},"24":{"start":{"line":54,"column":0},"end":{"line":54,"column":19}},"25":{"start":{"line":60,"column":0},"end":{"line":68,"column":2}},"26":{"start":{"line":74,"column":0},"end":{"line":84,"column":1}},"27":{"start":{"line":86,"column":0},"end":{"line":88,"column":1}},"28":{"start":{"line":87,"column":2},"end":{"line":87,"column":61}},"29":{"start":{"line":90,"column":0},"end":{"line":92,"column":1}},"30":{"start":{"line":91,"column":2},"end":{"line":91,"column":25}},"31":{"start":{"line":94,"column":0},"end":{"line":96,"column":1}},"32":{"start":{"line":95,"column":2},"end":{"line":95,"column":33}},"33":{"start":{"line":98,"column":0},"end":{"line":98,"column":37}},"34":{"start":{"line":100,"column":0},"end":{"line":107,"column":2}},"35":{"start":{"line":101,"column":2},"end":{"line":106,"column":3}},"36":{"start":{"line":102,"column":4},"end":{"line":102,"column":60}},"37":{"start":{"line":103,"column":4},"end":{"line":103,"column":19}},"38":{"start":{"line":105,"column":4},"end":{"line":105,"column":59}},"39":{"start":{"line":115,"column":0},"end":{"line":118,"column":1}},"40":{"start":{"line":116,"column":2},"end":{"line":116,"column":76}},"41":{"start":{"line":117,"column":2},"end":{"line":117,"column":28}},"42":{"start":{"line":120,"column":0},"end":{"line":120,"column":66}},"43":{"start":{"line":127,"column":0},"end":{"line":157,"column":1}},"44":{"start":{"line":128,"column":2},"end":{"line":128,"column":15}},"45":{"start":{"line":129,"column":2},"end":{"line":129,"column":11}},"46":{"start":{"line":130,"column":2},"end":{"line":155,"column":30}},"47":{"start":{"line":131,"column":4},"end":{"line":131,"column":24}},"48":{"start":{"line":132,"column":4},"end":{"line":153,"column":5}},"49":{"start":{"line":134,"column":8},"end":{"line":134,"column":28}},"50":{"start":{"line":135,"column":8},"end":{"line":135,"column":13}},"51":{"start":{"line":137,"column":8},"end":{"line":137,"column":36}},"52":{"start":{"line":138,"column":8},"end":{"line":140,"column":9}},"53":{"start":{"line":139,"column":10},"end":{"line":139,"column":39}},"54":{"start":{"line":141,"column":8},"end":{"line":141,"column":29}},"55":{"start":{"line":142,"column":8},"end":{"line":142,"column":13}},"56":{"start":{"line":144,"column":8},"end":{"line":144,"column":33}},"57":{"start":{"line":145,"column":8},"end":{"line":147,"column":9}},"58":{"start":{"line":146,"column":10},"end":{"line":146,"column":32}},"59":{"start":{"line":148,"column":8},"end":{"line":148,"column":44}},"60":{"start":{"line":149,"column":8},"end":{"line":149,"column":13}},"61":{"start":{"line":151,"column":8},"end":{"line":151,"column":22}},"62":{"start":{"line":152,"column":8},"end":{"line":152,"column":13}},"63":{"start":{"line":154,"column":4},"end":{"line":154,"column":7}},"64":{"start":{"line":156,"column":2},"end":{"line":156,"column":13}},"65":{"start":{"line":159,"column":0},"end":{"line":166,"column":1}},"66":{"start":{"line":160,"column":2},"end":{"line":160,"column":34}},"67":{"start":{"line":161,"column":2},"end":{"line":165,"column":4}},"68":{"start":{"line":162,"column":4},"end":{"line":162,"column":34}},"69":{"start":{"line":163,"column":4},"end":{"line":163,"column":45}},"70":{"start":{"line":164,"column":4},"end":{"line":164,"column":42}},"71":{"start":{"line":169,"column":0},"end":{"line":171,"column":1}},"72":{"start":{"line":173,"column":0},"end":{"line":180,"column":1}},"73":{"start":{"line":174,"column":2},"end":{"line":174,"column":34}},"74":{"start":{"line":175,"column":2},"end":{"line":179,"column":4}},"75":{"start":{"line":176,"column":4},"end":{"line":176,"column":34}},"76":{"start":{"line":177,"column":4},"end":{"line":177,"column":45}},"77":{"start":{"line":178,"column":4},"end":{"line":178,"column":43}},"78":{"start":{"line":183,"column":0},"end":{"line":183,"column":38}},"79":{"start":{"line":184,"column":0},"end":{"line":184,"column":19}},"80":{"start":{"line":186,"column":0},"end":{"line":230,"column":1}},"81":{"start":{"line":187,"column":2},"end":{"line":187,"column":44}},"82":{"start":{"line":188,"column":2},"end":{"line":188,"column":19}},"83":{"start":{"line":196,"column":2},"end":{"line":196,"column":34}},"84":{"start":{"line":197,"column":2},"end":{"line":197,"column":28}},"85":{"start":{"line":198,"column":2},"end":{"line":198,"column":29}},"86":{"start":{"line":200,"column":2},"end":{"line":214,"column":3}},"87":{"start":{"line":201,"column":4},"end":{"line":201,"column":62}},"88":{"start":{"line":202,"column":4},"end":{"line":202,"column":31}},"89":{"start":{"line":203,"column":4},"end":{"line":207,"column":5}},"90":{"start":{"line":204,"column":6},"end":{"line":204,"column":37}},"91":{"start":{"line":205,"column":11},"end":{"line":207,"column":5}},"92":{"start":{"line":206,"column":6},"end":{"line":206,"column":35}},"93":{"start":{"line":209,"column":4},"end":{"line":209,"column":15}},"94":{"start":{"line":211,"column":4},"end":{"line":213,"column":5}},"95":{"start":{"line":212,"column":6},"end":{"line":212,"column":41}},"96":{"start":{"line":216,"column":2},"end":{"line":229,"column":3}},"97":{"start":{"line":217,"column":4},"end":{"line":217,"column":62}},"98":{"start":{"line":218,"column":4},"end":{"line":218,"column":63}},"99":{"start":{"line":219,"column":4},"end":{"line":219,"column":46}},"100":{"start":{"line":220,"column":4},"end":{"line":220,"column":40}},"101":{"start":{"line":221,"column":4},"end":{"line":224,"column":5}},"102":{"start":{"line":222,"column":6},"end":{"line":222,"column":16}},"103":{"start":{"line":223,"column":6},"end":{"line":223,"column":20}},"104":{"start":{"line":225,"column":4},"end":{"line":228,"column":5}},"105":{"start":{"line":226,"column":6},"end":{"line":226,"column":15}},"106":{"start":{"line":227,"column":6},"end":{"line":227,"column":20}},"107":{"start":{"line":235,"column":0},"end":{"line":238,"column":1}},"108":{"start":{"line":236,"column":2},"end":{"line":236,"column":39}},"109":{"start":{"line":237,"column":2},"end":{"line":237,"column":21}},"110":{"start":{"line":243,"column":0},"end":{"line":248,"column":1}},"111":{"start":{"line":244,"column":2},"end":{"line":244,"column":32}},"112":{"start":{"line":245,"column":2},"end":{"line":245,"column":33}},"113":{"start":{"line":246,"column":2},"end":{"line":246,"column":33}},"114":{"start":{"line":247,"column":2},"end":{"line":247,"column":32}},"115":{"start":{"line":254,"column":0},"end":{"line":271,"column":1}},"116":{"start":{"line":255,"column":2},"end":{"line":255,"column":75}},"117":{"start":{"line":256,"column":2},"end":{"line":256,"column":28}},"118":{"start":{"line":257,"column":2},"end":{"line":260,"column":4}},"119":{"start":{"line":259,"column":4},"end":{"line":259,"column":31}},"120":{"start":{"line":261,"column":2},"end":{"line":266,"column":4}},"121":{"start":{"line":262,"column":4},"end":{"line":262,"column":33}},"122":{"start":{"line":263,"column":4},"end":{"line":265,"column":5}},"123":{"start":{"line":264,"column":6},"end":{"line":264,"column":37}},"124":{"start":{"line":267,"column":2},"end":{"line":270,"column":4}},"125":{"start":{"line":269,"column":4},"end":{"line":269,"column":21}},"126":{"start":{"line":273,"column":0},"end":{"line":279,"column":1}},"127":{"start":{"line":274,"column":2},"end":{"line":278,"column":3}},"128":{"start":{"line":275,"column":4},"end":{"line":275,"column":48}},"129":{"start":{"line":277,"column":4},"end":{"line":277,"column":49}},"130":{"start":{"line":281,"column":0},"end":{"line":299,"column":1}},"131":{"start":{"line":282,"column":2},"end":{"line":282,"column":43}},"132":{"start":{"line":283,"column":2},"end":{"line":283,"column":33}},"133":{"start":{"line":284,"column":2},"end":{"line":297,"column":3}},"134":{"start":{"line":285,"column":4},"end":{"line":285,"column":15}},"135":{"start":{"line":286,"column":4},"end":{"line":296,"column":5}},"136":{"start":{"line":287,"column":6},"end":{"line":290,"column":7}},"137":{"start":{"line":291,"column":6},"end":{"line":291,"column":19}},"138":{"start":{"line":292,"column":6},"end":{"line":292,"column":40}},"139":{"start":{"line":293,"column":11},"end":{"line":296,"column":5}},"140":{"start":{"line":294,"column":6},"end":{"line":294,"column":25}},"141":{"start":{"line":295,"column":6},"end":{"line":295,"column":19}},"142":{"start":{"line":298,"column":2},"end":{"line":298,"column":37}},"143":{"start":{"line":302,"column":0},"end":{"line":304,"column":1}},"144":{"start":{"line":303,"column":2},"end":{"line":303,"column":34}},"145":{"start":{"line":313,"column":0},"end":{"line":315,"column":2}},"146":{"start":{"line":314,"column":2},"end":{"line":314,"column":26}},"147":{"start":{"line":317,"column":0},"end":{"line":320,"column":2}},"148":{"start":{"line":318,"column":2},"end":{"line":318,"column":34}},"149":{"start":{"line":319,"column":2},"end":{"line":319,"column":17}},"150":{"start":{"line":322,"column":0},"end":{"line":325,"column":2}},"151":{"start":{"line":323,"column":2},"end":{"line":323,"column":35}},"152":{"start":{"line":324,"column":2},"end":{"line":324,"column":17}},"153":{"start":{"line":341,"column":0},"end":{"line":353,"column":2}},"154":{"start":{"line":342,"column":2},"end":{"line":342,"column":49}},"155":{"start":{"line":343,"column":2},"end":{"line":352,"column":3}},"156":{"start":{"line":345,"column":6},"end":{"line":345,"column":24}},"157":{"start":{"line":347,"column":6},"end":{"line":347,"column":38}},"158":{"start":{"line":349,"column":6},"end":{"line":349,"column":22}},"159":{"start":{"line":351,"column":6},"end":{"line":351,"column":28}}},"branchMap":{"1":{"line":43,"type":"if","locations":[{"start":{"line":43,"column":0},"end":{"line":43,"column":0}},{"start":{"line":43,"column":0},"end":{"line":43,"column":0}}]},"2":{"line":86,"type":"if","locations":[{"start":{"line":86,"column":0},"end":{"line":86,"column":0}},{"start":{"line":86,"column":0},"end":{"line":86,"column":0}}]},"3":{"line":87,"type":"binary-expr","locations":[{"start":{"line":87,"column":42},"end":{"line":87,"column":51}},{"start":{"line":87,"column":55},"end":{"line":87,"column":59}}]},"4":{"line":90,"type":"if","locations":[{"start":{"line":90,"column":0},"end":{"line":90,"column":0}},{"start":{"line":90,"column":0},"end":{"line":90,"column":0}}]},"5":{"line":94,"type":"if","locations":[{"start":{"line":94,"column":0},"end":{"line":94,"column":0}},{"start":{"line":94,"column":0},"end":{"line":94,"column":0}}]},"6":{"line":101,"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":101,"column":2}},{"start":{"line":101,"column":2},"end":{"line":101,"column":2}}]},"7":{"line":117,"type":"cond-expr","locations":[{"start":{"line":117,"column":20},"end":{"line":117,"column":21}},{"start":{"line":117,"column":24},"end":{"line":117,"column":28}}]},"8":{"line":132,"type":"switch","locations":[{"start":{"line":133,"column":6},"end":{"line":135,"column":13}},{"start":{"line":136,"column":6},"end":{"line":142,"column":13}},{"start":{"line":143,"column":6},"end":{"line":149,"column":13}},{"start":{"line":150,"column":6},"end":{"line":152,"column":13}}]},"9":{"line":163,"type":"binary-expr","locations":[{"start":{"line":163,"column":18},"end":{"line":163,"column":24}},{"start":{"line":163,"column":28},"end":{"line":163,"column":39}},{"start":{"line":163,"column":44},"end":{"line":163,"column":45}}]},"10":{"line":177,"type":"binary-expr","locations":[{"start":{"line":177,"column":18},"end":{"line":177,"column":24}},{"start":{"line":177,"column":28},"end":{"line":177,"column":39}},{"start":{"line":177,"column":44},"end":{"line":177,"column":45}}]},"11":{"line":203,"type":"if","locations":[{"start":{"line":203,"column":4},"end":{"line":203,"column":4}},{"start":{"line":203,"column":4},"end":{"line":203,"column":4}}]},"12":{"line":205,"type":"if","locations":[{"start":{"line":205,"column":11},"end":{"line":205,"column":11}},{"start":{"line":205,"column":11},"end":{"line":205,"column":11}}]},"13":{"line":205,"type":"binary-expr","locations":[{"start":{"line":205,"column":15},"end":{"line":205,"column":47}},{"start":{"line":205,"column":51},"end":{"line":205,"column":92}}]},"14":{"line":211,"type":"if","locations":[{"start":{"line":211,"column":4},"end":{"line":211,"column":4}},{"start":{"line":211,"column":4},"end":{"line":211,"column":4}}]},"15":{"line":216,"type":"binary-expr","locations":[{"start":{"line":216,"column":9},"end":{"line":216,"column":21}},{"start":{"line":216,"column":25},"end":{"line":216,"column":36}}]},"16":{"line":221,"type":"if","locations":[{"start":{"line":221,"column":4},"end":{"line":221,"column":4}},{"start":{"line":221,"column":4},"end":{"line":221,"column":4}}]},"17":{"line":225,"type":"if","locations":[{"start":{"line":225,"column":4},"end":{"line":225,"column":4}},{"start":{"line":225,"column":4},"end":{"line":225,"column":4}}]},"18":{"line":263,"type":"if","locations":[{"start":{"line":263,"column":4},"end":{"line":263,"column":4}},{"start":{"line":263,"column":4},"end":{"line":263,"column":4}}]},"19":{"line":274,"type":"if","locations":[{"start":{"line":274,"column":2},"end":{"line":274,"column":2}},{"start":{"line":274,"column":2},"end":{"line":274,"column":2}}]},"20":{"line":284,"type":"if","locations":[{"start":{"line":284,"column":2},"end":{"line":284,"column":2}},{"start":{"line":284,"column":2},"end":{"line":284,"column":2}}]},"21":{"line":286,"type":"if","locations":[{"start":{"line":286,"column":4},"end":{"line":286,"column":4}},{"start":{"line":286,"column":4},"end":{"line":286,"column":4}}]},"22":{"line":286,"type":"binary-expr","locations":[{"start":{"line":286,"column":8},"end":{"line":286,"column":20}},{"start":{"line":286,"column":24},"end":{"line":286,"column":48}}]},"23":{"line":293,"type":"if","locations":[{"start":{"line":293,"column":11},"end":{"line":293,"column":11}},{"start":{"line":293,"column":11},"end":{"line":293,"column":11}}]},"24":{"line":293,"type":"binary-expr","locations":[{"start":{"line":293,"column":15},"end":{"line":293,"column":26}},{"start":{"line":293,"column":30},"end":{"line":293,"column":54}}]},"25":{"line":302,"type":"if","locations":[{"start":{"line":302,"column":0},"end":{"line":302,"column":0}},{"start":{"line":302,"column":0},"end":{"line":302,"column":0}}]},"26":{"line":343,"type":"switch","locations":[{"start":{"line":344,"column":4},"end":{"line":345,"column":24}},{"start":{"line":346,"column":4},"end":{"line":347,"column":38}},{"start":{"line":348,"column":4},"end":{"line":349,"column":22}},{"start":{"line":350,"column":4},"end":{"line":351,"column":28}}]}},"code":["// *****************************************************************************","// Copyright 2013-2017 Aerospike, Inc.","//","// Licensed under the Apache License, Version 2.0 (the \"License\")","// you may not use this file except in compliance with the License.","// You may obtain a copy of the License at","//","//     http://www.apache.org/licenses/LICENSE-2.0","//","// Unless required by applicable law or agreed to in writing, software","// distributed under the License is distributed on an \"AS IS\" BASIS,","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.","// See the License for the specific language governing permissions and","// limitations under the License.","// *****************************************************************************","","// *****************************************************************************","// Benchmark Worker, run operations and report results.","// *****************************************************************************","","var aerospike = require('aerospike')","var cluster = require('cluster')","var util = require('util')","var winston = require('winston')","var stats = require('./stats')","var status = aerospike.status","var alerts = require('./alerts.js')","var argv = require('./config.json')","","// *****************************************************************************","//  MACROS","// *****************************************************************************","","var OP_TYPES = 4 // READ, WRITE, QUERY and SCAN","var READ = 0","var WRITE = 1","var QUERY = 2","var SCAN = 3","var TPS = 0","var TIMEOUT = 1","var ERROR = 2","","if (!cluster.isWorker) {","  console.error('worker.js must only be run as a child process of main.js.')","  process.exit()","}","","argv.ttl = stats.parseTimeToSecs(argv.ttl)","","// variables to track memory growth(RSS) of worker process.","var heapMemory = 0","var initialFlux = true","var memGrowth = 0","var FLUX_PERIOD = 5","","// *****************************************************************************","// Logging","// *****************************************************************************","","var logger = new (winston.Logger)({","  transports: [","    new (winston.transports.Console)({","      level: 'info',","      silent: false,","      colorize: true","    })","  ]","})","","// *****************************************************************************","// Aerospike Client","// *****************************************************************************","","var config = {","  policies: {","    timeout: argv.timeout","  },","  sharedMemory: {","    key: 0xA5000000,","    maxNodes: 16,","    maxNamespaces: 8,","    takeoverThresholdSeconds: 30","  }","}","","if (argv.host) {","  config.hosts = [{addr: argv.host, port: argv.port || 3000}]","}","","if (argv.user !== null) {","  config.user = argv.user","}","","if (argv.password !== null) {","  config.password = argv.password","}","","var client = aerospike.client(config)","","client.connect(function (err) {","  if (err) {","    logger.error('Aerospike server connection error: ', err)","    process.exit(1)","  } else {","    logger.info('worker connected: ' + client.config.hosts)","  }","})","","// *****************************************************************************","// Operations","// *****************************************************************************","/**","* key are in range [min ... max]","*/","function keygen (min, max) {","  var rand = Math.floor(Math.random() * 0x100000000) % (max - min + 1) + min","  return rand < 1 ? 1 : rand","}","","var STRING_DATA = 'This the test data to be written to the server'","/**","* Generate a record with string and blob in it if run for longevity.","* Size of strings and blob is argv.datasize ( default 1K).","*","*","*/","function recordgen (key, binSpec) {","  var data = {}","  var i = 0","  do {","    var bin = binSpec[i]","    switch (bin.type) {","      case 'INTEGER':","        data[bin.name] = key","        break","      case 'STRING':","        data[bin.name] = STRING_DATA","        while (data[bin.name].length < bin.size) {","          data[bin.name] += STRING_DATA","        }","        data[bin.name] += key","        break","      case 'BYTES':","        var bufData = STRING_DATA","        while (bufData.length < bin.size) {","          bufData += STRING_DATA","        }","        data[bin.name] = new Buffer(bufData)","        break","      default:","        data.num = key","        break","    }","    i++","  } while (i < binSpec.length)","  return data","}","","function get (key, done) {","  var timeStart = process.hrtime()","  client.get(key, function (_error, _record, _metadata, _key) {","    var timeEnd = process.hrtime()","    var status = (_error && _error.code) || 0","    done(status, timeStart, timeEnd, READ)","  })","}","","// set the ttl for the write","var metadata = {","  ttl: argv.ttl","}","","function put (options, done) {","  var timeStart = process.hrtime()","  client.put(options.key, options.record, metadata, function (_error, _record, _metadata, _key) {","    var timeEnd = process.hrtime()","    var status = (_error && _error.code) || 0","    done(status, timeStart, timeEnd, WRITE)","  })","}","","// Structure to store per second statistics.","var intervalData = new Array(OP_TYPES)","resetIntervalData()","","function run (options) {","  var expected = options.rops + options.wops","  var completed = 0","","  // @ TO-DO optimization.","  // Currently stats of all the operations is collected and sent to","  // master at the end of an iteration.","  // Master puts the stats in appropriate histogram.","  // Consider having histogram for each worker Vs sending the","  // results in an array - Which one is more memory efficient.","  var operations = Array(expected)","  var readOps = options.rops","  var writeOps = options.wops","","  function done (opStatus, opTimeStart, opTimeEnd, opType) {","    operations[completed] = [opStatus, opTimeStart, opTimeEnd]","    intervalData[opType][TPS]++","    if (opStatus === status.AEROSPIKE_ERR_TIMEOUT) {","      intervalData[opType][TIMEOUT]++","    } else if (opStatus !== status.AEROSPIKE_OK && opStatus !== status.AEROSPIKE_ERR_TIMEOUT) {","      intervalData[opType][ERROR]++","    }","","    completed++","","    if (completed >= expected) {","      process.send(['stats', operations])","    }","  }","","  while (writeOps > 0 || readOps > 0) {","    var k = keygen(options.keyRange.min, options.keyRange.max)","    var key = {ns: options.namespace, set: options.set, key: k}","    var record = recordgen(k, options.binSpec)","    var ops = {key: key, record: record}","    if (writeOps > 0) {","      writeOps--","      put(ops, done)","    }","    if (readOps > 0) {","      readOps--","      get(key, done)","    }","  }","}","","/*"," * Sends the populated intervalData to the parent and resets it for the next second"," */","function respond () {","  process.send(['trans', intervalData])","  resetIntervalData()","}","","/*"," * Reset intervalData"," */","function resetIntervalData () {","  intervalData[READ] = [0, 0, 0] // [reads_performed, reads_timeout, reads_error]","  intervalData[WRITE] = [0, 0, 0] // [writes_performed, writes_timeout, writes_error]","  intervalData[QUERY] = [0, 0, 0] // [QueryRecords, query_timeout, query_error]","  intervalData[SCAN] = [0, 0, 0]","}","","/*"," * Execute the long running job."," */","","function executeJob (options, opType, callback) {","  var job = client.query(options.namespace, options.set, options.statement)","  var stream = job.execute()","  stream.on('data', function (record) {","    // count the records returned","    intervalData[opType][TPS]++","  })","  stream.on('error', function (error) {","    intervalData[opType][ERROR]++","    if (error.code === status.AEROSPIKE_ERR_TIMEOUT) {","      intervalData[opType][TIMEOUT]++","    }","  })","  stream.on('end', function () {","    // update a stat for number of jobs completed.","    callback(options)","  })","}","","var runLongRunningJob = function (options) {","  if (options.statement.filters === undefined) {","    executeJob(options, SCAN, runLongRunningJob)","  } else {","    executeJob(options, QUERY, runLongRunningJob)","  }","}","","var monitorMemory = function () {","  var currentMemory = process.memoryUsage()","  currentMemory.pid = process.pid","  if (heapMemory < currentMemory.heapUsed) {","    memGrowth++","    if (!initialFlux && memGrowth >= FLUX_PERIOD) {","      var alertData = {","        alert: currentMemory,","        severity: alerts.severity.HIGH","      }","      memGrowth = 0","      process.send(['alert', alertData])","    } else if (initialFlux && memGrowth >= FLUX_PERIOD) {","      initialFlux = false","      memGrowth = 0","    }","  }","  heapMemory = currentMemory.heapUsed","}","// log the memory footprint of the process every 10 minutes.","// when it is run in longevity mode.","if (argv.longevity) {","  setInterval(monitorMemory, 6000)","}","// *****************************************************************************","// Event Listeners","// *****************************************************************************","","//","// Listen for exit signal from parent. Hopefully we can do a clean","// shutdown and emit results.","//","process.on('exit', function () {","  logger.debug('Exiting.')","})","","process.on('SIGINT', function () {","  logger.debug('Received SIGINT.')","  process.exit(0)","})","","process.on('SIGTERM', function () {","  logger.debug('Received SIGTERM.')","  process.exit(0)","})","","/**"," * Listen for messages from the parent. This is useful, if the parent"," * wants to run the child for a duration of time, rather than a"," * number of operations."," *"," *  KEY         := STRING | INTEGER"," *  PUT         := '[' \"put\" ',' KEY ',' RECORD ']'"," *  GET         := '[' \"get\" ',' KEY ']'"," *  OPERATION   := GET | PUT"," *  OPERATIONS  := '[' OPERATION+ ']'"," *  COMMAND     := \"run\" ',' OPERATIONS"," *"," *  MESSAGE     := '[' COMMAND ']'"," */","process.on('message', function (msg) {","  logger.debug('command: ', util.inspect(msg[0]))","  switch (msg[0]) {","    case 'run':","      return run(msg[1])","    case 'query':","      return runLongRunningJob(msg[1])","    case 'trans':","      return respond()","    default:","      return process.exit(0)","  }","})",""],"l":{"21":2,"22":2,"23":2,"24":2,"25":0,"26":0,"27":0,"28":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"43":0,"44":0,"45":0,"48":0,"51":0,"52":0,"53":0,"54":0,"60":0,"74":0,"86":0,"87":0,"90":0,"91":0,"94":0,"95":0,"98":0,"100":0,"101":0,"102":0,"103":0,"105":0,"115":1,"116":0,"117":0,"120":0,"127":1,"128":0,"129":0,"130":0,"131":0,"132":0,"134":0,"135":0,"137":0,"138":0,"139":0,"141":0,"142":0,"144":0,"145":0,"146":0,"148":0,"149":0,"151":0,"152":0,"154":0,"156":0,"159":1,"160":0,"161":0,"162":0,"163":0,"164":0,"169":0,"173":1,"174":0,"175":0,"176":0,"177":0,"178":0,"183":0,"184":0,"186":1,"187":0,"188":0,"196":0,"197":0,"198":0,"200":1,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"209":0,"211":0,"212":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"225":0,"226":0,"227":0,"235":1,"236":0,"237":0,"243":1,"244":0,"245":0,"246":0,"247":0,"254":1,"255":0,"256":0,"257":0,"259":0,"261":0,"262":0,"263":0,"264":0,"267":0,"269":0,"273":0,"274":0,"275":0,"277":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"291":0,"292":0,"293":0,"294":0,"295":0,"298":0,"302":0,"303":0,"313":0,"314":0,"317":0,"318":0,"319":0,"322":0,"323":0,"324":0,"341":0,"342":0,"343":0,"345":0,"347":0,"349":0,"351":0}}}